<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Easy on LeetCode</title>
    <link>https://example.com/leetcode/docs/easy/</link>
    <description>Recent content in Easy on LeetCode</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/leetcode/docs/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>⚠️704. 二分查找</title>
      <link>https://example.com/leetcode/docs/easy/704/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/leetcode/docs/easy/704/</guid>
      <description>704. 二分查找 # 题目地址： https://leetcode.cn/problems/binary-search/
解题思路 # 参考 https://www.bilibili.com/video/BV1fA4y1o715/?spm_id_from=333.788
对于常规实现来说，其实要区分区间，也就是左闭右闭和左闭右开的两种解法，对于左闭右闭来说，包含最右边，那么right其实是数组长度-1，但是对于左闭右开来说，因为不包含最右元素，那个right其实就是数组长度。
具体实现 # Go 区间左闭右闭
package main import ( &amp;#34;fmt&amp;#34; ) func main() { arr := []int{0, 1, 2, 3, 4, 5, 10} fmt.Println(binarySearch(arr, 10)) } func binarySearch(nums []int, target int) int { left := 0 right := len(nums) - 1 for left &amp;lt;= right { middle := (left + right) / 2 if target &amp;gt; nums[middle] { left = middle + 1 } else if target &amp;lt; nums[middle] { right = middle - 1 } else { return middle } } return -1 } 区间左闭右开</description>
    </item>
    
  </channel>
</rss>
