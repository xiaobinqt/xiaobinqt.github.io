<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on KeepLearning</title>
    <link>https://example.com/keeplearning/docs/redis/</link>
    <description>Recent content in Redis on KeepLearning</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/keeplearning/docs/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis（一）</title>
      <link>https://example.com/keeplearning/docs/redis/redis1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/keeplearning/docs/redis/redis1/</guid>
      <description>Redis（一） # 一、概述 # Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。
键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。
Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。
二、数据类型 # 数据类型 可以存储的值 操作 STRING 字符串、整数或者浮点数 对整个字符串或者字符串的其中一部分执行操作
对整数和浮点数执行自增或者自减操作 LIST 列表 从两端压入或者弹出元素 对单个或者多个元素进行修剪，
只保留一个范围内的元素 SET 无序集合 添加、获取、移除单个元素
检查一个元素是否存在于集合中
计算交集、并集、差集
从集合里面随机获取元素 HASH 包含键值对的无序散列表 添加、获取、移除单个键值对 获取所有键值对
检查某个键是否存在 ZSET 有序集合 添加、获取、删除元素 根据分值范围或者成员来获取元素
计算一个键的排名 STRING # &amp;gt; set hello world OK &amp;gt; get hello &amp;#34;world&amp;#34; &amp;gt; del hello (integer) 1 &amp;gt; get hello (nil) LIST # &amp;gt; rpush list-key item (integer) 1 &amp;gt; rpush list-key item2 (integer) 2 &amp;gt; rpush list-key item (integer) 3 &amp;gt; lrange list-key 0 -1 1) &amp;#34;item&amp;#34; 2) &amp;#34;item2&amp;#34; 3) &amp;#34;item&amp;#34; &amp;gt; lindex list-key 1 &amp;#34;item2&amp;#34; &amp;gt; lpop list-key &amp;#34;item&amp;#34; &amp;gt; lrange list-key 0 -1 1) &amp;#34;item2&amp;#34; 2) &amp;#34;item&amp;#34; SET # &amp;gt; sadd set-key item (integer) 1 &amp;gt; sadd set-key item2 (integer) 1 &amp;gt; sadd set-key item3 (integer) 1 &amp;gt; sadd set-key item (integer) 0 &amp;gt; smembers set-key 1) &amp;#34;item&amp;#34; 2) &amp;#34;item2&amp;#34; 3) &amp;#34;item3&amp;#34; &amp;gt; sismember set-key item4 (integer) 0 &amp;gt; sismember set-key item (integer) 1 &amp;gt; srem set-key item2 (integer) 1 &amp;gt; srem set-key item2 (integer) 0 &amp;gt; smembers set-key 1) &amp;#34;item&amp;#34; 2) &amp;#34;item3&amp;#34; HASH # &amp;gt; hset hash-key sub-key1 value1 (integer) 1 &amp;gt; hset hash-key sub-key2 value2 (integer) 1 &amp;gt; hset hash-key sub-key1 value1 (integer) 0 &amp;gt; hgetall hash-key 1) &amp;#34;sub-key1&amp;#34; 2) &amp;#34;value1&amp;#34; 3) &amp;#34;sub-key2&amp;#34; 4) &amp;#34;value2&amp;#34; &amp;gt; hdel hash-key sub-key2 (integer) 1 &amp;gt; hdel hash-key sub-key2 (integer) 0 &amp;gt; hget hash-key sub-key1 &amp;#34;value1&amp;#34; &amp;gt; hgetall hash-key 1) &amp;#34;sub-key1&amp;#34; 2) &amp;#34;value1&amp;#34; ZSET # &amp;gt; zadd zset-key 728 member1 (integer) 1 &amp;gt; zadd zset-key 982 member0 (integer) 1 &amp;gt; zadd zset-key 982 member0 (integer) 0 &amp;gt; zrange zset-key 0 -1 withscores 1) &amp;#34;member1&amp;#34; 2) &amp;#34;728&amp;#34; 3) &amp;#34;member0&amp;#34; 4) &amp;#34;982&amp;#34; &amp;gt; zrangebyscore zset-key 0 800 withscores 1) &amp;#34;member1&amp;#34; 2) &amp;#34;728&amp;#34; &amp;gt; zrem zset-key member1 (integer) 1 &amp;gt; zrem zset-key member1 (integer) 0 &amp;gt; zrange zset-key 0 -1 withscores 1) &amp;#34;member0&amp;#34; 2) &amp;#34;982&amp;#34; 三、数据结构 # 字典 # dictht 是一个散列表结构，使用拉链法解决哈希冲突。</description>
    </item>
    
    <item>
      <title>Redis（二）</title>
      <link>https://example.com/keeplearning/docs/redis/redis2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/keeplearning/docs/redis/redis2/</guid>
      <description>Redis（二） # 八、持久化 # Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。
RDB 持久化 # 将某个时间点的所有数据都存放到硬盘上。
可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。
如果系统发生故障，将会丢失最后一次创建快照之后的数据。
如果数据量很大，保存快照的时间会很长。
AOF 持久化 # 将写命令添加到 AOF 文件（Append Only File）的末尾。
使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：
选项 同步频率 always 每个写命令都同步 everysec 每秒同步一次 no 让操作系统来决定何时同步 always 选项会严重减低服务器的性能； everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响； no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。 随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。
九、事务 # 一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。
事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。
Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。
十、事件 # Redis 服务器是一个事件驱动程序。
文件事件 # 服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。
Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</description>
    </item>
    
  </channel>
</rss>
