<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on KeepLearning</title>
    <link>https://example.com/keeplearning/docs/redis/</link>
    <description>Recent content in Redis on KeepLearning</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/keeplearning/docs/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>总览</title>
      <link>https://example.com/keeplearning/docs/redis/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/keeplearning/docs/redis/overview/</guid>
      <description>总览 # 一、概述 # Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。&#xA;键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。&#xA;Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。&#xA;二、数据类型 # 数据类型 可以存储的值 操作 STRING 字符串、整数或者浮点数 对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作 LIST 列表 从两端压入或者弹出元素 对单个或者多个元素进行修剪， 只保留一个范围内的元素 SET 无序集合 添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素 HASH 包含键值对的无序散列表 添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在 ZSET 有序集合 添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名 What Redis data structures look like&#xA;STRING # &amp;gt; set hello world OK &amp;gt; get hello &amp;#34;world&amp;#34; &amp;gt; del hello (integer) 1 &amp;gt; get hello (nil) LIST # &amp;gt; rpush list-key item (integer) 1 &amp;gt; rpush list-key item2 (integer) 2 &amp;gt; rpush list-key item (integer) 3 &amp;gt; lrange list-key 0 -1 1) &amp;#34;item&amp;#34; 2) &amp;#34;item2&amp;#34; 3) &amp;#34;item&amp;#34; &amp;gt; lindex list-key 1 &amp;#34;item2&amp;#34; &amp;gt; lpop list-key &amp;#34;item&amp;#34; &amp;gt; lrange list-key 0 -1 1) &amp;#34;item2&amp;#34; 2) &amp;#34;item&amp;#34; SET # &amp;gt; sadd set-key item (integer) 1 &amp;gt; sadd set-key item2 (integer) 1 &amp;gt; sadd set-key item3 (integer) 1 &amp;gt; sadd set-key item (integer) 0 &amp;gt; smembers set-key 1) &amp;#34;item&amp;#34; 2) &amp;#34;item2&amp;#34; 3) &amp;#34;item3&amp;#34; &amp;gt; sismember set-key item4 (integer) 0 &amp;gt; sismember set-key item (integer) 1 &amp;gt; srem set-key item2 (integer) 1 &amp;gt; srem set-key item2 (integer) 0 &amp;gt; smembers set-key 1) &amp;#34;item&amp;#34; 2) &amp;#34;item3&amp;#34; HASH # &amp;gt; hset hash-key sub-key1 value1 (integer) 1 &amp;gt; hset hash-key sub-key2 value2 (integer) 1 &amp;gt; hset hash-key sub-key1 value1 (integer) 0 &amp;gt; hgetall hash-key 1) &amp;#34;sub-key1&amp;#34; 2) &amp;#34;value1&amp;#34; 3) &amp;#34;sub-key2&amp;#34; 4) &amp;#34;value2&amp;#34; &amp;gt; hdel hash-key sub-key2 (integer) 1 &amp;gt; hdel hash-key sub-key2 (integer) 0 &amp;gt; hget hash-key sub-key1 &amp;#34;value1&amp;#34; &amp;gt; hgetall hash-key 1) &amp;#34;sub-key1&amp;#34; 2) &amp;#34;value1&amp;#34; ZSET # &amp;gt; zadd zset-key 728 member1 (integer) 1 &amp;gt; zadd zset-key 982 member0 (integer) 1 &amp;gt; zadd zset-key 982 member0 (integer) 0 &amp;gt; zrange zset-key 0 -1 withscores 1) &amp;#34;member1&amp;#34; 2) &amp;#34;728&amp;#34; 3) &amp;#34;member0&amp;#34; 4) &amp;#34;982&amp;#34; &amp;gt; zrangebyscore zset-key 0 800 withscores 1) &amp;#34;member1&amp;#34; 2) &amp;#34;728&amp;#34; &amp;gt; zrem zset-key member1 (integer) 1 &amp;gt; zrem zset-key member1 (integer) 0 &amp;gt; zrange zset-key 0 -1 withscores 1) &amp;#34;member0&amp;#34; 2) &amp;#34;982&amp;#34; 三、数据结构 # 字典 # dictht 是一个散列表结构，使用拉链法解决哈希冲突。</description>
    </item>
    <item>
      <title>STRING</title>
      <link>https://example.com/keeplearning/docs/redis/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/keeplearning/docs/redis/string/</guid>
      <description> STRING # </description>
    </item>
  </channel>
</rss>
