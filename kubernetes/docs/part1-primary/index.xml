<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一部分 Docker on Kubernetes 学习笔记</title>
    <link>https://example.com/kubernetes/docs/part1-primary/</link>
    <description>Recent content in 第一部分 Docker on Kubernetes 学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/kubernetes/docs/part1-primary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 Docker 简介</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.1-docker-brief/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.1-docker-brief/</guid>
      <description>&lt;h1 id=&#34;11-docker-简介&#34;&gt;&#xA;  1.1 Docker 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-docker-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/d55b31e11e9546cb992bbd5af756b5ca.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;目前使用 Docker 基本上有两个选择：Docker Desktop 和 Docker Engine。&lt;/p&gt;&#xA;&lt;p&gt;Docker Desktop 是专门针对个人使用而设计的，支持 Mac 和 Windows 快速安装，具有直观的图形界面，还集成了许多周边工具，方便易用。Docker Engine 完全免费，但只能在 Linux 上运行，只能使用命令行操作，缺乏辅助工具，需要我们自己动手安装运行环境，是现在各个公司在生产环境中实际使用的 Docker 产品，毕竟机房里 99% 的服务器跑的都是 Linux。&lt;/p&gt;&#xA;&lt;h2 id=&#34;111-docker-安装&#34;&gt;&#xA;  1.1.1 Docker 安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-docker-%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Docker 的安装可以参看官网 &#xA;  &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/2b23eaefbd5c48efa34ae369fbe20cc2.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;Docker Engine 不像 Docker Desktop 那样可以安装后就直接使用，必须要做一些手工调整才能用起来，所以在安装完毕后需要执行下面的两条命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service docker start       &lt;span style=&#34;color:#75715e&#34;&gt;#启动docker服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#当前用户加入docker组&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个 service docker start 是启动 Docker 的后台服务，第二个 usermod -aG 是把当前的用户加入 Docker 的用户组。这是因为操作 Docker 必须要有 root 权限，而直接使用 root 用户不够安全，加入 Docker 用户组是一个比较好的选择，这也是 Docker &lt;strong&gt;官方推荐&lt;/strong&gt;的做法。当然，如果为了图省事，也可以直接切换到 root 用户来操作 Docker。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.2 Docker 常用命令</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.2-docker-cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.2-docker-cmd/</guid>
      <description>&lt;h1 id=&#34;12-docker-常用命令&#34;&gt;&#xA;  1.2 Docker 常用命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-docker-%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;docker-version&#34;&gt;&#xA;  docker version&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-version&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;docker version 会输出 Docker 客户端和服务器各自的版本信息：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/516d4f128f364c269f7b9d586b9573aa.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;docker-info&#34;&gt;&#xA;  docker info&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-info&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;docker info 会显示当前 Docker 系统相关的信息，例如 CPU、内存、容器数量、镜像数量、容器运行时、存储文件系统等等：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Server&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Running&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Paused&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Stopped&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Images&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Server Version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20.10.12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Storage Driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;overlay2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Backing Filesystem&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;extfs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Cgroup Driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;systemd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Default Runtime&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;runc&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Kernel Version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.13.0-19&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;generic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Operating System&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ubuntu Jammy Jellyfish (development branch)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;OSType&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;linux&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Architecture&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;aarch64&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;CPUs&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Total Memory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;822GiB&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Docker Root Dir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/lib/docker&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;docker info 显示的信息，对了解 Docker 的内部运行状态非常有用，比如可以很直观的能够看到当前有一个容器处于停止状态，有 8 个镜像，存储用的文件系统是 overlay2，Linux 内核是 5.13，操作系统是 Ubuntu 22.04 Jammy Jellyfish，硬件是 aarch64，两个 CPU，内存 4G。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.3 容器</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.3-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.3-container/</guid>
      <description>&lt;h1 id=&#34;13-容器&#34;&gt;&#xA;  1.3 容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;可以使用 docker pull 命令，拉取一个新的镜像——操作系统 Alpine：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull alpine&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用 docker run 命令运行它的 Shell 程序：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it alpine sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;参数，可以离开当前的操作系统，进入容器内部。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/b175fe1f42ee4203b83459cf68bf3cd6.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;容器，就是一个特殊的隔离环境，它能够让进程只看到这个环境里的有限信息，不能对外界环境施加影响。&lt;/p&gt;&#xA;&lt;h2 id=&#34;131-为什么需要隔离&#34;&gt;&#xA;  1.3.1 为什么需要隔离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#131-%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e9%9a%94%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;对于操作系统来说，一个不受任何限制的应用程序是十分危险的。这个进程能够看到系统里所有的文件、所有的进程、所有的网络流量，访问内存里的任何数据，那么恶意程序很容易就会把系统搞瘫痪，正常程序也可能会因为无意的 Bug 导致信息泄漏或者其他安全事故。&lt;/p&gt;&#xA;&lt;p&gt;使用容器技术，就可以让应用程序运行在一个有严密防护的 “沙盒”（Sandbox）环境之内，它可以在这个环境里自由活动，但绝不允许 “越界”，从而保证了容器外系统的安全。&lt;/p&gt;&#xA;&lt;p&gt;在计算机里有各种各样的资源，CPU、内存、硬盘、网卡，虽然目前的高性能服务器都是几十核 CPU、上百 GB 的内存、数 TB 的硬盘、万兆网卡，但这些资源终究是有限的，而且考虑到成本，也不允许某个应用程序无限制地占用。容器技术的另一个本领就是为应用程序加上资源隔离，在系统里切分出一部分资源，让它只能使用指定的配额，比如只能使用一个 CPU，只能使用 1GB 内存等等，这样就可以避免容器内进程的过度系统消耗，充分利用计算机硬件，让有限的资源能够提供稳定可靠的服务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;132-容器和虚拟机的区别&#34;&gt;&#xA;  1.3.2 容器和虚拟机的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#132-%e5%ae%b9%e5%99%a8%e5%92%8c%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;容器和虚拟机面对的都是相同的问题，使用的也都是虚拟化技术，只是所在的层次不同。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/eb68972270bb4f7fa1ffd68a2d7cc44f.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;容器和虚拟机的目的都是隔离资源，保证系统安全，尽量提高资源的利用率。&lt;/p&gt;&#xA;&lt;p&gt;从实现的角度来看，虚拟机虚拟化出来的是硬件，需要在上面再安装一个操作系统后才能够运行应用程序，而硬件虚拟化和操作系统都比较 “重”，会消耗大量的 CPU、内存、硬盘等系统资源，但这些消耗其实并没有带来什么价值，属于 “重复劳动” 和 “无用功”，不过好处就是隔离程度非常高，每个虚拟机之间可以做到完全无干扰。&lt;/p&gt;&#xA;&lt;p&gt;容器直接利用了下层的计算机硬件和操作系统，因为比虚拟机少了一层，所以自然就会节约 CPU 和内存，显得非常轻量级，能够更高效地利用硬件资源。不过，因为多个容器共用操作系统内核，应用程序的隔离程度就没有虚拟机那么高。&lt;/p&gt;&#xA;&lt;h2 id=&#34;133-隔离的实现&#34;&gt;&#xA;  1.3.3 隔离的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#133-%e9%9a%94%e7%a6%bb%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Linux 操作系统内核为资源隔离提供了三种技术：namespace、cgroup、chroot，虽然这三种技术的初衷并不是为了实现容器，但它们三个结合在一起就会发生奇妙的 “化学反应”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.4 镜像</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.4-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.4-image/</guid>
      <description>&lt;h1 id=&#34;14-镜像&#34;&gt;&#xA;  1.4 镜像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;141-什么是镜像&#34;&gt;&#xA;  1.4.1 什么是镜像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e4%bb%80%e4%b9%88%e6%98%af%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;镜像和常见的 tar、rpm、deb 等安装包一样，都打包了应用程序，但最大的不同点在于它里面不仅有基本的可执行文件，还有应用运行时的整个系统环境。这就让镜像具有了非常好的跨平台便携性和兼容性，能够让开发者在一个系统上开发（例如 Ubuntu），然后打包成镜像，再去另一个系统上运行（例如 CentOS），完全不需要考虑环境依赖的问题，是一种更高级的应用打包方式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;142-镜像的内部机制&#34;&gt;&#xA;  1.4.2 镜像的内部机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#142-%e9%95%9c%e5%83%8f%e7%9a%84%e5%86%85%e9%83%a8%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;容器镜像内部并不是一个平坦的结构，而是由许多的镜像层组成的，每层都是只读不可修改的一组文件，相同的层可以在镜像之间共享，然后多个层像搭积木一样堆叠起来，再使用一种叫 “Union FS 联合文件系统” 的技术把它们合并在一起，就形成了容器最终看到的文件系统。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/02f844e216a8409ea55b818817e3690f.png&#34; width=600  /&gt;&lt;/div&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230509/ae532d2e13c74191b0271071c7d10677.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;Docker 会检查是否有重复的层，如果本地已经存在就不会重复下载，如果层被其他镜像共享就不会删除，这样就可以节约磁盘和网络成本。&lt;/p&gt;&#xA;&lt;h2 id=&#34;143-容器化应用&#34;&gt;&#xA;  1.4.3 容器化应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#143-%e5%ae%b9%e5%99%a8%e5%8c%96%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;“容器化的应用” 或 “应用的容器化”，就是指应用程序不再直接和操作系统打交道，而是封装成镜像，再交给容器环境去运行。镜像就是静态的应用容器，容器就是动态的应用镜像，两者互相依存，互相转化，密不可分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;144-镜像的命名规则&#34;&gt;&#xA;  1.4.4 镜像的命名规则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#144-%e9%95%9c%e5%83%8f%e7%9a%84%e5%91%bd%e5%90%8d%e8%a7%84%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;镜像的完整名字由两个部分组成，名字和标签，中间用&lt;code&gt;:&lt;/code&gt;连接起来。&lt;/p&gt;&#xA;&lt;p&gt;名字表明了应用的身份，比如 busybox、Alpine、Nginx、Redis 等等。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230510/48ac7b209eef494bb50530649996715f.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;标签（tag）可以理解成是为了区分不同版本的应用而做的额外标记，任何字符串都可以，比如 3.15 是纯数字的版本号、jammy 是项目代号、1.21-alpine 是版本号加操作系统名等等。其中有一个比较特殊的标签叫 “latest”，它是默认的标签，如果只提供名字没有附带标签，那么就会使用这个默认的 “latest” 标签。&lt;/p&gt;&#xA;&lt;p&gt;通常来说，镜像标签的格式是&lt;strong&gt;应用的版本号加上操作系统&lt;/strong&gt;。版本号基本上都是&lt;strong&gt;主版本号 + 次版本号 + 补丁号&lt;/strong&gt;的形式，有的还会在正式发布前出 rc 版（候选版本，release candidate）。而操作系统的情况略微复杂，因为各个 Linux 发行版的命名方式 “花样” 太多。Alpine、CentOS 的命名比较简单明了，就是数字的版本号，像 alpine3.15 ，而 Ubuntu、Debian 则采用了代号的形式。比如 Ubuntu 18.04 是 bionic，Ubuntu 20.04 是 focal，Debian 9 是 stretch，Debian 10 是 buster，Debian 11 是 bullseye。另外，&lt;strong&gt;有的标签还会加上&#xA;slim、fat，来进一步表示这个镜像的内容是经过精简的，还是包含了较多的辅助工具&lt;/strong&gt;。通常 slim 镜像会比较小，运行效率高，而 fat 镜像会比较大，适合用来开发调试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.5 网络互通</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.5-network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.5-network/</guid>
      <description>&lt;h1 id=&#34;15-网络互通&#34;&gt;&#xA;  1.5 网络互通&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e7%bd%91%e7%bb%9c%e4%ba%92%e9%80%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;151-容器网络&#34;&gt;&#xA;  1.5.1 容器网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 Docker 网络中，有三个比较核心的概念，分别是：沙盒（Sandbox）、网络（Network）、端点（Endpoint）。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;沙盒提供了容器的虚拟网络栈，也就是端口套接字、IP 路由表、防火墙等内容。实现隔离容器网络与宿主机网络，形成了完全独立的容器网络环境。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;网络可以理解为 Docker 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯。Docker 的这种虚拟网络也是与宿主机网络存在隔离关系的，其目的主要是形成容器间的安全通讯环境。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;端点是位于容器或网络隔离墙之上的 “洞”，其主要目的是形成一个可以控制的突破封闭的网络环境的出入口。当容器的端点与网络的端点形成配对后，就如同在这两者之间搭建了桥梁，便能够进行数据传输了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这三者形成了 Docker 网络的核心模型，也就是容器网络模型（Container Network Model）。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/de6fe8d93f6144869b7df7e89bfc88b6.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;152-网络驱动&#34;&gt;&#xA;  1.5.2 网络驱动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-%e7%bd%91%e7%bb%9c%e9%a9%b1%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Docker 官方提供了五种基础的 Docker 网络驱动：&lt;code&gt;Bridge Driver&lt;/code&gt;、&lt;code&gt;Host Driver&lt;/code&gt;、&lt;code&gt;Overlay Driver&lt;/code&gt;、&lt;code&gt;MacLan Driver&lt;/code&gt;、&lt;code&gt;None Driver&lt;/code&gt;，并基于这些网络驱动又衍生了一些其他的网络驱动，如 IPvlan。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bridge&#34;&gt;&#xA;  Bridge&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bridge&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Bridge（桥接）网络是&lt;strong&gt;默认&lt;/strong&gt;的网络驱动程序，它提供了容器之间的基本网络通信功能。Docker 桥接网络通过在主机上创建一个虚拟网桥并将容器连接到该网桥来实现容器之间的通信。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221231/92f31a89783a4f8c95abe007d7633f45.png&#34; width=600  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;当创建一个桥接网络时，Docker 会在主机上创建一个虚拟网桥（默认为 docker0），并为该网桥分配一个 IP 地址&lt;code&gt;172.17.0.1&lt;/code&gt;。每个容器连接到这个桥接网络时，都会&lt;strong&gt;分配一个唯一的 B 类私 IP 地址，如&lt;code&gt;172.17.0.2&lt;/code&gt;&lt;/strong&gt;，并通过网络地址转换（NAT）实现与主机和其他容器之间的通信。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;端口号映射需要使用 bridge 模式，并且在 docker run 启动容器时使用 -p 参数，用&lt;code&gt;:&lt;/code&gt;分隔本机端口和容器端口。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用 Docker 桥接网络有以下特点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;默认网络驱动程序：桥接网络是 Docker 的默认网络驱动程序，因此当创建容器时，如果没有显式指定网络驱动程序，则会自动使用桥接网络。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.6 Docker Compose</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.6-docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.6-docker-compose/</guid>
      <description>&lt;h1 id=&#34;16-docker-compose&#34;&gt;&#xA;  1.6 Docker Compose&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-docker-compose&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230612/5dd80d21a8514c9aba50f684ade89b79.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;docker-compose 是一个在单机环境里轻量级的容器编排工具。&lt;/p&gt;&#xA;&lt;p&gt;在 Docker 把容器技术大众化之后，Docker 周边涌现出了数不胜数的扩展、增强产品，其中有一个名字叫 Fig 的项目。Fig 为 Docker 引入了 “容器编排” 的概念，使用 YAML 来定义容器的启动参数、先后顺序和依赖关系，让用户不再有 Docker 冗长命令行的烦恼，第一次见识到了 “声明式” 的威力。Docker 公司在 2014 年 7 月把 Fig 买了下来，集成进 Docker 内部，然后改名成了 docker-compose。&lt;/p&gt;&#xA;&lt;h2 id=&#34;161-安装&#34;&gt;&#xA;  1.6.1 安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#161-%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;docker-compose 的安装比较简单，它在 GitHub &#xA;  &lt;a href=&#34;https://github.com/docker/compose&#34;&gt;https://github.com/docker/compose&lt;/a&gt; 上提供了多种形式的二进制可执行文件，支持 Windows、macOS、Linux 等操作系统，也支持 x86_64、arm64 等硬件架构，可以直接下载。docker-compose 还可以安装成 docker 的插件，以子命令的形式使用，也就是&lt;code&gt;docker compose&lt;/code&gt;（没有中间的横线），具体可以参看文档&#xA;  &lt;a href=&#34;https://docs.docker.com/compose/install/linux/&#34;&gt;Install the Compose plugin&lt;/a&gt;。建议使用传统的 docker-compose 的形式，这样兼容性更强。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo curl -SL https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o /usr/local/bin/docker-compose&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x /usr/local/bin/docker-compose&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230612/af793caa73ed4283950119f6a98e4203.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;162-使用&#34;&gt;&#xA;  1.6.2 使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#162-%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;docker-compose 里管理容器的核心概念是 service。service 就是一个容器化的应用程序，通常是一个后台服务，用 YAML 定义这些容器的参数和相互之间的关系。下面的这个就是私有镜像仓库 Registry 的 YAML 文件：&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.7 私有镜像仓库</title>
      <link>https://example.com/kubernetes/docs/part1-primary/1.7-private-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/kubernetes/docs/part1-primary/1.7-private-registry/</guid>
      <description>&lt;h1 id=&#34;17-私有镜像仓库&#34;&gt;&#xA;  1.7 私有镜像仓库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#17-%e7%a7%81%e6%9c%89%e9%95%9c%e5%83%8f%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在离线环境里，可以自己搭建私有仓库。私有镜像仓库有很多现成的解决方案，最简单的是 Docker Registry，也有功能更完善的 CNCF Harbor。&lt;/p&gt;&#xA;&lt;h2 id=&#34;171-registry&#34;&gt;&#xA;  1.7.1 registry&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#171-registry&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;可以在 Docker Hub 网站上搜索 “registry”，找到官方页面 &#xA;  &lt;a href=&#34;https://registry.hub.docker.com/_/registry/&#34;&gt;https://registry.hub.docker.com/_/registry/&lt;/a&gt;：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230630/cbee553a65024712a173b4d5a9eb26e9.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;首先，需要使用 docker pull 命令拉取镜像：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull registry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，需要做一个端口映射，对外暴露端口，这样 Docker Registry 才能提供服务。它的容器内端口是 5000，可以再容器外也使用同样的 5000 端口，运行命令是&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d -p 5000:5000 registry ：docker run -d -p 5000:5000 registry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 Docker Registry 之后，可以使用 docker ps 查看运行状态，可以看到它确实把本机的 5000 端口映射到了容器内的 5000 端口。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230630/a0eb002c8e0c4920987f784404f647ee.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;可以使用 docker tag 命令给镜像打标签再上传了。因为上传的目标不是默认的 Docker Hub，而是本地的私有仓库，所以镜像的名字前面还&lt;strong&gt;必须&lt;/strong&gt;再加上仓库的地址（域名或者 IP 地址都行），形式上和 HTTP 的 URL 相似。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
