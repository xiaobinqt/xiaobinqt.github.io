<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on wiki</title>
    <link>https://example.com/wiki/docs/php/</link>
    <description>Recent content in PHP on wiki</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/wiki/docs/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 版本区别</title>
      <link>https://example.com/wiki/docs/php/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/versions/</guid>
      <description>&lt;h1 id=&#34;15-版本区别&#34;&gt;&#xA;  1.5 版本区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e7%89%88%e6%9c%ac%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;151-汇总&#34;&gt;&#xA;  1.5.1 汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;PHP5.1：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;autoload&lt;/li&gt;&#xA;&lt;li&gt;PDO&lt;/li&gt;&#xA;&lt;li&gt;MySQLi&lt;/li&gt;&#xA;&lt;li&gt;类型约束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.2：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JSON 支持&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.3：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命名空间&lt;/li&gt;&#xA;&lt;li&gt;匿名函数&lt;/li&gt;&#xA;&lt;li&gt;闭包&lt;/li&gt;&#xA;&lt;li&gt;新增魔术方法&lt;code&gt;__callStatic()&lt;/code&gt;和&lt;code&gt;__invoke()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;新增魔术变量&lt;code&gt;__DIR__&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;动态调用静态方法&lt;/li&gt;&#xA;&lt;li&gt;延迟静态绑定&lt;/li&gt;&#xA;&lt;li&gt;Heredoc和 Nowdoc&lt;/li&gt;&#xA;&lt;li&gt;类外使用const定义常量&lt;/li&gt;&#xA;&lt;li&gt;三元运算符&lt;/li&gt;&#xA;&lt;li&gt;Phar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.4：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Short Open Tag&lt;/li&gt;&#xA;&lt;li&gt;数组简写&lt;/li&gt;&#xA;&lt;li&gt;Traits,&lt;/li&gt;&#xA;&lt;li&gt;内置 Web 服务器&lt;/li&gt;&#xA;&lt;li&gt;动态访问静态方法&lt;/li&gt;&#xA;&lt;li&gt;实例化时访问类成员&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.5：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;yield&lt;/li&gt;&#xA;&lt;li&gt;list用于foreach&lt;/li&gt;&#xA;&lt;li&gt;细节修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.6:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常量增强&lt;/li&gt;&#xA;&lt;li&gt;命名空间增强&lt;/li&gt;&#xA;&lt;li&gt;可变函数参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.0:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标量类型声明&lt;/li&gt;&#xA;&lt;li&gt;返回值类型声明&lt;/li&gt;&#xA;&lt;li&gt;defined定义常量数组&lt;/li&gt;&#xA;&lt;li&gt;匿名类&lt;/li&gt;&#xA;&lt;li&gt;null合并运算符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.1：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可为空类型&lt;/li&gt;&#xA;&lt;li&gt;void类型&lt;/li&gt;&#xA;&lt;li&gt;多异常捕获&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.2：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新的对象object&lt;/li&gt;&#xA;&lt;li&gt;允许重写抽象方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.3：语法层面没有很大的改变&lt;/p&gt;&#xA;&lt;p&gt;PHP7.4：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类型属性&lt;/li&gt;&#xA;&lt;li&gt;箭头函数&lt;/li&gt;&#xA;&lt;li&gt;Null合并运算符支持方法&lt;/li&gt;&#xA;&lt;li&gt;Opcache 预加载&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP8.0:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JIT即时编译&lt;/li&gt;&#xA;&lt;li&gt;命名参数&lt;/li&gt;&#xA;&lt;li&gt;注解&lt;/li&gt;&#xA;&lt;li&gt;联合类型&lt;/li&gt;&#xA;&lt;li&gt;Match表达式&lt;/li&gt;&#xA;&lt;li&gt;Nullsafe 运算符&lt;/li&gt;&#xA;&lt;li&gt;构造器属性提升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;152-php51&#34;&gt;&#xA;  1.5.2 PHP5.1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-php51&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;__autoload魔术方法&#34;&gt;&#xA;  __autoload()魔术方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#__autoload%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这是一个自动加载函数，在PHP5中，当我们实例化一个未定义的类时，就会触发此函数。可以通过定义这个函数来启用&#xA;  &lt;a href=&#34;https://link.segmentfault.com/?enc=K6gPDJqLNKcNB5cibcWVfw%3D%3D.0mC%2F5XlatumrZLgT1aW9WO6OFTQm1A4eDR8r9pVPKT56kJfXLv1dstDiE2EGi5bUB4iFfW7CcpZN9YeIVuAAvA%3D%3D&#34;&gt;类的自动加载&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.2 常见问题（一）</title>
      <link>https://example.com/wiki/docs/php/faq1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/faq1/</guid>
      <description>&lt;h1 id=&#34;11-常见问题一&#34;&gt;&#xA;  1.1 常见问题（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;请解释-php-中的超全局变量是什么并列举其中几个例子&#34;&gt;&#xA;  请解释 PHP 中的超全局变量是什么，并列举其中几个例子&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b7%e8%a7%a3%e9%87%8a-php-%e4%b8%ad%e7%9a%84%e8%b6%85%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f%e6%98%af%e4%bb%80%e4%b9%88%e5%b9%b6%e5%88%97%e4%b8%be%e5%85%b6%e4%b8%ad%e5%87%a0%e4%b8%aa%e4%be%8b%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，超全局变量（Super Global Variables）是一类特殊的全局变量，它们在脚本的任何地方都可以访问，并且不受作用域的限制。这些变量是 PHP 预定义的，用于在脚本中存储和访问与服务器环境和用户请求相关的信息。&lt;/p&gt;&#xA;&lt;p&gt;超全局变量在 PHP 中以数组的形式存在，可以直接访问其中的元素，无需使用 &lt;code&gt;global&lt;/code&gt; 关键字。以下是几个 PHP 中常用的超全局变量及其作用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_GET&lt;/code&gt;：&lt;/strong&gt; 用于获取通过 URL 查询字符串传递的参数值。例如，如果 URL 为 &lt;code&gt;example.com/index.php?name=John&lt;/code&gt;，则可以使用 &lt;code&gt;$_GET[&#39;name&#39;]&lt;/code&gt; 来获取 &lt;code&gt;John&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_POST&lt;/code&gt;：&lt;/strong&gt; 用于获取通过 POST 方法提交的表单数据。例如，如果表单中有一个字段 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt;&lt;/code&gt;，则可以使用 &lt;code&gt;$_POST[&#39;username&#39;]&lt;/code&gt; 来获取用户提交的值。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_REQUEST&lt;/code&gt;：&lt;/strong&gt; 综合了 &lt;code&gt;$_GET&lt;/code&gt;、&lt;code&gt;$_POST&lt;/code&gt; 和 &lt;code&gt;$_COOKIE&lt;/code&gt; 的内容。可以用于获取所有通过 GET 或 POST 方法传递的参数值，以及 Cookie 中的数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_SESSION&lt;/code&gt;：&lt;/strong&gt; 用于在 PHP 中启动会话，并存储会话中的数据。通过 &lt;code&gt;session_start()&lt;/code&gt; 启动会话后，可以使用 &lt;code&gt;$_SESSION&lt;/code&gt; 数组存储和访问会话数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.3 常见问题（二）</title>
      <link>https://example.com/wiki/docs/php/faq2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/faq2/</guid>
      <description>&lt;h2 id=&#34;12-常见问题二&#34;&gt;&#xA;  1.2 常见问题（二）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%ba%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;请解释-php-中的黑魔法dark-magic是什么以及它与常规-php-编程的区别&#34;&gt;&#xA;  请解释 PHP 中的黑魔法（Dark Magic）是什么，以及它与常规 PHP 编程的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b7%e8%a7%a3%e9%87%8a-php-%e4%b8%ad%e7%9a%84%e9%bb%91%e9%ad%94%e6%b3%95dark-magic%e6%98%af%e4%bb%80%e4%b9%88%e4%bb%a5%e5%8f%8a%e5%ae%83%e4%b8%8e%e5%b8%b8%e8%a7%84-php-%e7%bc%96%e7%a8%8b%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，黑魔法通常指的是一些复杂、晦涩难懂或有风险的编码技巧。黑魔法与常规 PHP 编程的区别在于它们通常违反了良好的编码规范，难以理解和维护。&lt;/p&gt;&#xA;&lt;h2 id=&#34;php-中的-brotli-压缩算法是什么gzip-压缩的比较&#34;&gt;&#xA;  PHP 中的 Brotli 压缩算法是什么，gzip 压缩的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#php-%e4%b8%ad%e7%9a%84-brotli-%e5%8e%8b%e7%bc%a9%e7%ae%97%e6%b3%95%e6%98%af%e4%bb%80%e4%b9%88gzip-%e5%8e%8b%e7%bc%a9%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Brotli 是一种新的压缩算法，用于压缩 HTTP 内容，可以显著减少传输数据的大小，从而提高网站的加载速度。与 gzip 相比，Brotli 压缩率更高，但相应的压缩和解压缩时间较长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.4 PHP 扩展</title>
      <link>https://example.com/wiki/docs/php/extend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/extend/</guid>
      <description>&lt;h1 id=&#34;13-php-扩展&#34;&gt;&#xA;  1.3 PHP 扩展&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-php-%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;如何使用-php-gd-库在服务器端生成图像&#34;&gt;&#xA;  如何使用 PHP GD 库在服务器端生成图像？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8-php-gd-%e5%ba%93%e5%9c%a8%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e7%94%9f%e6%88%90%e5%9b%be%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用 PHP GD 库在服务器端生成图像可以通过 GD 扩展来实现。GD 扩展提供了一组用于处理图像的函数，包括创建图像、绘制图形和添加文本等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;php-中的-gmp-扩展是什么以及它在处理大整数和加密方面的应用&#34;&gt;&#xA;  PHP 中的 GMP 扩展是什么，以及它在处理大整数和加密方面的应用。&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#php-%e4%b8%ad%e7%9a%84-gmp-%e6%89%a9%e5%b1%95%e6%98%af%e4%bb%80%e4%b9%88%e4%bb%a5%e5%8f%8a%e5%ae%83%e5%9c%a8%e5%a4%84%e7%90%86%e5%a4%a7%e6%95%b4%e6%95%b0%e5%92%8c%e5%8a%a0%e5%af%86%e6%96%b9%e9%9d%a2%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，GMP（GNU Multiple Precision）扩展是一个用于处理大整数的数学扩展。它允许 PHP 处理超过常规整数范围的大整数，包括负数和大于 64 位整数的数值。GMP 扩展使用了更高效的算法来处理大整数运算，比 PHP 内置的整数类型更快、更稳定。&lt;/p&gt;&#xA;&lt;p&gt;GMP 扩展的主要特点和功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数运算：GMP 扩展可以进行大整数的加减乘除运算、取模、幂运算等操作，支持任意位数的整数运算。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数比较：GMP 扩展可以比较两个大整数的大小，判断它们是否相等、大于、小于等关系。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;素数判断：GMP 扩展提供了素数判断函数，可以快速判断一个数是否为素数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数的位操作：GMP 扩展支持对大整数进行位操作，例如设置位、清除位、翻转位等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在处理大整数和加密方面的应用：&lt;/p&gt;&#xA;&lt;p&gt;GMP 扩展在处理大整数和加密方面具有重要的应用。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;加密算法：在密码学中，大整数是常用的数据类型，用于处理加密算法中的密钥和数据。GMP 扩展提供了高效的大整数运算，使得 PHP 能够支持各种加密算法，如 RSA、Diffie-Hellman、椭圆曲线加密等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;哈希函数：哈希函数通常产生一个大整数值，GMP 扩展可以处理这些大整数值，并进行位操作、模运算等操作，用于处理哈希值的验证和加密相关操作。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大数计算： 在一些特定的应用中，需要处理非常大的整数，如大数计算、组合数计算、RSA 密钥生成等。GMP 扩展提供了高效的大数计算功能，能够处理大整数运算的性能需求。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;使用 GMP 扩展的示例：&lt;/p&gt;&#xA;&lt;p&gt;以下是一个简单的示例，展示如何使用 GMP 扩展来进行大整数加法：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$largeNumber1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12345678901234567890&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$largeNumber2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9876543210987654321&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gmp_add&lt;/span&gt;($largeNumber1, $largeNumber2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gmp_strval&lt;/span&gt;($sum); &lt;span style=&#34;color:#75715e&#34;&gt;// 输出: 22222222112222222211&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的示例中，我们使用 GMP 扩展的 &lt;code&gt;gmp_add&lt;/code&gt; 函数对两个大整数进行相加，并使用 &lt;code&gt;gmp_strval&lt;/code&gt; 函数将结果转换为字符串并输出。这样就能够处理超过 PHP 内置整数范围的大整数运算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.5 常用函数</title>
      <link>https://example.com/wiki/docs/php/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/functions/</guid>
      <description>&lt;h1 id=&#34;常用函数&#34;&gt;&#xA;  常用函数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符串处理&#34;&gt;&#xA;  字符串处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;strlen() - 返回字符串的长度。&lt;/li&gt;&#xA;&lt;li&gt;strpos() - 查找字符串中的子字符串并返回其第一次出现的位置。&lt;/li&gt;&#xA;&lt;li&gt;substr() - 返回字符串的一部分。&lt;/li&gt;&#xA;&lt;li&gt;strtolower() - 将字符串转换为小写。&lt;/li&gt;&#xA;&lt;li&gt;strtoupper() - 将字符串转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;str_replace() - 在字符串中替换指定的子字符串。&lt;/li&gt;&#xA;&lt;li&gt;trim() - 去除字符串两端的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;explode() - 将字符串拆分成数组，根据指定的分隔符。&lt;/li&gt;&#xA;&lt;li&gt;implode() - 将数组元素连接成字符串，使用指定的分隔符。&lt;/li&gt;&#xA;&lt;li&gt;ucfirst() - 将字符串的首字母转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;ucwords() - 将字符串中每个单词的首字母转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;strcmp() - 比较两个字符串。&lt;/li&gt;&#xA;&lt;li&gt;strstr() - 查找字符串中的子字符串并返回其后的部分。&lt;/li&gt;&#xA;&lt;li&gt;strrev() - 反转字符串。&lt;/li&gt;&#xA;&lt;li&gt;htmlspecialchars() - 将特殊字符转换为HTML实体。&lt;/li&gt;&#xA;&lt;li&gt;preg_match() - 使用正则表达式进行字符串匹配。&lt;/li&gt;&#xA;&lt;li&gt;rtrim() - 去除字符串右侧的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;ltrim() - 去除字符串左侧的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;mb_strlen() - 返回多字节字符串的长度。&lt;/li&gt;&#xA;&lt;li&gt;mb_substr() - 返回多字节字符串的一部分。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;数组处理&#34;&gt;&#xA;  数组处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;count() - 返回数组中元素的数量。&lt;/li&gt;&#xA;&lt;li&gt;array_push() - 将一个或多个元素添加到数组末尾。&lt;/li&gt;&#xA;&lt;li&gt;array_pop() - 删除并返回数组的最后一个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_shift() - 删除并返回数组的第一个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_unshift() - 在数组开头添加一个或多个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_merge() - 合并一个或多个数组。&lt;/li&gt;&#xA;&lt;li&gt;array_slice() - 返回数组的一部分。&lt;/li&gt;&#xA;&lt;li&gt;array_reverse() - 反转数组。&lt;/li&gt;&#xA;&lt;li&gt;in_array() - 检查数组中是否存在某个值。&lt;/li&gt;&#xA;&lt;li&gt;array_keys() - 返回数组中的所有键名。&lt;/li&gt;&#xA;&lt;li&gt;array_values() - 返回数组中所有的值。&lt;/li&gt;&#xA;&lt;li&gt;array_search() - 在数组中搜索给定的值，并返回对应的键名。&lt;/li&gt;&#xA;&lt;li&gt;array_unique() - 移除数组中的重复值。&lt;/li&gt;&#xA;&lt;li&gt;array_filter() - 根据回调函数的条件过滤数组元素。&lt;/li&gt;&#xA;&lt;li&gt;array_map() - 对数组的每个元素应用回调函数。&lt;/li&gt;&#xA;&lt;li&gt;array_sum() - 返回数组中所有值的和。&lt;/li&gt;&#xA;&lt;li&gt;array_splice() - 删除或替换数组中的元素，并可以插入新元素。&lt;/li&gt;&#xA;&lt;li&gt;sort() - 对数组进行升序排序。&lt;/li&gt;&#xA;&lt;li&gt;rsort() - 对数组进行降序排序。&lt;/li&gt;&#xA;&lt;li&gt;array_rand() - 从数组中随机返回一个或多个键名。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;其他&#34;&gt;&#xA;  其他&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b6%e4%bb%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date() - 格式化日期和时间。&lt;/li&gt;&#xA;&lt;li&gt;time() - 返回当前的Unix时间戳。&lt;/li&gt;&#xA;&lt;li&gt;strtotime() - 将日期时间字符串解析为Unix时间戳。&lt;/li&gt;&#xA;&lt;li&gt;include() - 在当前文件中包含并执行指定文件。&lt;/li&gt;&#xA;&lt;li&gt;require() - 在当前文件中包含并执行指定文件，但出错时会产生致命错误。&lt;/li&gt;&#xA;&lt;li&gt;fopen() - 打开文件或URL。&lt;/li&gt;&#xA;&lt;li&gt;fclose() - 关闭文件句柄。&lt;/li&gt;&#xA;&lt;li&gt;file_get_contents() - 将整个文件读入一个字符串。&lt;/li&gt;&#xA;&lt;li&gt;file_put_contents() - 将一个字符串写入文件。&lt;/li&gt;&#xA;&lt;li&gt;json_encode() - 将 PHP 值转换为 JSON 格式的字符串。&lt;/li&gt;&#xA;&lt;li&gt;json_decode() - 将 JSON 格式的字符串转换为 PHP 值。&lt;/li&gt;&#xA;&lt;li&gt;is_numeric() - 检测变量是否为数值或数值字符串。&lt;/li&gt;&#xA;&lt;li&gt;empty() - 检测变量是否为空。&lt;/li&gt;&#xA;&lt;li&gt;isset() - 检测变量是否已声明并且不为NULL。&lt;/li&gt;&#xA;&lt;li&gt;filter_var() - 过滤变量，比如验证邮箱、URL等。&lt;/li&gt;&#xA;&lt;li&gt;intval() - 将变量转换为整数类型。&lt;/li&gt;&#xA;&lt;li&gt;floatval() - 将变量转换为浮点数类型。&lt;/li&gt;&#xA;&lt;li&gt;is_array() - 检测变量是否为数组类型。&lt;/li&gt;&#xA;&lt;li&gt;is_string() - 检测变量是否为字符串类型。&lt;/li&gt;&#xA;&lt;li&gt;exit() 或 die() - 终止脚本的执行并输出一条消息。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
