<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统设计 on wiki</title>
    <link>https://example.com/wiki/docs/system-design/</link>
    <description>Recent content in 系统设计 on wiki</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/wiki/docs/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>系统设计基础</title>
      <link>https://example.com/wiki/docs/system-design/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/overview/</guid>
      <description>&lt;h1 id=&#34;系统设计基础&#34;&gt;&#xA;  系统设计基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一性能&#34;&gt;&#xA;  一、性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;性能指标&#34;&gt;&#xA;  性能指标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e6%8c%87%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-响应时间&#34;&gt;&#xA;  1. 响应时间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%93%8d%e5%ba%94%e6%97%b6%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指某个请求从发出到接收到响应消耗的时间。&lt;/p&gt;&#xA;&lt;p&gt;在对响应时间进行测试时，通常采用重复请求的方式，然后计算平均响应时间。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-吞吐量&#34;&gt;&#xA;  2. 吞吐量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指系统在单位时间内可以处理的请求数量，通常使用每秒的请求数来衡量。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-并发用户数&#34;&gt;&#xA;  3. 并发用户数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%b9%b6%e5%8f%91%e7%94%a8%e6%88%b7%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指系统能同时处理的并发用户请求数量。&lt;/p&gt;&#xA;&lt;p&gt;在没有并发存在的系统中，请求被顺序执行，此时响应时间为吞吐量的倒数。例如系统支持的吞吐量为 100 req/s，那么平均响应时间应该为 0.01s。&lt;/p&gt;&#xA;&lt;p&gt;目前的大型系统都支持多线程来处理并发请求，多线程能够提高吞吐量以及缩短响应时间，主要有两个原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多 CPU&lt;/li&gt;&#xA;&lt;li&gt;IO 等待时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;使用 IO 多路复用等方式，系统在等待一个 IO 操作完成的这段时间内不需要被阻塞，可以去处理其它请求。通过将这个等待时间利用起来，使得 CPU 利用率大大提高。&lt;/p&gt;&#xA;&lt;p&gt;并发用户数不是越高越好，因为如果并发用户数太高，系统来不及处理这么多的请求，会使得过多的请求需要等待，那么响应时间就会大大提高。&lt;/p&gt;&#xA;&lt;h3 id=&#34;性能优化&#34;&gt;&#xA;  性能优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-集群&#34;&gt;&#xA;  1. 集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;将多台服务器组成集群，使用负载均衡将请求转发到集群中，避免单一服务器的负载压力过大导致性能降低。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-缓存&#34;&gt;&#xA;  2. 缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;缓存能够提高性能的原因如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存数据通常位于内存等介质中，这种介质对于读操作特别快；&lt;/li&gt;&#xA;&lt;li&gt;缓存数据可以位于靠近用户的地理位置上；&lt;/li&gt;&#xA;&lt;li&gt;可以将计算结果进行缓存，从而避免重复计算。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-异步&#34;&gt;&#xA;  3. 异步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%bc%82%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;某些流程可以将操作转换为消息，将消息发送到消息队列之后立即返回，之后这个操作会被异步处理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二伸缩性&#34;&gt;&#xA;  二、伸缩性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%bc%b8%e7%bc%a9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;指不断向集群中添加服务器来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。&lt;/p&gt;&#xA;&lt;h3 id=&#34;伸缩性与性能&#34;&gt;&#xA;  伸缩性与性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%b8%e7%bc%a9%e6%80%a7%e4%b8%8e%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果系统存在性能问题，那么单个用户的请求总是很慢的；&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式</title>
      <link>https://example.com/wiki/docs/system-design/distributed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/distributed/</guid>
      <description>&lt;h1 id=&#34;分布式&#34;&gt;&#xA;  分布式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一分布式锁&#34;&gt;&#xA;  一、分布式锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在单机场景下，可以使用语言的内置锁来实现进程同步。但是在分布式场景下，需要同步的进程可能位于不同的节点上，那么就需要使用分布式锁。&lt;/p&gt;&#xA;&lt;p&gt;阻塞锁通常使用互斥量来实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥量为 0 表示有其它进程在使用锁，此时处于锁定状态；&lt;/li&gt;&#xA;&lt;li&gt;互斥量为 1 表示未锁定状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;1 和 0 可以用一个整型值表示，也可以用某个数据是否存在表示。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库的唯一索引&#34;&gt;&#xA;  数据库的唯一索引&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%94%af%e4%b8%80%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;获得锁时向表中插入一条记录，释放锁时删除这条记录。唯一索引可以保证该记录只被插入一次，那么就可以用这个记录是否存在来判断是否处于锁定状态。&lt;/p&gt;&#xA;&lt;p&gt;存在以下几个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁没有失效时间，解锁失败的话其它进程无法再获得该锁；&lt;/li&gt;&#xA;&lt;li&gt;只能是非阻塞锁，插入失败直接就报错了，无法重试；&lt;/li&gt;&#xA;&lt;li&gt;不可重入，已经获得锁的进程也必须重新获取锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redis-的-setnx-指令&#34;&gt;&#xA;  Redis 的 SETNX 指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84-setnx-%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 SETNX（set if not exist）指令插入一个键值对，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True。&lt;/p&gt;&#xA;&lt;p&gt;SETNX 指令和数据库的唯一索引类似，保证了只存在一个 Key 的键值对，那么可以用一个 Key 的键值对是否存在来判断是否存于锁定状态。&lt;/p&gt;&#xA;&lt;p&gt;EXPIRE 指令可以为一个键值对设置一个过期时间，从而避免了数据库唯一索引实现方式中释放锁失败的问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;redis-的-redlock-算法&#34;&gt;&#xA;  Redis 的 RedLock 算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84-redlock-%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时仍然可用。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尝试从 N 个互相独立 Redis 实例获取锁；&lt;/li&gt;&#xA;&lt;li&gt;计算获取锁消耗的时间，只有时间小于锁的过期时间，并且从大多数（N / 2 + 1）实例上获取了锁，才认为获取锁成功；&lt;/li&gt;&#xA;&lt;li&gt;如果获取锁失败，就到每个实例上释放锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;zookeeper-的有序节点&#34;&gt;&#xA;  Zookeeper 的有序节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zookeeper-%e7%9a%84%e6%9c%89%e5%ba%8f%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-zookeeper-抽象模型&#34;&gt;&#xA;  1. Zookeeper 抽象模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-zookeeper-%e6%8a%bd%e8%b1%a1%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Zookeeper 提供了一种树形结构的命名空间，/app1/p_1 节点的父节点为 /app1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>集群</title>
      <link>https://example.com/wiki/docs/system-design/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/cluster/</guid>
      <description>&lt;h1 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一负载均衡&#34;&gt;&#xA;  一、负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;集群中的应用服务器（节点）通常被设计成无状态，用户可以请求任何一个节点。&lt;/p&gt;&#xA;&lt;p&gt;负载均衡器会根据集群中每个节点的负载情况，将用户请求转发到合适的节点上。&lt;/p&gt;&#xA;&lt;p&gt;负载均衡器可以用来实现高可用以及伸缩性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高可用：当某个节点故障时，负载均衡器会将用户请求转发到另外的节点上，从而保证所有服务持续可用；&lt;/li&gt;&#xA;&lt;li&gt;伸缩性：根据系统整体负载情况，可以很容易地添加或移除节点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;负载均衡器运行过程包含两个部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;根据负载均衡算法得到转发的节点；&lt;/li&gt;&#xA;&lt;li&gt;进行转发。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;负载均衡算法&#34;&gt;&#xA;  负载均衡算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-轮询round-robin&#34;&gt;&#xA;  1. 轮询（Round Robin）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%bd%ae%e8%af%a2round-robin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;轮询算法把每个请求轮流发送到每个服务器上。&lt;/p&gt;&#xA;&lt;p&gt;下图中，一共有 6 个客户端产生了 6 个请求，这 6 个请求按 (1, 2, 3, 4, 5, 6) 的顺序发送。(1, 3, 5) 的请求会被发送到服务器 1，(2, 4, 6) 的请求会被发送到服务器 2。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/2ef2060efbb149509f4f4d20a163b1dd.png&#34; width=&#34;500px&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;该算法比较适合每个服务器的性能差不多的场景，如果有性能存在差异的情况下，那么性能较差的服务器可能无法承担过大的负载（下图的 Server 2）。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/6d6a3b1e64a5497e8bcabec27cec144a.png&#34; width=&#34;500px&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h4 id=&#34;2-加权轮询weighted-round-robbin&#34;&gt;&#xA;  2. 加权轮询（Weighted Round Robbin）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%8a%a0%e6%9d%83%e8%bd%ae%e8%af%a2weighted-round-robbin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;加权轮询是在轮询的基础上，根据服务器的性能差异，为服务器赋予一定的权值，性能高的服务器分配更高的权值。&lt;/p&gt;&#xA;&lt;p&gt;例如下图中，服务器 1 被赋予的权值为 5，服务器 2 被赋予的权值为 1，那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 1，(6) 请求会被发送到服务器 2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>攻击技术</title>
      <link>https://example.com/wiki/docs/system-design/attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/attack/</guid>
      <description>&lt;h1 id=&#34;攻击技术&#34;&gt;&#xA;  攻击技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%bb%e5%87%bb%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一跨站脚本攻击&#34;&gt;&#xA;  一、跨站脚本攻击&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%b7%a8%e7%ab%99%e8%84%9a%e6%9c%ac%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概念&#34;&gt;&#xA;  概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。&lt;/p&gt;&#xA;&lt;h3 id=&#34;攻击原理&#34;&gt;&#xA;  攻击原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%bb%e5%87%bb%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;例如有一个论坛网站，攻击者可以在上面发布以下内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//domain.com/?c=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后该内容可能会被渲染成以下形式：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//domain.com/?c=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一个用户浏览了含有这个内容的页面将会跳转到 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;危害&#34;&gt;&#xA;  危害&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%b1%e5%ae%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;窃取用户的 Cookie&lt;/li&gt;&#xA;&lt;li&gt;伪造虚假的输入表单骗取个人信息&lt;/li&gt;&#xA;&lt;li&gt;显示伪造的文章或者图片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;防范手段&#34;&gt;&#xA;  防范手段&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%b2%e8%8c%83%e6%89%8b%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-设置-cookie-为-httponly&#34;&gt;&#xA;  1. 设置 Cookie 为 HttpOnly&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%ae%be%e7%bd%ae-cookie-%e4%b8%ba-httponly&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;设置了 HttpOnly 的 Cookie 可以防止 JavaScript 脚本调用，就无法通过 document.cookie 获取用户 Cookie 信息。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-过滤特殊字符&#34;&gt;&#xA;  2. 过滤特殊字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e8%bf%87%e6%bb%a4%e7%89%b9%e6%ae%8a%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;例如将 &lt;code&gt;&amp;lt;&lt;/code&gt; 转义为 &lt;code&gt;&amp;amp;lt;&lt;/code&gt;，将 &lt;code&gt;&amp;gt;&lt;/code&gt; 转义为 &lt;code&gt;&amp;amp;gt;&lt;/code&gt;，从而避免 HTML 和 Jascript 代码的运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>缓存</title>
      <link>https://example.com/wiki/docs/system-design/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/cache/</guid>
      <description>&lt;h1 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一缓存特征&#34;&gt;&#xA;  一、缓存特征&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%bc%93%e5%ad%98%e7%89%b9%e5%be%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命中率&#34;&gt;&#xA;  命中率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%b8%ad%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当某个请求能够通过访问缓存而得到响应时，称为缓存命中。&lt;/p&gt;&#xA;&lt;p&gt;缓存命中率越高，缓存的利用率也就越高。&lt;/p&gt;&#xA;&lt;h3 id=&#34;最大空间&#34;&gt;&#xA;  最大空间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%a4%a7%e7%a9%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;缓存通常位于内存中，内存的空间通常比磁盘空间小的多，因此缓存的最大空间不可能非常大。&lt;/p&gt;&#xA;&lt;p&gt;当缓存存放的数据量超过最大空间时，就需要淘汰部分数据来存放新到达的数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;淘汰策略&#34;&gt;&#xA;  淘汰策略&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%98%e6%b1%b0%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;FIFO（First In First Out）：先进先出策略，在实时性的场景下，需要经常访问最新的数据，那么就可以使用 FIFO，使得最先进入的数据（最晚的数据）被淘汰。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LRU（Least Recently Used）：最近最久未使用策略，优先淘汰最久未使用的数据，也就是上次被访问时间距离现在最久的数据。该策略可以保证内存中的数据都是热点数据，也就是经常被访问的数据，从而保证缓存命中率。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LFU（Least Frequently Used）：最不经常使用策略，优先淘汰一段时间内使用次数最少的数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;二缓存位置&#34;&gt;&#xA;  二、缓存位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e7%bc%93%e5%ad%98%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;浏览器&#34;&gt;&#xA;  浏览器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8f%e8%a7%88%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当 HTTP 响应允许进行缓存时，浏览器会将 HTML、CSS、JavaScript、图片等静态资源进行缓存。&lt;/p&gt;&#xA;&lt;h3 id=&#34;isp&#34;&gt;&#xA;  ISP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#isp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网络服务提供商（ISP）是网络访问的第一跳，通过将数据缓存在 ISP 中能够大大提高用户的访问速度。&lt;/p&gt;&#xA;&lt;h3 id=&#34;反向代理&#34;&gt;&#xA;  反向代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;反向代理位于服务器之前，请求与响应都需要经过反向代理。通过将数据缓存在反向代理，在用户请求反向代理时就可以直接使用缓存进行响应。&lt;/p&gt;&#xA;&lt;h3 id=&#34;本地缓存&#34;&gt;&#xA;  本地缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 Guava Cache 将数据缓存在服务器本地内存中，服务器代码可以直接读取本地内存中的缓存，速度非常快。&lt;/p&gt;&#xA;&lt;h3 id=&#34;分布式缓存&#34;&gt;&#xA;  分布式缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 Redis、Memcache 等分布式缓存将数据缓存在分布式缓存系统中。&lt;/p&gt;&#xA;&lt;p&gt;相对于本地缓存来说，分布式缓存单独部署，可以根据需求分配硬件资源。不仅如此，服务器集群都可以访问分布式缓存，而本地缓存需要在服务器集群之间进行同步，实现难度和性能开销上都非常大。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库缓存&#34;&gt;&#xA;  数据库缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MySQL 等数据库管理系统具有自己的查询缓存机制来提高查询效率。&lt;/p&gt;&#xA;&lt;h3 id=&#34;java-内部的缓存&#34;&gt;&#xA;  Java 内部的缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java-%e5%86%85%e9%83%a8%e7%9a%84%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Java 为了优化空间，提高字符串、基本数据类型包装类的创建效率，设计了字符串常量池及 Byte、Short、Character、Integer、Long、Boolean 这六种包装类缓冲池。&lt;/p&gt;</description>
    </item>
    <item>
      <title>消息队列</title>
      <link>https://example.com/wiki/docs/system-design/queue-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/queue-message/</guid>
      <description>&lt;h1 id=&#34;消息队列&#34;&gt;&#xA;  消息队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一消息模型&#34;&gt;&#xA;  一、消息模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%b6%88%e6%81%af%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;点对点&#34;&gt;&#xA;  点对点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%82%b9%e5%af%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/8f02f3afa0b34b5ebce86a57650b4c39.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;发布订阅&#34;&gt;&#xA;  发布/订阅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e5%b8%83%e8%ae%a2%e9%98%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/cef43edec72c48b39e19f6f045f182c9.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;发布与订阅模式和观察者模式有以下不同：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。&lt;/li&gt;&#xA;&lt;li&gt;观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/df2c5ca8cc1a4388bfc5cb61ddbc9aa6.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;二使用场景&#34;&gt;&#xA;  二、使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;异步处理&#34;&gt;&#xA;  异步处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。&lt;/p&gt;&#xA;&lt;p&gt;例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。&lt;/p&gt;&#xA;&lt;p&gt;只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。&lt;/p&gt;&#xA;&lt;h3 id=&#34;流量削锋&#34;&gt;&#xA;  流量削锋&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e5%89%8a%e9%94%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。&lt;/p&gt;&#xA;&lt;p&gt;可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;应用解耦&#34;&gt;&#xA;  应用解耦&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e8%a7%a3%e8%80%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。&lt;/p&gt;&#xA;&lt;p&gt;通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三可靠性&#34;&gt;&#xA;  三、可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;发送端的可靠性&#34;&gt;&#xA;  发送端的可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e9%80%81%e7%ab%af%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;发送端完成操作后一定能将消息成功发送到消息队列中。&lt;/p&gt;&#xA;&lt;p&gt;实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。&lt;/p&gt;&#xA;&lt;h3 id=&#34;接收端的可靠性&#34;&gt;&#xA;  接收端的可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e6%94%b6%e7%ab%af%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;接收端能够从消息队列成功消费一次消息。&lt;/p&gt;&#xA;&lt;p&gt;两种实现方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。&lt;/li&gt;&#xA;&lt;li&gt;保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考资料&#34;&gt;&#xA;  参考资料&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;http://developers-club.com/posts/270339/&#34;&gt;Observer vs Pub-Sub&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://blog.csdn.net/lizhitao/article/details/47723105&#34;&gt;消息队列中点对点与发布订阅区别&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
