<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on wiki</title>
    <link>https://example.com/wiki/docs/mysql/</link>
    <description>Recent content in MySQL on wiki</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/wiki/docs/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>总览</title>
      <link>https://example.com/wiki/docs/mysql/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/overview/</guid>
      <description>&lt;h1 id=&#34;总览&#34;&gt;&#xA;  总览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一索引&#34;&gt;&#xA;  一、索引&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;b-tree-原理&#34;&gt;&#xA;  B+ Tree 原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#b-tree-%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-数据结构&#34;&gt;&#xA;  1. 数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。&lt;/p&gt;&#xA;&lt;p&gt;B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。&lt;/p&gt;&#xA;&lt;p&gt;在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key&lt;sub&gt;i&lt;/sub&gt; 和 key&lt;sub&gt;i+1&lt;/sub&gt;，且不为 null，则该指针指向节点的所有 key 大于等于 key&lt;sub&gt;i&lt;/sub&gt; 且小于等于 key&lt;sub&gt;i+1&lt;/sub&gt;。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/287e5abbdd8c474b898f1daa89841335.png&#34; width=&#34;350px&#34;&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h4 id=&#34;2-操作&#34;&gt;&#xA;  2. 操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。&lt;/p&gt;&#xA;&lt;p&gt;插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行分裂、合并、旋转等操作来维护平衡性。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-与红黑树的比较&#34;&gt;&#xA;  3. 与红黑树的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%b8%8e%e7%ba%a2%e9%bb%91%e6%a0%91%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。&lt;/p&gt;&#xA;&lt;p&gt;（一）B+ 树有更低的树高&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 语法</title>
      <link>https://example.com/wiki/docs/mysql/sql-grammar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/sql-grammar/</guid>
      <description>&lt;h1 id=&#34;sql-语法&#34;&gt;&#xA;  SQL 语法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sql-%e8%af%ad%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一基础&#34;&gt;&#xA;  一、基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。&lt;/p&gt;&#xA;&lt;p&gt;主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。&lt;/p&gt;&#xA;&lt;p&gt;SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。&lt;/p&gt;&#xA;&lt;p&gt;SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。&lt;/p&gt;&#xA;&lt;p&gt;SQL 支持以下三种注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--- 注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable; &lt;span style=&#34;color:#75715e&#34;&gt;-- 注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 注释1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   注释2 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据库创建与使用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USE test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二创建表&#34;&gt;&#xA;  二、创建表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%9b%e5%bb%ba%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; mytable (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- int 类型，不为空，自增&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  id INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- int 类型，不可为空，默认值为 1，不为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col1 INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 变长字符串类型，最长为 45 个字符，可以为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col2 VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 日期类型，可为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col3 DATE &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 设置主键为 id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;三修改表&#34;&gt;&#xA;  三、修改表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e4%bf%ae%e6%94%b9%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;添加列&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库系统原理</title>
      <link>https://example.com/wiki/docs/mysql/dbs-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/dbs-theory/</guid>
      <description>&lt;h1 id=&#34;数据库系统原理&#34;&gt;&#xA;  数据库系统原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b3%bb%e7%bb%9f%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一事务&#34;&gt;&#xA;  一、事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概念&#34;&gt;&#xA;  概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/297b96c829e64e3890556afc232d9212.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;acid&#34;&gt;&#xA;  ACID&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#acid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-原子性atomicity&#34;&gt;&#xA;  1. 原子性（Atomicity）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%8e%9f%e5%ad%90%e6%80%a7atomicity&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。&lt;/p&gt;&#xA;&lt;p&gt;回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-一致性consistency&#34;&gt;&#xA;  2. 一致性（Consistency）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%80%e8%87%b4%e6%80%a7consistency&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-隔离性isolation&#34;&gt;&#xA;  3. 隔离性（Isolation）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e9%9a%94%e7%a6%bb%e6%80%a7isolation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一个事务所做的修改在最终提交以前，对其它事务是不可见的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;4-持久性durability&#34;&gt;&#xA;  4. 持久性（Durability）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%8c%81%e4%b9%85%e6%80%a7durability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。&lt;/p&gt;&#xA;&lt;p&gt;系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有满足一致性，事务的执行结果才是正确的。&lt;/li&gt;&#xA;&lt;li&gt;在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。&lt;/li&gt;&#xA;&lt;li&gt;在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。&lt;/li&gt;&#xA;&lt;li&gt;事务满足持久化是为了能应对系统崩溃的情况。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/2fdb78a2e5154ea0b3c42fe94461f3a8.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;autocommit&#34;&gt;&#xA;  AUTOCOMMIT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#autocommit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MySQL 默认采用自动提交模式。也就是说，如果不显式使用&lt;code&gt;START TRANSACTION&lt;/code&gt;语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二并发一致性问题&#34;&gt;&#xA;  二、并发一致性问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%b9%b6%e5%8f%91%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;丢失修改&#34;&gt;&#xA;  丢失修改&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%a2%e5%a4%b1%e4%bf%ae%e6%94%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T&lt;sub&gt;1&lt;/sub&gt; 和 T&lt;sub&gt;2&lt;/sub&gt; 两个事务都对一个数据进行修改，T&lt;sub&gt;1&lt;/sub&gt; 先修改并提交生效，T&lt;sub&gt;2&lt;/sub&gt; 随后修改，T&lt;sub&gt;2&lt;/sub&gt; 的修改覆盖了 T&lt;sub&gt;1&lt;/sub&gt; 的修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见问题（一）</title>
      <link>https://example.com/wiki/docs/mysql/faq1.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/faq1.md/</guid>
      <description>&lt;h1 id=&#34;mysql-常见问题一&#34;&gt;&#xA;  MySQL 常见问题（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-出现-unknown-column-错误是在哪个阶段&#34;&gt;&#xA;  1. 出现 Unknown column 错误是在哪个阶段&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%87%ba%e7%8e%b0-unknown-column-%e9%94%99%e8%af%af%e6%98%af%e5%9c%a8%e5%93%aa%e4%b8%aa%e9%98%b6%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MySQL 会在分析器中判断语句是否正确，表是否存在，列是否存在等，如果没有问题再提交给优化器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-为什么对权限的检查不在优化器之前做&#34;&gt;&#xA;  2. 为什么对权限的检查不在优化器之前做&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%af%b9%e6%9d%83%e9%99%90%e7%9a%84%e6%a3%80%e6%9f%a5%e4%b8%8d%e5%9c%a8%e4%bc%98%e5%8c%96%e5%99%a8%e4%b9%8b%e5%89%8d%e5%81%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;有些时候，SQL 语句要操作的表不只是 SQL 字面上那些。比如有个触发器，得在执行器阶段（过程中）才能确定，优化器阶段前是无能为力的。&lt;/p&gt;&#xA;&lt;p&gt;客户端连接时，如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限，之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。一个用户成功建立连接后，即使用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-一个查询语句的执行流程是什么&#34;&gt;&#xA;  3. 一个查询语句的执行流程是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%b8%80%e4%b8%aa%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5%e7%9a%84%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221227/f40749c05e9145a794a006504693da5d.png&#34; width=&#34;600&#34; /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;4-bin-logredo-logundo-log-的区别&#34;&gt;&#xA;  4. bin log、redo log、undo log 的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-bin-logredo-logundo-log-%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。&lt;/p&gt;&#xA;&lt;p&gt;redo log 是物理日志，记录的是「在某个数据页上做了什么修改」；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如「给 ID=2 这一行的 c 字段加 1」。&lt;/p&gt;&#xA;&lt;p&gt;redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。&lt;/p&gt;&#xA;&lt;p&gt;InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下图所示&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
