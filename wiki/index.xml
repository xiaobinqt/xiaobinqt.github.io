<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简介 on wiki</title>
    <link>https://example.com/wiki/</link>
    <description>Recent content in 简介 on wiki</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/wiki/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 版本区别</title>
      <link>https://example.com/wiki/docs/php/1.1-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.1-versions/</guid>
      <description>&lt;h1 id=&#34;15-版本区别&#34;&gt;&#xA;  1.5 版本区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e7%89%88%e6%9c%ac%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;151-汇总&#34;&gt;&#xA;  1.5.1 汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;PHP5.1：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;autoload&lt;/li&gt;&#xA;&lt;li&gt;PDO&lt;/li&gt;&#xA;&lt;li&gt;MySQLi&lt;/li&gt;&#xA;&lt;li&gt;类型约束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.2：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JSON 支持&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.3：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命名空间&lt;/li&gt;&#xA;&lt;li&gt;匿名函数&lt;/li&gt;&#xA;&lt;li&gt;闭包&lt;/li&gt;&#xA;&lt;li&gt;新增魔术方法&lt;code&gt;__callStatic()&lt;/code&gt;和&lt;code&gt;__invoke()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;新增魔术变量&lt;code&gt;__DIR__&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;动态调用静态方法&lt;/li&gt;&#xA;&lt;li&gt;延迟静态绑定&lt;/li&gt;&#xA;&lt;li&gt;Heredoc和 Nowdoc&lt;/li&gt;&#xA;&lt;li&gt;类外使用const定义常量&lt;/li&gt;&#xA;&lt;li&gt;三元运算符&lt;/li&gt;&#xA;&lt;li&gt;Phar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.4：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Short Open Tag&lt;/li&gt;&#xA;&lt;li&gt;数组简写&lt;/li&gt;&#xA;&lt;li&gt;Traits,&lt;/li&gt;&#xA;&lt;li&gt;内置 Web 服务器&lt;/li&gt;&#xA;&lt;li&gt;动态访问静态方法&lt;/li&gt;&#xA;&lt;li&gt;实例化时访问类成员&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.5：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;yield&lt;/li&gt;&#xA;&lt;li&gt;list用于foreach&lt;/li&gt;&#xA;&lt;li&gt;细节修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP5.6:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常量增强&lt;/li&gt;&#xA;&lt;li&gt;命名空间增强&lt;/li&gt;&#xA;&lt;li&gt;可变函数参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.0:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标量类型声明&lt;/li&gt;&#xA;&lt;li&gt;返回值类型声明&lt;/li&gt;&#xA;&lt;li&gt;defined定义常量数组&lt;/li&gt;&#xA;&lt;li&gt;匿名类&lt;/li&gt;&#xA;&lt;li&gt;null合并运算符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.1：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可为空类型&lt;/li&gt;&#xA;&lt;li&gt;void类型&lt;/li&gt;&#xA;&lt;li&gt;多异常捕获&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.2：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新的对象object&lt;/li&gt;&#xA;&lt;li&gt;允许重写抽象方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP7.3：语法层面没有很大的改变&lt;/p&gt;&#xA;&lt;p&gt;PHP7.4：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类型属性&lt;/li&gt;&#xA;&lt;li&gt;箭头函数&lt;/li&gt;&#xA;&lt;li&gt;Null合并运算符支持方法&lt;/li&gt;&#xA;&lt;li&gt;Opcache 预加载&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PHP8.0:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JIT即时编译&lt;/li&gt;&#xA;&lt;li&gt;命名参数&lt;/li&gt;&#xA;&lt;li&gt;注解&lt;/li&gt;&#xA;&lt;li&gt;联合类型&lt;/li&gt;&#xA;&lt;li&gt;Match表达式&lt;/li&gt;&#xA;&lt;li&gt;Nullsafe 运算符&lt;/li&gt;&#xA;&lt;li&gt;构造器属性提升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;152-php51&#34;&gt;&#xA;  1.5.2 PHP5.1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-php51&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;__autoload魔术方法&#34;&gt;&#xA;  __autoload()魔术方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#__autoload%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这是一个自动加载函数，在PHP5中，当我们实例化一个未定义的类时，就会触发此函数。可以通过定义这个函数来启用&#xA;  &lt;a href=&#34;https://link.segmentfault.com/?enc=K6gPDJqLNKcNB5cibcWVfw%3D%3D.0mC%2F5XlatumrZLgT1aW9WO6OFTQm1A4eDR8r9pVPKT56kJfXLv1dstDiE2EGi5bUB4iFfW7CcpZN9YeIVuAAvA%3D%3D&#34;&gt;类的自动加载&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.1 基础知识</title>
      <link>https://example.com/wiki/docs/python/1.basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/python/1.basic/</guid>
      <description>&lt;h1 id=&#34;1-基础知识&#34;&gt;&#xA;  1. 基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符串&#34;&gt;&#xA;  字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;定义字符串可以使用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;单引号 &lt;code&gt;&#39; &#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;双引号 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;三重引号 &lt;code&gt;&#39;&#39;&#39; &#39;&#39;&#39;&lt;/code&gt;或 &lt;code&gt;&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;hello world&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;hello world&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要在字符串中插入变量的值时，可以使用 f-strings，f-strings 需要 Python3.6 以上版本&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;567&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x 的值是 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, y 的值是 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;y&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(ret)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;常用方法&#34;&gt;&#xA;  常用方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;成员运算&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# x in s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# x not in s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123x56&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123x56&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;连接运算&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# s + t  s 和 t 拼接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# s * t 把 s 重复 t 次&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;def&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;切片操作&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;操作&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;s[i]&lt;/td&gt;&#xA;          &lt;td&gt;s 的第 i 项，起始为 0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;s[i:j]&lt;/td&gt;&#xA;          &lt;td&gt;s 从 i 到 j 的切片&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;s[i:j:k]&lt;/td&gt;&#xA;          &lt;td&gt;s 从 i 到 j 步长为 k 的切片&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;s[-1]&lt;/td&gt;&#xA;          &lt;td&gt;s 最后一个字符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;区间是左闭右开。&lt;/p&gt;</description>
    </item>
    <item>
      <title>html</title>
      <link>https://example.com/wiki/docs/frontend/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/frontend/html/</guid>
      <description>&lt;h1 id=&#34;html&#34;&gt;&#xA;  html&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文本格式化标签&#34;&gt;&#xA;  文本格式化标签&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%9c%ac%e6%a0%bc%e5%bc%8f%e5%8c%96%e6%a0%87%e7%ad%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;加粗 strong / b&lt;/li&gt;&#xA;&lt;li&gt;倾斜 em / i&lt;/li&gt;&#xA;&lt;li&gt;下划线 ins / u&lt;/li&gt;&#xA;&lt;li&gt;删除线 del / s&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;图片&#34;&gt;&#xA;  图片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;alt: 图片无法显示时显示的文字&lt;/li&gt;&#xA;&lt;li&gt;title： 鼠标悬浮时显示的文字&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;浏览器缩放图片，默认是等比例缩放。&lt;/p&gt;&#xA;&lt;h2 id=&#34;音频&#34;&gt;&#xA;  音频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9f%b3%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;src 必须&lt;/li&gt;&#xA;&lt;li&gt;controls 显示音频控制面板。在 html5 中，如果属姓名和属性值是一个单词，可以简写成一个单词。&lt;/li&gt;&#xA;&lt;li&gt;loop 循环播放&lt;/li&gt;&#xA;&lt;li&gt;autoplay 自动播放，浏览器一般会禁用自动播放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;视频&#34;&gt;&#xA;  视频&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%86%e9%a2%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;src 必须&lt;/li&gt;&#xA;&lt;li&gt;controls 显示音频控制面板。在 html5 中，如果属姓名和属性值是一个单词，可以简写成一个单词。&lt;/li&gt;&#xA;&lt;li&gt;loop 循环播放&lt;/li&gt;&#xA;&lt;li&gt;muted 静音播放&lt;/li&gt;&#xA;&lt;li&gt;autoplay 自动播放，浏览器支持视频在静音状态下自动播放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;常用标签&#34;&gt;&#xA;  常用标签&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e6%a0%87%e7%ad%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;input&#34;&gt;&#xA;  input&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#input&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;浏览器对类型和后缀都会同时过滤，限制只能选 PNG 图片。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;input type=&amp;#34;file&amp;#34; accept=&amp;#34;image/png,.png&amp;#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>计算机基础书籍推荐</title>
      <link>https://example.com/wiki/docs/favorite/cs-learn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/favorite/cs-learn/</guid>
      <description>&lt;h1 id=&#34;计算机基础书籍推荐&#34;&gt;&#xA;  计算机基础书籍推荐&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80%e4%b9%a6%e7%b1%8d%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在自学过程中，最容易踩坑的地方就是不看自己当前水平，盲目跟风买那些豆瓣高分的大而全的计算机黑皮系列的书，然后学几天，就放弃了。&lt;/p&gt;&#xA;&lt;p&gt;这些大而全的计算机黑皮书当然很经典，但是它们并不适合新人入门学习，因为这类书籍的内容都充满大量的专业术语，我们在看到陌生又难以理解的词汇时，就会感觉很吃力，脑子看着就会很累，就会驱使你做简单和快乐的事情，比如睡觉、刷短视频、玩游戏。&lt;/p&gt;&#xA;&lt;p&gt;所以，&lt;strong&gt;学习一门学科的时候，要从最基础的书开始学起，接着搭配视频快速入门，然后再渐渐步入到这些大而全的计算机黑皮书&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;关键的问题来了，计算机基础有哪些入门的基础书和视频呢？&lt;/p&gt;&#xA;&lt;h2 id=&#34;一数据结构与算法&#34;&gt;&#xA;  一、数据结构与算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;数据结构与算法是非常非常非常重要的，想要冲大厂如果这方面不过关可能连笔试都过不去，更别谈面试的手撕算法了。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;算法：&lt;/strong&gt; 动态规划、回溯算法、查找算法、搜索算法、贪心算法、分治算法、位运算、双指针、排序、模拟、数学、……&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据结构：&lt;/strong&gt; 数组、栈、队列、字符串、链表、树、图、堆、哈希表、……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据结构学习&#34;&gt;&#xA;  数据结构学习&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%ad%a6%e4%b9%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;首先推荐 &#xA;  &lt;a href=&#34;https://book.douban.com/subject/6424904/&#34;&gt;&lt;strong&gt;《大话数据结构》&lt;/strong&gt;&lt;/a&gt; 这本入门级别的书，因为书里的内容都是大白话，而且还图文并茂，读起来还是很顺畅的。&lt;/p&gt;&#xA;&lt;p&gt;然后视频推荐 &#xA;  &lt;a href=&#34;https://www.bilibili.com/video/BV1H4411N7oD&#34;&gt;&lt;strong&gt;《浙江大学的数据结构》&lt;/strong&gt;&lt;/a&gt;&#xA;课程，在 B 站就能搜索到，课程是老师带大家用 C 语言来实现各种常见的数据结构。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/6ffb2db5a9354496b7badccf7edfa0a1.png&#34; width=500 /&gt; &lt;/div&gt;&#xA;&lt;p&gt;现在大多数高级语言都会有容器，就是把一些常见的数据结构封装成了容器，使用起来比较方便，但是不利于理解底层的数据结构是怎么变换和操作的，所以这门课还是很有意义的。&lt;/p&gt;&#xA;&lt;p&gt;如果想要实战的话，可以去 LeetCode 官方出品的免费教程 Leetbook，网站很细心的按照各个知识点循序渐进地罗列了出来。讲解知识 + 实战演练，学习起来会比看书效率高。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/42fac3a5565d444abf72adaf8ade19f3.png&#34; width=600 /&gt; &lt;/div&gt;&#xA;&lt;h3 id=&#34;算法学习&#34;&gt;&#xA;  算法学习&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95%e5%ad%a6%e4%b9%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;算法刷题可从以下三个渠道。&lt;/p&gt;&#xA;&lt;p&gt;第一个，&#xA;  &lt;a href=&#34;https://www.nowcoder.com/ta/coding-interviews&#34;&gt;剑指offer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/9305d5e85f404a028a24c4f26a509166.png&#34; width=600 /&gt; &lt;/div&gt;&#xA;&lt;p&gt;第二个，&#xA;  &lt;a href=&#34;https://leetcode.cn/problemset/algorithms/&#34;&gt;力扣&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/e029f9b1f09f4358aa67919404f94a60.png&#34; width=600 /&gt; &lt;/div&gt;&#xA;&lt;p&gt;第三个，近期&#xA;  &lt;a href=&#34;https://www.nowcoder.com/activity/oj&#34;&gt;面试中常考题&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/0e3acd698d3e4a5ab2e72591d241dc41.png&#34; width=600 /&gt; &lt;/div&gt;&#xA;&lt;p&gt;《剑指 offer》作为大经典，是一定要刷两遍以上的，很多题都是面试时的原题，里面包含了很多笔试常用的思想方法，反复看，反复研。&lt;/p&gt;&#xA;&lt;p&gt;leetcode 由于题目十分之多，刷完是不太可能的。可以把 leetcode 作为弱项的专项练习。leetcode 右侧有标签分类，如下图：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230107/adbfce4aa3c34f5eb206a239bfb1a6e0.png&#34; width= /&gt; &lt;/div&gt;&#xA;&lt;p&gt;另外在巩固完弱项的情况下，建议将 leetcode 前 300 题刷熟练，国内大厂面试出的代码题 80% 都是这个范围内的。&lt;/p&gt;&#xA;&lt;p&gt;另外，labuladong 总结的&#xA;  &lt;a href=&#34;https://labuladong.github.io/algo/&#34;&gt;算法小抄&lt;/a&gt; 对算法的理解很有帮助。&lt;/p&gt;&#xA;&lt;p&gt;公司常考题有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统设计基础</title>
      <link>https://example.com/wiki/docs/system-design/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/overview/</guid>
      <description>&lt;h1 id=&#34;系统设计基础&#34;&gt;&#xA;  系统设计基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一性能&#34;&gt;&#xA;  一、性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;性能指标&#34;&gt;&#xA;  性能指标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e6%8c%87%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-响应时间&#34;&gt;&#xA;  1. 响应时间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%93%8d%e5%ba%94%e6%97%b6%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指某个请求从发出到接收到响应消耗的时间。&lt;/p&gt;&#xA;&lt;p&gt;在对响应时间进行测试时，通常采用重复请求的方式，然后计算平均响应时间。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-吞吐量&#34;&gt;&#xA;  2. 吞吐量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%90%9e%e5%90%90%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指系统在单位时间内可以处理的请求数量，通常使用每秒的请求数来衡量。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-并发用户数&#34;&gt;&#xA;  3. 并发用户数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%b9%b6%e5%8f%91%e7%94%a8%e6%88%b7%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指系统能同时处理的并发用户请求数量。&lt;/p&gt;&#xA;&lt;p&gt;在没有并发存在的系统中，请求被顺序执行，此时响应时间为吞吐量的倒数。例如系统支持的吞吐量为 100 req/s，那么平均响应时间应该为 0.01s。&lt;/p&gt;&#xA;&lt;p&gt;目前的大型系统都支持多线程来处理并发请求，多线程能够提高吞吐量以及缩短响应时间，主要有两个原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多 CPU&lt;/li&gt;&#xA;&lt;li&gt;IO 等待时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;使用 IO 多路复用等方式，系统在等待一个 IO 操作完成的这段时间内不需要被阻塞，可以去处理其它请求。通过将这个等待时间利用起来，使得 CPU 利用率大大提高。&lt;/p&gt;&#xA;&lt;p&gt;并发用户数不是越高越好，因为如果并发用户数太高，系统来不及处理这么多的请求，会使得过多的请求需要等待，那么响应时间就会大大提高。&lt;/p&gt;&#xA;&lt;h3 id=&#34;性能优化&#34;&gt;&#xA;  性能优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-集群&#34;&gt;&#xA;  1. 集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;将多台服务器组成集群，使用负载均衡将请求转发到集群中，避免单一服务器的负载压力过大导致性能降低。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-缓存&#34;&gt;&#xA;  2. 缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;缓存能够提高性能的原因如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存数据通常位于内存等介质中，这种介质对于读操作特别快；&lt;/li&gt;&#xA;&lt;li&gt;缓存数据可以位于靠近用户的地理位置上；&lt;/li&gt;&#xA;&lt;li&gt;可以将计算结果进行缓存，从而避免重复计算。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-异步&#34;&gt;&#xA;  3. 异步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%bc%82%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;某些流程可以将操作转换为消息，将消息发送到消息队列之后立即返回，之后这个操作会被异步处理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二伸缩性&#34;&gt;&#xA;  二、伸缩性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%bc%b8%e7%bc%a9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;指不断向集群中添加服务器来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。&lt;/p&gt;&#xA;&lt;h3 id=&#34;伸缩性与性能&#34;&gt;&#xA;  伸缩性与性能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%b8%e7%bc%a9%e6%80%a7%e4%b8%8e%e6%80%a7%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果系统存在性能问题，那么单个用户的请求总是很慢的；&lt;/p&gt;</description>
    </item>
    <item>
      <title>杂项</title>
      <link>https://example.com/wiki/docs/golang/1.sundry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/golang/1.sundry/</guid>
      <description>&lt;h1 id=&#34;杂项&#34;&gt;&#xA;  杂项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%82%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;开发工具&#34;&gt;&#xA;  开发工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://juejin.cn/post/6844903949137346573&#34;&gt;如何灵活地进行 Go 版本管理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>正则表达式</title>
      <link>https://example.com/wiki/docs/coding-practice/regex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/regex/</guid>
      <description>&lt;h1 id=&#34;正则表达式&#34;&gt;&#xA;  正则表达式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一概述&#34;&gt;&#xA;  一、概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正则表达式用于文本内容的查找和替换。&lt;/p&gt;&#xA;&lt;p&gt;正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://regexr.com/&#34;&gt;正则表达式在线工具&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二匹配单个字符&#34;&gt;&#xA;  二、匹配单个字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%8c%b9%e9%85%8d%e5%8d%95%e4%b8%aa%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;.&lt;/strong&gt;   可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;.&lt;/strong&gt;   是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 &lt;code&gt;.&lt;/code&gt; ，那么要用 \ 进行转义，即在 &lt;code&gt;.&lt;/code&gt; 前面加上 \ 。&lt;/p&gt;&#xA;&lt;p&gt;正则表达式一般是区分大小写的，但也有些实现不区分。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C.C2018&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;匹配结果&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;My name is   &lt;strong&gt;CyC2018&lt;/strong&gt;  .&lt;/p&gt;&#xA;&lt;h2 id=&#34;三匹配一组字符&#34;&gt;&#xA;  三、匹配一组字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%8c%b9%e9%85%8d%e4%b8%80%e7%bb%84%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;[ ]&lt;/strong&gt;   定义一个字符集合；&lt;/p&gt;&#xA;&lt;p&gt;0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt;   只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;^&lt;/strong&gt;   在 [ ] 中是取非操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;匹配以 abc 为开头，并且最后一个字母不为数字的字符串：&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;abc[^0-9]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;匹配结果&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;abcd&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;abc1&lt;/li&gt;&#xA;&lt;li&gt;abc2&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;四使用元字符&#34;&gt;&#xA;  四、使用元字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e4%bd%bf%e7%94%a8%e5%85%83%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;匹配空白字符&#34;&gt;&#xA;  匹配空白字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%b9%e9%85%8d%e7%a9%ba%e7%99%bd%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;元字符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[\b]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;回退（删除）一个字符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;\f&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;换页符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;\n&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;换行符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;\r&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;回车符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;\t&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;制表符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;\v&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;垂直制表符&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;\r\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \n。&lt;/p&gt;</description>
    </item>
    <item>
      <title>总览</title>
      <link>https://example.com/wiki/docs/mysql/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/overview/</guid>
      <description>&lt;h1 id=&#34;总览&#34;&gt;&#xA;  总览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一索引&#34;&gt;&#xA;  一、索引&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;b-tree-原理&#34;&gt;&#xA;  B+ Tree 原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#b-tree-%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-数据结构&#34;&gt;&#xA;  1. 数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。&lt;/p&gt;&#xA;&lt;p&gt;B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。&lt;/p&gt;&#xA;&lt;p&gt;在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key&lt;sub&gt;i&lt;/sub&gt; 和 key&lt;sub&gt;i+1&lt;/sub&gt;，且不为 null，则该指针指向节点的所有 key 大于等于 key&lt;sub&gt;i&lt;/sub&gt; 且小于等于 key&lt;sub&gt;i+1&lt;/sub&gt;。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/287e5abbdd8c474b898f1daa89841335.png&#34; width=&#34;350px&#34;&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h4 id=&#34;2-操作&#34;&gt;&#xA;  2. 操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。&lt;/p&gt;&#xA;&lt;p&gt;插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行分裂、合并、旋转等操作来维护平衡性。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-与红黑树的比较&#34;&gt;&#xA;  3. 与红黑树的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%b8%8e%e7%ba%a2%e9%bb%91%e6%a0%91%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。&lt;/p&gt;&#xA;&lt;p&gt;（一）B+ 树有更低的树高&lt;/p&gt;</description>
    </item>
    <item>
      <title>总览</title>
      <link>https://example.com/wiki/docs/redis/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/redis/overview/</guid>
      <description>&lt;h1 id=&#34;总览&#34;&gt;&#xA;  总览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一概述&#34;&gt;&#xA;  一、概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。&lt;/p&gt;&#xA;&lt;p&gt;键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。&lt;/p&gt;&#xA;&lt;p&gt;Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二数据类型&#34;&gt;&#xA;  二、数据类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;数据类型&lt;/th&gt;&#xA;          &lt;th&gt;可以存储的值&lt;/th&gt;&#xA;          &lt;th&gt;操作&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;STRING&lt;/td&gt;&#xA;          &lt;td&gt;字符串、整数或者浮点数&lt;/td&gt;&#xA;          &lt;td&gt;对整个字符串或者字符串的其中一部分执行操作 &lt;/br&gt; 对整数和浮点数执行自增或者自减操作&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LIST&lt;/td&gt;&#xA;          &lt;td&gt;列表&lt;/td&gt;&#xA;          &lt;td&gt;从两端压入或者弹出元素 &lt;/br&gt; 对单个或者多个元素进行修剪，&lt;/br&gt; 只保留一个范围内的元素&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SET&lt;/td&gt;&#xA;          &lt;td&gt;无序集合&lt;/td&gt;&#xA;          &lt;td&gt;添加、获取、移除单个元素&lt;/br&gt; 检查一个元素是否存在于集合中&lt;/br&gt; 计算交集、并集、差集&lt;/br&gt; 从集合里面随机获取元素&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HASH&lt;/td&gt;&#xA;          &lt;td&gt;包含键值对的无序散列表&lt;/td&gt;&#xA;          &lt;td&gt;添加、获取、移除单个键值对&lt;/br&gt; 获取所有键值对&lt;/br&gt; 检查某个键是否存在&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ZSET&lt;/td&gt;&#xA;          &lt;td&gt;有序集合&lt;/td&gt;&#xA;          &lt;td&gt;添加、获取、删除元素&lt;/br&gt; 根据分值范围或者成员来获取元素&lt;/br&gt; 计算一个键的排名&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/&#34;&gt;What Redis data structures look like&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;string&#34;&gt;&#xA;  STRING&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6019b2db-bc3e-4408-b6d8-96025f4481d6.png&#34; width=&#34;400&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; set hello world&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; get hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;world&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; del hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; get hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(nil)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;list&#34;&gt;&#xA;  LIST&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/fb327611-7e2b-4f2f-9f5b-38592d408f07.png&#34; width=&#34;400&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpush list-key item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpush list-key item2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; rpush list-key item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; lrange list-key 0 -1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;item2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3) &amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; lindex list-key 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;item2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; lpop list-key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; lrange list-key 0 -1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;item2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;set&#34;&gt;&#xA;  SET&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png&#34; width=&#34;400&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sadd set-key item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sadd set-key item2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sadd set-key item3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sadd set-key item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; smembers set-key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;item2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3) &amp;#34;item3&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sismember set-key item4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; sismember set-key item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; srem set-key item2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; srem set-key item2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; smembers set-key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;item&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;item3&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hash&#34;&gt;&#xA;  HASH&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hash&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7bd202a7-93d4-4f3a-a878-af68ae25539a.png&#34; width=&#34;400&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hset hash-key sub-key1 value1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hset hash-key sub-key2 value2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hset hash-key sub-key1 value1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hgetall hash-key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;sub-key1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;value1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3) &amp;#34;sub-key2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4) &amp;#34;value2&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hdel hash-key sub-key2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hdel hash-key sub-key2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hget hash-key sub-key1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;value1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; hgetall hash-key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;sub-key1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;value1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;zset&#34;&gt;&#xA;  ZSET&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zset&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1202b2d6-9469-4251-bd47-ca6034fb6116.png&#34; width=&#34;400&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zadd zset-key 728 member1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zadd zset-key 982 member0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zadd zset-key 982 member0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zrange zset-key 0 -1 withscores&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;member1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;728&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3) &amp;#34;member0&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4) &amp;#34;982&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zrangebyscore zset-key 0 800 withscores&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;member1&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;728&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zrem zset-key member1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zrem zset-key member1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(integer) 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; zrange zset-key 0 -1 withscores&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1) &amp;#34;member0&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2) &amp;#34;982&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;三数据结构&#34;&gt;&#xA;  三、数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;字典&#34;&gt;&#xA;  字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;dictht 是一个散列表结构，使用拉链法解决哈希冲突。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.2 常见问题（一）</title>
      <link>https://example.com/wiki/docs/php/1.2-faq1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.2-faq1/</guid>
      <description>&lt;h1 id=&#34;11-常见问题一&#34;&gt;&#xA;  1.1 常见问题（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;请解释-php-中的超全局变量是什么并列举其中几个例子&#34;&gt;&#xA;  请解释 PHP 中的超全局变量是什么，并列举其中几个例子&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b7%e8%a7%a3%e9%87%8a-php-%e4%b8%ad%e7%9a%84%e8%b6%85%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f%e6%98%af%e4%bb%80%e4%b9%88%e5%b9%b6%e5%88%97%e4%b8%be%e5%85%b6%e4%b8%ad%e5%87%a0%e4%b8%aa%e4%be%8b%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，超全局变量（Super Global Variables）是一类特殊的全局变量，它们在脚本的任何地方都可以访问，并且不受作用域的限制。这些变量是 PHP 预定义的，用于在脚本中存储和访问与服务器环境和用户请求相关的信息。&lt;/p&gt;&#xA;&lt;p&gt;超全局变量在 PHP 中以数组的形式存在，可以直接访问其中的元素，无需使用 &lt;code&gt;global&lt;/code&gt; 关键字。以下是几个 PHP 中常用的超全局变量及其作用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_GET&lt;/code&gt;：&lt;/strong&gt; 用于获取通过 URL 查询字符串传递的参数值。例如，如果 URL 为 &lt;code&gt;example.com/index.php?name=John&lt;/code&gt;，则可以使用 &lt;code&gt;$_GET[&#39;name&#39;]&lt;/code&gt; 来获取 &lt;code&gt;John&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_POST&lt;/code&gt;：&lt;/strong&gt; 用于获取通过 POST 方法提交的表单数据。例如，如果表单中有一个字段 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt;&lt;/code&gt;，则可以使用 &lt;code&gt;$_POST[&#39;username&#39;]&lt;/code&gt; 来获取用户提交的值。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_REQUEST&lt;/code&gt;：&lt;/strong&gt; 综合了 &lt;code&gt;$_GET&lt;/code&gt;、&lt;code&gt;$_POST&lt;/code&gt; 和 &lt;code&gt;$_COOKIE&lt;/code&gt; 的内容。可以用于获取所有通过 GET 或 POST 方法传递的参数值，以及 Cookie 中的数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$_SESSION&lt;/code&gt;：&lt;/strong&gt; 用于在 PHP 中启动会话，并存储会话中的数据。通过 &lt;code&gt;session_start()&lt;/code&gt; 启动会话后，可以使用 &lt;code&gt;$_SESSION&lt;/code&gt; 数组存储和访问会话数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://example.com/wiki/docs/coding-practice/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/docker/</guid>
      <description>&lt;h1 id=&#34;docker&#34;&gt;&#xA;  Docker&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一解决的问题&#34;&gt;&#xA;  一、解决的问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%a7%a3%e5%86%b3%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。&lt;/p&gt;&#xA;&lt;p&gt;Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/633c34ba52c841f590c368d47fcfa184.png&#34; width=&#34;400px&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;二与虚拟机的比较&#34;&gt;&#xA;  二、与虚拟机的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%b8%8e%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/93b1d812ba2146f892b26c1e0690e5ac.png&#34; width=&#34;500&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;启动速度&#34;&gt;&#xA;  启动速度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%af%e5%8a%a8%e9%80%9f%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；&lt;/p&gt;&#xA;&lt;p&gt;而启动 Docker 相当于启动宿主操作系统上的一个进程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;占用资源&#34;&gt;&#xA;  占用资源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%a0%e7%94%a8%e8%b5%84%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器只能开启几十个的虚拟机。&lt;/p&gt;&#xA;&lt;p&gt;而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三优势&#34;&gt;&#xA;  三、优势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;除了启动速度快以及占用资源少之外，Docker 具有以下优势：&lt;/p&gt;&#xA;&lt;h3 id=&#34;更容易迁移&#34;&gt;&#xA;  更容易迁移&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9b%b4%e5%ae%b9%e6%98%93%e8%bf%81%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;提供一致性的运行环境。已经打包好的应用可以在不同的机器上进行迁移，而不用担心环境变化导致无法运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;更容易维护&#34;&gt;&#xA;  更容易维护&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9b%b4%e5%ae%b9%e6%98%93%e7%bb%b4%e6%8a%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用分层技术和镜像，使得应用可以更容易复用重复的部分。复用程度越高，维护工作也越容易。&lt;/p&gt;&#xA;&lt;h3 id=&#34;更容易扩展&#34;&gt;&#xA;  更容易扩展&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9b%b4%e5%ae%b9%e6%98%93%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;可以使用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜像，通过扩展这些镜像可以非常容易得到我们想要的镜像。&lt;/p&gt;&#xA;&lt;h2 id=&#34;四使用场景&#34;&gt;&#xA;  四、使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;持续集成&#34;&gt;&#xA;  持续集成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;持续集成指的是频繁地将代码集成到主干上，这样能够更快地发现错误。&lt;/p&gt;&#xA;&lt;p&gt;Docker 具有轻量级以及隔离性的特点，在将代码集成到一个 Docker 中不会对其它 Docker 产生影响。&lt;/p&gt;&#xA;&lt;h3 id=&#34;提供可伸缩的云服务&#34;&gt;&#xA;  提供可伸缩的云服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%90%e4%be%9b%e5%8f%af%e4%bc%b8%e7%bc%a9%e7%9a%84%e4%ba%91%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;根据应用的负载情况，可以很容易地增加或者减少 Docker。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jquery</title>
      <link>https://example.com/wiki/docs/frontend/jq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/frontend/jq/</guid>
      <description>&lt;h1 id=&#34;jquery&#34;&gt;&#xA;  Jquery&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jquery&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;获取值&#34;&gt;&#xA;  获取值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%8e%b7%e5%8f%96%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;todo..&lt;/p&gt;&#xA;&lt;h2 id=&#34;base64-数据给前端使用&#34;&gt;&#xA;  base64 数据给前端使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#base64-%e6%95%b0%e6%8d%ae%e7%bb%99%e5%89%8d%e7%ab%af%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;后端可以用 base64 把数据传给前端，前端直接用，特别是常见的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图片&lt;/li&gt;&#xA;&lt;li&gt;小文件&lt;/li&gt;&#xA;&lt;li&gt;小段 JSON&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;比如&lt;strong&gt;后端 PHP&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3_region&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;us-east-2&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3_bucket&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;avator&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 转 JSON&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_encode&lt;/span&gt;($data, &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON_UNESCAPED_UNICODE&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 再 base64 编码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$base64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;base64_encode&lt;/span&gt;($json);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;input type=&amp;#34;hidden&amp;#34; id=&amp;#34;s3_config&amp;#34; value=&amp;#34;&amp;lt;?= $base64 ?&amp;gt;&amp;#34;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JS 前端解码回来：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;base64Str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#s3_config&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jsonStr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atob&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;base64Str&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;// base64 decode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;jsonStr&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 解析 JSON&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s3_region&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// us-east-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么用 base64？什么时候用？&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;用途&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;解释&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;避免 HTML 转义问题&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;里面即使有 &lt;code&gt;&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt; 都不会影响 HTML&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;保证内容完整安全&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;base64是纯字符串，不会破坏标签结构&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;小数据安全传递&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;一般几 KB 以内的数据可以这样做&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;注意事项-&#34;&gt;&#xA;  注意事项 ⚡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;大数据量不要 base64&lt;/strong&gt;：因为 base64 会比原数据大 &lt;strong&gt;33% 左右&lt;/strong&gt;，太大就浪费带宽。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;小段数据（JSON、短文本）非常合适&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;图片的话&lt;/strong&gt;，小图 base64 没问题，大图最好还是用 URL。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;页面加载时就执行&#34;&gt;&#xA;  页面加载时就执行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b5%e9%9d%a2%e5%8a%a0%e8%bd%bd%e6%97%b6%e5%b0%b1%e6%89%a7%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果想在 页面加载完成 时就用 &lt;strong&gt;jQuery&lt;/strong&gt; 自动执行某些代码。&#xA;最常见的方法就是用 &lt;code&gt;$(document).ready()&lt;/code&gt; 或 &lt;code&gt;$(function() {...})&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 语法</title>
      <link>https://example.com/wiki/docs/mysql/sql-grammar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/sql-grammar/</guid>
      <description>&lt;h1 id=&#34;sql-语法&#34;&gt;&#xA;  SQL 语法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sql-%e8%af%ad%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一基础&#34;&gt;&#xA;  一、基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。&lt;/p&gt;&#xA;&lt;p&gt;主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。&lt;/p&gt;&#xA;&lt;p&gt;SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。&lt;/p&gt;&#xA;&lt;p&gt;SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。&lt;/p&gt;&#xA;&lt;p&gt;SQL 支持以下三种注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--- 注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable; &lt;span style=&#34;color:#75715e&#34;&gt;-- 注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 注释1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   注释2 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据库创建与使用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USE test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二创建表&#34;&gt;&#xA;  二、创建表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%9b%e5%bb%ba%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; mytable (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- int 类型，不为空，自增&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  id INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- int 类型，不可为空，默认值为 1，不为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col1 INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 变长字符串类型，最长为 45 个字符，可以为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col2 VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 日期类型，可为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  col3 DATE &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;--- 设置主键为 id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;三修改表&#34;&gt;&#xA;  三、修改表&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e4%bf%ae%e6%94%b9%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;添加列&lt;/p&gt;</description>
    </item>
    <item>
      <title>STRING</title>
      <link>https://example.com/wiki/docs/redis/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/redis/string/</guid>
      <description>&lt;h1 id=&#34;string&#34;&gt;&#xA;  STRING&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>分布式</title>
      <link>https://example.com/wiki/docs/system-design/distributed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/distributed/</guid>
      <description>&lt;h1 id=&#34;分布式&#34;&gt;&#xA;  分布式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一分布式锁&#34;&gt;&#xA;  一、分布式锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在单机场景下，可以使用语言的内置锁来实现进程同步。但是在分布式场景下，需要同步的进程可能位于不同的节点上，那么就需要使用分布式锁。&lt;/p&gt;&#xA;&lt;p&gt;阻塞锁通常使用互斥量来实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥量为 0 表示有其它进程在使用锁，此时处于锁定状态；&lt;/li&gt;&#xA;&lt;li&gt;互斥量为 1 表示未锁定状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;1 和 0 可以用一个整型值表示，也可以用某个数据是否存在表示。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库的唯一索引&#34;&gt;&#xA;  数据库的唯一索引&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%94%af%e4%b8%80%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;获得锁时向表中插入一条记录，释放锁时删除这条记录。唯一索引可以保证该记录只被插入一次，那么就可以用这个记录是否存在来判断是否处于锁定状态。&lt;/p&gt;&#xA;&lt;p&gt;存在以下几个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁没有失效时间，解锁失败的话其它进程无法再获得该锁；&lt;/li&gt;&#xA;&lt;li&gt;只能是非阻塞锁，插入失败直接就报错了，无法重试；&lt;/li&gt;&#xA;&lt;li&gt;不可重入，已经获得锁的进程也必须重新获取锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;redis-的-setnx-指令&#34;&gt;&#xA;  Redis 的 SETNX 指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84-setnx-%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 SETNX（set if not exist）指令插入一个键值对，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True。&lt;/p&gt;&#xA;&lt;p&gt;SETNX 指令和数据库的唯一索引类似，保证了只存在一个 Key 的键值对，那么可以用一个 Key 的键值对是否存在来判断是否存于锁定状态。&lt;/p&gt;&#xA;&lt;p&gt;EXPIRE 指令可以为一个键值对设置一个过期时间，从而避免了数据库唯一索引实现方式中释放锁失败的问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;redis-的-redlock-算法&#34;&gt;&#xA;  Redis 的 RedLock 算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84-redlock-%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时仍然可用。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尝试从 N 个互相独立 Redis 实例获取锁；&lt;/li&gt;&#xA;&lt;li&gt;计算获取锁消耗的时间，只有时间小于锁的过期时间，并且从大多数（N / 2 + 1）实例上获取了锁，才认为获取锁成功；&lt;/li&gt;&#xA;&lt;li&gt;如果获取锁失败，就到每个实例上释放锁。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;zookeeper-的有序节点&#34;&gt;&#xA;  Zookeeper 的有序节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zookeeper-%e7%9a%84%e6%9c%89%e5%ba%8f%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-zookeeper-抽象模型&#34;&gt;&#xA;  1. Zookeeper 抽象模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-zookeeper-%e6%8a%bd%e8%b1%a1%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Zookeeper 提供了一种树形结构的命名空间，/app1/p_1 节点的父节点为 /app1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.3 常见问题（二）</title>
      <link>https://example.com/wiki/docs/php/1.3-faq2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.3-faq2/</guid>
      <description>&lt;h2 id=&#34;12-常见问题二&#34;&gt;&#xA;  1.2 常见问题（二）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%ba%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;请解释-php-中的黑魔法dark-magic是什么以及它与常规-php-编程的区别&#34;&gt;&#xA;  请解释 PHP 中的黑魔法（Dark Magic）是什么，以及它与常规 PHP 编程的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b7%e8%a7%a3%e9%87%8a-php-%e4%b8%ad%e7%9a%84%e9%bb%91%e9%ad%94%e6%b3%95dark-magic%e6%98%af%e4%bb%80%e4%b9%88%e4%bb%a5%e5%8f%8a%e5%ae%83%e4%b8%8e%e5%b8%b8%e8%a7%84-php-%e7%bc%96%e7%a8%8b%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，黑魔法通常指的是一些复杂、晦涩难懂或有风险的编码技巧。黑魔法与常规 PHP 编程的区别在于它们通常违反了良好的编码规范，难以理解和维护。&lt;/p&gt;&#xA;&lt;h2 id=&#34;php-中的-brotli-压缩算法是什么gzip-压缩的比较&#34;&gt;&#xA;  PHP 中的 Brotli 压缩算法是什么，gzip 压缩的比较&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#php-%e4%b8%ad%e7%9a%84-brotli-%e5%8e%8b%e7%bc%a9%e7%ae%97%e6%b3%95%e6%98%af%e4%bb%80%e4%b9%88gzip-%e5%8e%8b%e7%bc%a9%e7%9a%84%e6%af%94%e8%be%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Brotli 是一种新的压缩算法，用于压缩 HTTP 内容，可以显著减少传输数据的大小，从而提高网站的加载速度。与 gzip 相比，Brotli 压缩率更高，但相应的压缩和解压缩时间较长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://example.com/wiki/docs/coding-practice/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/git/</guid>
      <description>&lt;h1 id=&#34;git&#34;&gt;&#xA;  Git&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;集中式与分布式&#34;&gt;&#xA;  集中式与分布式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e4%b8%ad%e5%bc%8f%e4%b8%8e%e5%88%86%e5%b8%83%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Git 属于分布式版本控制系统，而 SVN 属于集中式。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/503d355bf115438cb00e0f49b6f35afd.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。&lt;/p&gt;&#xA;&lt;p&gt;集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。&lt;/p&gt;&#xA;&lt;p&gt;集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。&lt;/p&gt;&#xA;&lt;p&gt;分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;中心服务器&#34;&gt;&#xA;  中心服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e5%bf%83%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。&lt;/p&gt;&#xA;&lt;p&gt;Github 就是一个中心服务器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;工作流&#34;&gt;&#xA;  工作流&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bd%9c%e6%b5%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。&lt;/p&gt;&#xA;&lt;p&gt;Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 存储所有分支信息，使用一个 HEAD 指针指向当前分支。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/205cf11c4db24c89a4572bf616576fc0.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;git add files 把文件的修改添加到暂存区&lt;/li&gt;&#xA;&lt;li&gt;git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了&lt;/li&gt;&#xA;&lt;li&gt;git reset &amp;ndash; files 使用当前分支上的修改覆盖暂存区，用来撤销最后一次 git add files&lt;/li&gt;&#xA;&lt;li&gt;git checkout &amp;ndash; files 使用暂存区的修改覆盖工作目录，用来撤销本地修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/6e41d818677645a2917223c8cd41b839.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;git commit -a 直接把所有文件的修改添加到暂存区然后执行提交&lt;/li&gt;&#xA;&lt;li&gt;git checkout HEAD &amp;ndash; files 取出最后一次修改，可以用来进行回滚操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/5fe796bd5d37429b863ab97b4e65f7c5.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;分支实现&#34;&gt;&#xA;  分支实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%94%af%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。&lt;/p&gt;</description>
    </item>
    <item>
      <title>集群</title>
      <link>https://example.com/wiki/docs/system-design/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/cluster/</guid>
      <description>&lt;h1 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一负载均衡&#34;&gt;&#xA;  一、负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;集群中的应用服务器（节点）通常被设计成无状态，用户可以请求任何一个节点。&lt;/p&gt;&#xA;&lt;p&gt;负载均衡器会根据集群中每个节点的负载情况，将用户请求转发到合适的节点上。&lt;/p&gt;&#xA;&lt;p&gt;负载均衡器可以用来实现高可用以及伸缩性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高可用：当某个节点故障时，负载均衡器会将用户请求转发到另外的节点上，从而保证所有服务持续可用；&lt;/li&gt;&#xA;&lt;li&gt;伸缩性：根据系统整体负载情况，可以很容易地添加或移除节点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;负载均衡器运行过程包含两个部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;根据负载均衡算法得到转发的节点；&lt;/li&gt;&#xA;&lt;li&gt;进行转发。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;负载均衡算法&#34;&gt;&#xA;  负载均衡算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-轮询round-robin&#34;&gt;&#xA;  1. 轮询（Round Robin）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%bd%ae%e8%af%a2round-robin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;轮询算法把每个请求轮流发送到每个服务器上。&lt;/p&gt;&#xA;&lt;p&gt;下图中，一共有 6 个客户端产生了 6 个请求，这 6 个请求按 (1, 2, 3, 4, 5, 6) 的顺序发送。(1, 3, 5) 的请求会被发送到服务器 1，(2, 4, 6) 的请求会被发送到服务器 2。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/2ef2060efbb149509f4f4d20a163b1dd.png&#34; width=&#34;500px&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;该算法比较适合每个服务器的性能差不多的场景，如果有性能存在差异的情况下，那么性能较差的服务器可能无法承担过大的负载（下图的 Server 2）。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/6d6a3b1e64a5497e8bcabec27cec144a.png&#34; width=&#34;500px&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h4 id=&#34;2-加权轮询weighted-round-robbin&#34;&gt;&#xA;  2. 加权轮询（Weighted Round Robbin）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%8a%a0%e6%9d%83%e8%bd%ae%e8%af%a2weighted-round-robbin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;加权轮询是在轮询的基础上，根据服务器的性能差异，为服务器赋予一定的权值，性能高的服务器分配更高的权值。&lt;/p&gt;&#xA;&lt;p&gt;例如下图中，服务器 1 被赋予的权值为 5，服务器 2 被赋予的权值为 1，那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 1，(6) 请求会被发送到服务器 2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库系统原理</title>
      <link>https://example.com/wiki/docs/mysql/dbs-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/dbs-theory/</guid>
      <description>&lt;h1 id=&#34;数据库系统原理&#34;&gt;&#xA;  数据库系统原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b3%bb%e7%bb%9f%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一事务&#34;&gt;&#xA;  一、事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概念&#34;&gt;&#xA;  概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/297b96c829e64e3890556afc232d9212.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;acid&#34;&gt;&#xA;  ACID&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#acid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-原子性atomicity&#34;&gt;&#xA;  1. 原子性（Atomicity）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%8e%9f%e5%ad%90%e6%80%a7atomicity&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。&lt;/p&gt;&#xA;&lt;p&gt;回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-一致性consistency&#34;&gt;&#xA;  2. 一致性（Consistency）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%80%e8%87%b4%e6%80%a7consistency&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3-隔离性isolation&#34;&gt;&#xA;  3. 隔离性（Isolation）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e9%9a%94%e7%a6%bb%e6%80%a7isolation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一个事务所做的修改在最终提交以前，对其它事务是不可见的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;4-持久性durability&#34;&gt;&#xA;  4. 持久性（Durability）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%8c%81%e4%b9%85%e6%80%a7durability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。&lt;/p&gt;&#xA;&lt;p&gt;系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只有满足一致性，事务的执行结果才是正确的。&lt;/li&gt;&#xA;&lt;li&gt;在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。&lt;/li&gt;&#xA;&lt;li&gt;在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。&lt;/li&gt;&#xA;&lt;li&gt;事务满足持久化是为了能应对系统崩溃的情况。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/2fdb78a2e5154ea0b3c42fe94461f3a8.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;autocommit&#34;&gt;&#xA;  AUTOCOMMIT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#autocommit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MySQL 默认采用自动提交模式。也就是说，如果不显式使用&lt;code&gt;START TRANSACTION&lt;/code&gt;语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二并发一致性问题&#34;&gt;&#xA;  二、并发一致性问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%b9%b6%e5%8f%91%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;丢失修改&#34;&gt;&#xA;  丢失修改&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%a2%e5%a4%b1%e4%bf%ae%e6%94%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T&lt;sub&gt;1&lt;/sub&gt; 和 T&lt;sub&gt;2&lt;/sub&gt; 两个事务都对一个数据进行修改，T&lt;sub&gt;1&lt;/sub&gt; 先修改并提交生效，T&lt;sub&gt;2&lt;/sub&gt; 随后修改，T&lt;sub&gt;2&lt;/sub&gt; 的修改覆盖了 T&lt;sub&gt;1&lt;/sub&gt; 的修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.4 PHP 扩展</title>
      <link>https://example.com/wiki/docs/php/1.4-extend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.4-extend/</guid>
      <description>&lt;h1 id=&#34;14-php-扩展&#34;&gt;&#xA;  1.4 PHP 扩展&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-php-%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;如何使用-php-gd-库在服务器端生成图像&#34;&gt;&#xA;  如何使用 PHP GD 库在服务器端生成图像？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8-php-gd-%e5%ba%93%e5%9c%a8%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e7%94%9f%e6%88%90%e5%9b%be%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用 PHP GD 库在服务器端生成图像可以通过 GD 扩展来实现。GD 扩展提供了一组用于处理图像的函数，包括创建图像、绘制图形和添加文本等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;php-中的-gmp-扩展是什么以及它在处理大整数和加密方面的应用&#34;&gt;&#xA;  PHP 中的 GMP 扩展是什么，以及它在处理大整数和加密方面的应用。&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#php-%e4%b8%ad%e7%9a%84-gmp-%e6%89%a9%e5%b1%95%e6%98%af%e4%bb%80%e4%b9%88%e4%bb%a5%e5%8f%8a%e5%ae%83%e5%9c%a8%e5%a4%84%e7%90%86%e5%a4%a7%e6%95%b4%e6%95%b0%e5%92%8c%e5%8a%a0%e5%af%86%e6%96%b9%e9%9d%a2%e7%9a%84%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 PHP 中，GMP（GNU Multiple Precision）扩展是一个用于处理大整数的数学扩展。它允许 PHP 处理超过常规整数范围的大整数，包括负数和大于 64 位整数的数值。GMP 扩展使用了更高效的算法来处理大整数运算，比 PHP 内置的整数类型更快、更稳定。&lt;/p&gt;&#xA;&lt;p&gt;GMP 扩展的主要特点和功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数运算：GMP 扩展可以进行大整数的加减乘除运算、取模、幂运算等操作，支持任意位数的整数运算。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数比较：GMP 扩展可以比较两个大整数的大小，判断它们是否相等、大于、小于等关系。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;素数判断：GMP 扩展提供了素数判断函数，可以快速判断一个数是否为素数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大整数的位操作：GMP 扩展支持对大整数进行位操作，例如设置位、清除位、翻转位等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在处理大整数和加密方面的应用：&lt;/p&gt;&#xA;&lt;p&gt;GMP 扩展在处理大整数和加密方面具有重要的应用。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;加密算法：在密码学中，大整数是常用的数据类型，用于处理加密算法中的密钥和数据。GMP 扩展提供了高效的大整数运算，使得 PHP 能够支持各种加密算法，如 RSA、Diffie-Hellman、椭圆曲线加密等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;哈希函数：哈希函数通常产生一个大整数值，GMP 扩展可以处理这些大整数值，并进行位操作、模运算等操作，用于处理哈希值的验证和加密相关操作。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;大数计算： 在一些特定的应用中，需要处理非常大的整数，如大数计算、组合数计算、RSA 密钥生成等。GMP 扩展提供了高效的大数计算功能，能够处理大整数运算的性能需求。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;使用 GMP 扩展的示例：&lt;/p&gt;&#xA;&lt;p&gt;以下是一个简单的示例，展示如何使用 GMP 扩展来进行大整数加法：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$largeNumber1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12345678901234567890&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$largeNumber2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9876543210987654321&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gmp_add&lt;/span&gt;($largeNumber1, $largeNumber2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gmp_strval&lt;/span&gt;($sum); &lt;span style=&#34;color:#75715e&#34;&gt;// 输出: 22222222112222222211&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的示例中，我们使用 GMP 扩展的 &lt;code&gt;gmp_add&lt;/code&gt; 函数对两个大整数进行相加，并使用 &lt;code&gt;gmp_strval&lt;/code&gt; 函数将结果转换为字符串并输出。这样就能够处理超过 PHP 内置整数范围的大整数运算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见问题（一）</title>
      <link>https://example.com/wiki/docs/mysql/faq1.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/mysql/faq1.md/</guid>
      <description>&lt;h1 id=&#34;mysql-常见问题一&#34;&gt;&#xA;  MySQL 常见问题（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-出现-unknown-column-错误是在哪个阶段&#34;&gt;&#xA;  1. 出现 Unknown column 错误是在哪个阶段&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%87%ba%e7%8e%b0-unknown-column-%e9%94%99%e8%af%af%e6%98%af%e5%9c%a8%e5%93%aa%e4%b8%aa%e9%98%b6%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MySQL 会在分析器中判断语句是否正确，表是否存在，列是否存在等，如果没有问题再提交给优化器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-为什么对权限的检查不在优化器之前做&#34;&gt;&#xA;  2. 为什么对权限的检查不在优化器之前做&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%af%b9%e6%9d%83%e9%99%90%e7%9a%84%e6%a3%80%e6%9f%a5%e4%b8%8d%e5%9c%a8%e4%bc%98%e5%8c%96%e5%99%a8%e4%b9%8b%e5%89%8d%e5%81%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;有些时候，SQL 语句要操作的表不只是 SQL 字面上那些。比如有个触发器，得在执行器阶段（过程中）才能确定，优化器阶段前是无能为力的。&lt;/p&gt;&#xA;&lt;p&gt;客户端连接时，如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限，之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。一个用户成功建立连接后，即使用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-一个查询语句的执行流程是什么&#34;&gt;&#xA;  3. 一个查询语句的执行流程是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%b8%80%e4%b8%aa%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5%e7%9a%84%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221227/f40749c05e9145a794a006504693da5d.png&#34; width=&#34;600&#34; /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;4-bin-logredo-logundo-log-的区别&#34;&gt;&#xA;  4. bin log、redo log、undo log 的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-bin-logredo-logundo-log-%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。&lt;/p&gt;&#xA;&lt;p&gt;redo log 是物理日志，记录的是「在某个数据页上做了什么修改」；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如「给 ID=2 这一行的 c 字段加 1」。&lt;/p&gt;&#xA;&lt;p&gt;redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。&lt;/p&gt;&#xA;&lt;p&gt;InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下图所示&lt;/p&gt;</description>
    </item>
    <item>
      <title>代码可读性</title>
      <link>https://example.com/wiki/docs/coding-practice/code-readability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/code-readability/</guid>
      <description>&lt;h1 id=&#34;一可读性的重要性&#34;&gt;&#xA;  一、可读性的重要性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%8f%af%e8%af%bb%e6%80%a7%e7%9a%84%e9%87%8d%e8%a6%81%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;编程有很大一部分时间是在阅读代码，不仅要阅读自己的代码，而且要阅读别人的代码。因此，可读性良好的代码能够大大提高编程效率。&lt;/p&gt;&#xA;&lt;p&gt;可读性良好的代码往往会让代码架构更好，因为程序员更愿意去修改这部分代码，而且也更容易修改。&lt;/p&gt;&#xA;&lt;p&gt;只有在核心领域为了效率才可以放弃可读性，否则可读性是第一位。&lt;/p&gt;&#xA;&lt;h1 id=&#34;二用名字表达代码含义&#34;&gt;&#xA;  二、用名字表达代码含义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e7%94%a8%e5%90%8d%e5%ad%97%e8%a1%a8%e8%be%be%e4%bb%a3%e7%a0%81%e5%90%ab%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;一些比较有表达力的单词：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;单词&lt;/th&gt;&#xA;          &lt;th&gt;可替代单词&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;send&lt;/td&gt;&#xA;          &lt;td&gt;deliver、dispatch、announce、distribute、route&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;find&lt;/td&gt;&#xA;          &lt;td&gt;search、extract、locate、recover&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;start&lt;/td&gt;&#xA;          &lt;td&gt;launch、create、begin、open&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;make&lt;/td&gt;&#xA;          &lt;td&gt;create、set up、build、generate、compose、add、new&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;使用 i、j、k 作为循环迭代器的名字过于简单，user_i、member_i 这种名字会更有表达力。因为循环层次越多，代码越难理解，有表达力的迭代器名字可读性会更高。&lt;/p&gt;&#xA;&lt;p&gt;为名字添加形容词等信息能让名字更具有表达力，但是名字也会变长。名字长短的准则是：作用域越大，名字越长。因此只有在短作用域才能使用一些简单名字。&lt;/p&gt;&#xA;&lt;h1 id=&#34;三名字不能带来歧义&#34;&gt;&#xA;  三、名字不能带来歧义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%90%8d%e5%ad%97%e4%b8%8d%e8%83%bd%e5%b8%a6%e6%9d%a5%e6%ad%a7%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;起完名字要思考一下别人会对这个名字有何解读，会不会误解了原本想表达的含义。&lt;/p&gt;&#xA;&lt;p&gt;布尔相关的命名加上 is、can、should、has 等前缀。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用 min、max 表示数量范围；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用 first、last 表示访问空间的包含范围；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;begin、end 表示访问空间的排除范围，即 end 不包含尾部。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/83d724194b5742e7b395d15133261ad2.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h1 id=&#34;四良好的代码风格&#34;&gt;&#xA;  四、良好的代码风格&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e8%89%af%e5%a5%bd%e7%9a%84%e4%bb%a3%e7%a0%81%e9%a3%8e%e6%a0%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;适当的空行和缩进。&lt;/p&gt;&#xA;&lt;p&gt;排列整齐的注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;   &lt;span style=&#34;color:#75715e&#34;&gt;// 注释&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 11;  &lt;span style=&#34;color:#75715e&#34;&gt;// 注释&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 111; &lt;span style=&#34;color:#75715e&#34;&gt;// 注释&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;语句顺序不能随意，比如与 html 表单相关联的变量的赋值应该和表单在 html 中的顺序一致。&lt;/p&gt;&#xA;&lt;h1 id=&#34;五为何编写注释&#34;&gt;&#xA;  五、为何编写注释&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%94%e4%b8%ba%e4%bd%95%e7%bc%96%e5%86%99%e6%b3%a8%e9%87%8a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;阅读代码首先会注意到注释，如果注释没太大作用，那么就会浪费代码阅读的时间。那些能直接看出含义的代码不需要写注释，特别是不需要为每个方法都加上注释，比如那些简单的 getter 和 setter 方法，为这些方法写注释反而让代码可读性更差。&lt;/p&gt;</description>
    </item>
    <item>
      <title>攻击技术</title>
      <link>https://example.com/wiki/docs/system-design/attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/attack/</guid>
      <description>&lt;h1 id=&#34;攻击技术&#34;&gt;&#xA;  攻击技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%bb%e5%87%bb%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一跨站脚本攻击&#34;&gt;&#xA;  一、跨站脚本攻击&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%b7%a8%e7%ab%99%e8%84%9a%e6%9c%ac%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概念&#34;&gt;&#xA;  概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。&lt;/p&gt;&#xA;&lt;h3 id=&#34;攻击原理&#34;&gt;&#xA;  攻击原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%bb%e5%87%bb%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;例如有一个论坛网站，攻击者可以在上面发布以下内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//domain.com/?c=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后该内容可能会被渲染成以下形式：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//domain.com/?c=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一个用户浏览了含有这个内容的页面将会跳转到 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;危害&#34;&gt;&#xA;  危害&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%b1%e5%ae%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;窃取用户的 Cookie&lt;/li&gt;&#xA;&lt;li&gt;伪造虚假的输入表单骗取个人信息&lt;/li&gt;&#xA;&lt;li&gt;显示伪造的文章或者图片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;防范手段&#34;&gt;&#xA;  防范手段&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%b2%e8%8c%83%e6%89%8b%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-设置-cookie-为-httponly&#34;&gt;&#xA;  1. 设置 Cookie 为 HttpOnly&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%ae%be%e7%bd%ae-cookie-%e4%b8%ba-httponly&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;设置了 HttpOnly 的 Cookie 可以防止 JavaScript 脚本调用，就无法通过 document.cookie 获取用户 Cookie 信息。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-过滤特殊字符&#34;&gt;&#xA;  2. 过滤特殊字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e8%bf%87%e6%bb%a4%e7%89%b9%e6%ae%8a%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;例如将 &lt;code&gt;&amp;lt;&lt;/code&gt; 转义为 &lt;code&gt;&amp;amp;lt;&lt;/code&gt;，将 &lt;code&gt;&amp;gt;&lt;/code&gt; 转义为 &lt;code&gt;&amp;amp;gt;&lt;/code&gt;，从而避免 HTML 和 Jascript 代码的运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.5 常用函数</title>
      <link>https://example.com/wiki/docs/php/1.5-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.5-functions/</guid>
      <description>&lt;h1 id=&#34;常用函数&#34;&gt;&#xA;  常用函数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符串处理&#34;&gt;&#xA;  字符串处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;strlen() - 返回字符串的长度。&lt;/li&gt;&#xA;&lt;li&gt;strpos() - 查找字符串中的子字符串并返回其第一次出现的位置。&lt;/li&gt;&#xA;&lt;li&gt;substr() - 返回字符串的一部分。&lt;/li&gt;&#xA;&lt;li&gt;strtolower() - 将字符串转换为小写。&lt;/li&gt;&#xA;&lt;li&gt;strtoupper() - 将字符串转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;str_replace() - 在字符串中替换指定的子字符串。&lt;/li&gt;&#xA;&lt;li&gt;trim() - 去除字符串两端的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;explode() - 将字符串拆分成数组，根据指定的分隔符。&lt;/li&gt;&#xA;&lt;li&gt;implode() - 将数组元素连接成字符串，使用指定的分隔符。&lt;/li&gt;&#xA;&lt;li&gt;ucfirst() - 将字符串的首字母转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;ucwords() - 将字符串中每个单词的首字母转换为大写。&lt;/li&gt;&#xA;&lt;li&gt;strcmp() - 比较两个字符串。&lt;/li&gt;&#xA;&lt;li&gt;strstr() - 查找字符串中的子字符串并返回其后的部分。&lt;/li&gt;&#xA;&lt;li&gt;strrev() - 反转字符串。&lt;/li&gt;&#xA;&lt;li&gt;htmlspecialchars() - 将特殊字符转换为HTML实体。&lt;/li&gt;&#xA;&lt;li&gt;preg_match() - 使用正则表达式进行字符串匹配。&lt;/li&gt;&#xA;&lt;li&gt;rtrim() - 去除字符串右侧的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;ltrim() - 去除字符串左侧的空格或其他字符。&lt;/li&gt;&#xA;&lt;li&gt;mb_strlen() - 返回多字节字符串的长度。&lt;/li&gt;&#xA;&lt;li&gt;mb_substr() - 返回多字节字符串的一部分。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;数组处理&#34;&gt;&#xA;  数组处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e7%bb%84%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;count() - 返回数组中元素的数量。&lt;/li&gt;&#xA;&lt;li&gt;array_push() - 将一个或多个元素添加到数组末尾。&lt;/li&gt;&#xA;&lt;li&gt;array_pop() - 删除并返回数组的最后一个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_shift() - 删除并返回数组的第一个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_unshift() - 在数组开头添加一个或多个元素。&lt;/li&gt;&#xA;&lt;li&gt;array_merge() - 合并一个或多个数组。&lt;/li&gt;&#xA;&lt;li&gt;array_slice() - 返回数组的一部分。&lt;/li&gt;&#xA;&lt;li&gt;array_reverse() - 反转数组。&lt;/li&gt;&#xA;&lt;li&gt;in_array() - 检查数组中是否存在某个值。&lt;/li&gt;&#xA;&lt;li&gt;array_keys() - 返回数组中的所有键名。&lt;/li&gt;&#xA;&lt;li&gt;array_values() - 返回数组中所有的值。&lt;/li&gt;&#xA;&lt;li&gt;array_search() - 在数组中搜索给定的值，并返回对应的键名。&lt;/li&gt;&#xA;&lt;li&gt;array_unique() - 移除数组中的重复值。&lt;/li&gt;&#xA;&lt;li&gt;array_filter() - 根据回调函数的条件过滤数组元素。&lt;/li&gt;&#xA;&lt;li&gt;array_map() - 对数组的每个元素应用回调函数。&lt;/li&gt;&#xA;&lt;li&gt;array_sum() - 返回数组中所有值的和。&lt;/li&gt;&#xA;&lt;li&gt;array_splice() - 删除或替换数组中的元素，并可以插入新元素。&lt;/li&gt;&#xA;&lt;li&gt;sort() - 对数组进行升序排序。&lt;/li&gt;&#xA;&lt;li&gt;rsort() - 对数组进行降序排序。&lt;/li&gt;&#xA;&lt;li&gt;array_rand() - 从数组中随机返回一个或多个键名。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;其他&#34;&gt;&#xA;  其他&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b6%e4%bb%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date() - 格式化日期和时间。&lt;/li&gt;&#xA;&lt;li&gt;time() - 返回当前的Unix时间戳。&lt;/li&gt;&#xA;&lt;li&gt;strtotime() - 将日期时间字符串解析为Unix时间戳。&lt;/li&gt;&#xA;&lt;li&gt;include() - 在当前文件中包含并执行指定文件。&lt;/li&gt;&#xA;&lt;li&gt;require() - 在当前文件中包含并执行指定文件，但出错时会产生致命错误。&lt;/li&gt;&#xA;&lt;li&gt;fopen() - 打开文件或URL。&lt;/li&gt;&#xA;&lt;li&gt;fclose() - 关闭文件句柄。&lt;/li&gt;&#xA;&lt;li&gt;file_get_contents() - 将整个文件读入一个字符串。&lt;/li&gt;&#xA;&lt;li&gt;file_put_contents() - 将一个字符串写入文件。&lt;/li&gt;&#xA;&lt;li&gt;json_encode() - 将 PHP 值转换为 JSON 格式的字符串。&lt;/li&gt;&#xA;&lt;li&gt;json_decode() - 将 JSON 格式的字符串转换为 PHP 值。&lt;/li&gt;&#xA;&lt;li&gt;is_numeric() - 检测变量是否为数值或数值字符串。&lt;/li&gt;&#xA;&lt;li&gt;empty() - 检测变量是否为空。&lt;/li&gt;&#xA;&lt;li&gt;isset() - 检测变量是否已声明并且不为NULL。&lt;/li&gt;&#xA;&lt;li&gt;filter_var() - 过滤变量，比如验证邮箱、URL等。&lt;/li&gt;&#xA;&lt;li&gt;intval() - 将变量转换为整数类型。&lt;/li&gt;&#xA;&lt;li&gt;floatval() - 将变量转换为浮点数类型。&lt;/li&gt;&#xA;&lt;li&gt;is_array() - 检测变量是否为数组类型。&lt;/li&gt;&#xA;&lt;li&gt;is_string() - 检测变量是否为字符串类型。&lt;/li&gt;&#xA;&lt;li&gt;exit() 或 die() - 终止脚本的执行并输出一条消息。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Mac</title>
      <link>https://example.com/wiki/docs/coding-practice/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/mac/</guid>
      <description>&lt;h1 id=&#34;mac&#34;&gt;&#xA;  Mac&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://zhuanlan.zhihu.com/p/550022490&#34;&gt;iTerm2安装配置使用指南——保姆级&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://segmentfault.com/a/1190000039782096&#34;&gt;奇技淫巧玄妙无穷| M1 mac os(苹果/AppleSilicon)系统的基本操作和设置&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=-aTCbnc-0Dk&amp;amp;ab_channel=Mac%E4%BA%91%E8%AF%BE%E5%A0%82&#34;&gt;录屏后没声音？这应该是 Mac（苹果电脑） 内录声音最优雅的解决方案了&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://zhuanlan.zhihu.com/p/121026374&#34;&gt;苹果Mac录屏没声音怎么办？安装LoopBack解决Mac内录电脑系统声音&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.ifanr.com/app/1379030&#34;&gt;如何快速更换苹果 macOS 应用图标？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;常用软件&#34;&gt;&#xA;  常用软件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e8%bd%af%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sequel ace&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;常用功能&#34;&gt;&#xA;  常用功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;强制退出软件&#34;&gt;&#xA;  强制退出软件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%ba%e5%88%b6%e9%80%80%e5%87%ba%e8%bd%af%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;同时按下以下三个按键：Option（或 Alt）、Command、Esc (Escape)1。或者，从屏幕角落的苹果菜单  中选取“强制退出”。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://support.apple.com/zh-cn/102586&#34;&gt;如何在 Mac 上强制退出 App&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;查看隐藏文件&#34;&gt;&#xA;  查看隐藏文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e7%9c%8b%e9%9a%90%e8%97%8f%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;方法一：使用快捷键&lt;/p&gt;&#xA;&lt;p&gt;在 Finder 中按下：&lt;/p&gt;&#xA;&lt;p&gt;⌘ Command + ⇧ Shift + .（英文句号）&lt;/p&gt;&#xA;&lt;p&gt;再次按一次会隐藏它们，相当于开关。&lt;/p&gt;&#xA;&lt;p&gt;方法二：使用终端命令永久开启&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;打开「终端 Terminal」&lt;/li&gt;&#xA;&lt;li&gt;输入以下命令并回车：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;killall Finder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;若想关闭显示隐藏文件：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defaults write com.apple.finder AppleShowAllFiles -bool false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;killall Finder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;查看系统数据占用&#34;&gt;&#xA;  查看系统数据占用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e7%9c%8b%e7%b3%bb%e7%bb%9f%e6%95%b0%e6%8d%ae%e5%8d%a0%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最近遇到一个问题，突然磁盘满了，直接显示 no space left on device. 排查了半天也不知道是什么东西把磁盘写满了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>缓存</title>
      <link>https://example.com/wiki/docs/system-design/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/cache/</guid>
      <description>&lt;h1 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一缓存特征&#34;&gt;&#xA;  一、缓存特征&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e7%bc%93%e5%ad%98%e7%89%b9%e5%be%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命中率&#34;&gt;&#xA;  命中率&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%b8%ad%e7%8e%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当某个请求能够通过访问缓存而得到响应时，称为缓存命中。&lt;/p&gt;&#xA;&lt;p&gt;缓存命中率越高，缓存的利用率也就越高。&lt;/p&gt;&#xA;&lt;h3 id=&#34;最大空间&#34;&gt;&#xA;  最大空间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e5%a4%a7%e7%a9%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;缓存通常位于内存中，内存的空间通常比磁盘空间小的多，因此缓存的最大空间不可能非常大。&lt;/p&gt;&#xA;&lt;p&gt;当缓存存放的数据量超过最大空间时，就需要淘汰部分数据来存放新到达的数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;淘汰策略&#34;&gt;&#xA;  淘汰策略&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%98%e6%b1%b0%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;FIFO（First In First Out）：先进先出策略，在实时性的场景下，需要经常访问最新的数据，那么就可以使用 FIFO，使得最先进入的数据（最晚的数据）被淘汰。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LRU（Least Recently Used）：最近最久未使用策略，优先淘汰最久未使用的数据，也就是上次被访问时间距离现在最久的数据。该策略可以保证内存中的数据都是热点数据，也就是经常被访问的数据，从而保证缓存命中率。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LFU（Least Frequently Used）：最不经常使用策略，优先淘汰一段时间内使用次数最少的数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;二缓存位置&#34;&gt;&#xA;  二、缓存位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e7%bc%93%e5%ad%98%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;浏览器&#34;&gt;&#xA;  浏览器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8f%e8%a7%88%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当 HTTP 响应允许进行缓存时，浏览器会将 HTML、CSS、JavaScript、图片等静态资源进行缓存。&lt;/p&gt;&#xA;&lt;h3 id=&#34;isp&#34;&gt;&#xA;  ISP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#isp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网络服务提供商（ISP）是网络访问的第一跳，通过将数据缓存在 ISP 中能够大大提高用户的访问速度。&lt;/p&gt;&#xA;&lt;h3 id=&#34;反向代理&#34;&gt;&#xA;  反向代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;反向代理位于服务器之前，请求与响应都需要经过反向代理。通过将数据缓存在反向代理，在用户请求反向代理时就可以直接使用缓存进行响应。&lt;/p&gt;&#xA;&lt;h3 id=&#34;本地缓存&#34;&gt;&#xA;  本地缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 Guava Cache 将数据缓存在服务器本地内存中，服务器代码可以直接读取本地内存中的缓存，速度非常快。&lt;/p&gt;&#xA;&lt;h3 id=&#34;分布式缓存&#34;&gt;&#xA;  分布式缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 Redis、Memcache 等分布式缓存将数据缓存在分布式缓存系统中。&lt;/p&gt;&#xA;&lt;p&gt;相对于本地缓存来说，分布式缓存单独部署，可以根据需求分配硬件资源。不仅如此，服务器集群都可以访问分布式缓存，而本地缓存需要在服务器集群之间进行同步，实现难度和性能开销上都非常大。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库缓存&#34;&gt;&#xA;  数据库缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MySQL 等数据库管理系统具有自己的查询缓存机制来提高查询效率。&lt;/p&gt;&#xA;&lt;h3 id=&#34;java-内部的缓存&#34;&gt;&#xA;  Java 内部的缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java-%e5%86%85%e9%83%a8%e7%9a%84%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Java 为了优化空间，提高字符串、基本数据类型包装类的创建效率，设计了字符串常量池及 Byte、Short、Character、Integer、Long、Boolean 这六种包装类缓冲池。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.6 高级用法</title>
      <link>https://example.com/wiki/docs/php/1.6-advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/php/1.6-advanced/</guid>
      <description>&lt;h1 id=&#34;16-高级用法&#34;&gt;&#xA;  1.6 高级用法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-%e9%ab%98%e7%ba%a7%e7%94%a8%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;组合优于继承&#34;&gt;&#xA;  组合优于继承&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%84%e5%90%88%e4%bc%98%e4%ba%8e%e7%bb%a7%e6%89%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在一些情况下，组合（Composition）可以比继承更为灵活和可维护。你可以通过在类中包含另一个类（作为属性）来实现功能复用，而不是通过继承。这种方式减少了类之间的耦合度。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Method A&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Method B&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodA&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methodB&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;trait-方法冲突&#34;&gt;&#xA;  trait 方法冲突&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#trait-%e6%96%b9%e6%b3%95%e5%86%b2%e7%aa%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当多个 Trait 的方法名相同时，可以使用 insteadof 和 as 关键字来解决冲突。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jetbrains</title>
      <link>https://example.com/wiki/docs/coding-practice/jetbrains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/jetbrains/</guid>
      <description>&lt;h1 id=&#34;jetbrains&#34;&gt;&#xA;  Jetbrains&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jetbrains&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;不显示-local-change&#34;&gt;&#xA;  不显示 local change&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8d%e6%98%be%e7%a4%ba-local-change&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn//xiaobinqt.io/20250420/8f1c3854c5254789ab154740ca9720fc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;新版本没有-commit-dialog&#34;&gt;&#xA;  新版本没有 commit dialog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b0%e7%89%88%e6%9c%ac%e6%b2%a1%e6%9c%89-commit-dialog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn//xiaobinqt.io/20250426/5afcb725a5634a9a8bf79e9d8e8c5e17.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;新版本把这个功能去掉了，我非常不习惯，可以用一个插件 &#xA;  &lt;a href=&#34;https://plugins.jetbrains.com/plugin/26647-git-modal-commit-interface&#34;&gt;Git Modal commit Interface&lt;/a&gt; 解决。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://intellij-support.jetbrains.com/hc/en-us/community/posts/13000351411346-Commit-Tool-window-missing&#34;&gt;Commit Tool window missing! &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用插件&#34;&gt;&#xA;  常用插件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e6%8f%92%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14097-markdown-image-support&#34;&gt;Markdown Image Support&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://plugins.jetbrains.com/plugin/12383-gitmoji-plus-commit-button&#34;&gt;Gitmoji Plus: Commit Button&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8579-translation/getting-started&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>消息队列</title>
      <link>https://example.com/wiki/docs/system-design/queue-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/system-design/queue-message/</guid>
      <description>&lt;h1 id=&#34;消息队列&#34;&gt;&#xA;  消息队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一消息模型&#34;&gt;&#xA;  一、消息模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%b6%88%e6%81%af%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;点对点&#34;&gt;&#xA;  点对点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%82%b9%e5%af%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/8f02f3afa0b34b5ebce86a57650b4c39.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;发布订阅&#34;&gt;&#xA;  发布/订阅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e5%b8%83%e8%ae%a2%e9%98%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/cef43edec72c48b39e19f6f045f182c9.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;发布与订阅模式和观察者模式有以下不同：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。&lt;/li&gt;&#xA;&lt;li&gt;观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/df2c5ca8cc1a4388bfc5cb61ddbc9aa6.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;二使用场景&#34;&gt;&#xA;  二、使用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;异步处理&#34;&gt;&#xA;  异步处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。&lt;/p&gt;&#xA;&lt;p&gt;例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。&lt;/p&gt;&#xA;&lt;p&gt;只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。&lt;/p&gt;&#xA;&lt;h3 id=&#34;流量削锋&#34;&gt;&#xA;  流量削锋&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e5%89%8a%e9%94%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。&lt;/p&gt;&#xA;&lt;p&gt;可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;应用解耦&#34;&gt;&#xA;  应用解耦&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e8%a7%a3%e8%80%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。&lt;/p&gt;&#xA;&lt;p&gt;通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三可靠性&#34;&gt;&#xA;  三、可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;发送端的可靠性&#34;&gt;&#xA;  发送端的可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e9%80%81%e7%ab%af%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;发送端完成操作后一定能将消息成功发送到消息队列中。&lt;/p&gt;&#xA;&lt;p&gt;实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。&lt;/p&gt;&#xA;&lt;h3 id=&#34;接收端的可靠性&#34;&gt;&#xA;  接收端的可靠性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e6%94%b6%e7%ab%af%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;接收端能够从消息队列成功消费一次消息。&lt;/p&gt;&#xA;&lt;p&gt;两种实现方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。&lt;/li&gt;&#xA;&lt;li&gt;保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考资料&#34;&gt;&#xA;  参考资料&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;http://developers-club.com/posts/270339/&#34;&gt;Observer vs Pub-Sub&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://blog.csdn.net/lizhitao/article/details/47723105&#34;&gt;消息队列中点对点与发布订阅区别&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Chrome</title>
      <link>https://example.com/wiki/docs/coding-practice/chrome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/chrome/</guid>
      <description>&lt;h1 id=&#34;chrome&#34;&gt;&#xA;  Chrome&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chrome&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;允许复制页面内容&#34;&gt;&#xA;  允许复制页面内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%81%e8%ae%b8%e5%a4%8d%e5%88%b6%e9%a1%b5%e9%9d%a2%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;有些网站设置了不允许复制内容，大部分时候可以使用 &#xA;  &lt;a href=&#34;https://chromewebstore.google.com/detail/user-javascript-and-css/nbhcbdghjpllgmfilhnhkllmkecfmpld&#34;&gt;User JavaScript and CSS&lt;/a&gt; 这个插件来解决。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn//xiaobinqt.io/20250427/0729233f562541fbb0220958ca7cd0cc.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;js 内容&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 注入 CSS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;textContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    * {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pointer-events: all !important;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        user-select: text !important;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        -webkit-user-select: text !important;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        -moz-user-select: text !important;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        -ms-user-select: text !important;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 解除 JS 事件限制&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;onselectstart&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;oncontextmenu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;oncopy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;css 内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pointer-events: &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;!important&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;!important&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;-webkit-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;!important&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 兼容 Safari */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;-moz-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;!important&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 兼容 Firefox */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;-ms-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;!important&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 兼容 IE/Edge */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Shell</title>
      <link>https://example.com/wiki/docs/coding-practice/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/coding-practice/shell/</guid>
      <description>&lt;h1 id=&#34;shell&#34;&gt;&#xA;  Shell&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;shell 是外壳的意思，就是操作系统的外壳。我们可以通过 shell 命令来操作和控制操作系统，比如 Linux 中的 Shell 命令就包括 ls、cd、pwd 等等。总结来说，Shell 是一个命令解释器，它通过接受用户输入的 Shell 命令来启动、暂停、停止程序的运行或对计算机进行控制。&lt;/p&gt;&#xA;&lt;p&gt;shell 是一个应用程序，它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核，这就是 Shell 的本质。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;shell 本身并不是内核的一部分，它只是站在内核的基础上编写的一个应用程序&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;那么什么是 shell 脚本呢？&lt;/p&gt;&#xA;&lt;p&gt;shell 脚本就是由 Shell 命令组成的执行文件，将一些命令整合到一个文件中，进行处理业务逻辑，脚本不用编译即可运行。&lt;/p&gt;&#xA;&lt;p&gt;shell 脚本中最重要的就是对 shell 命令的使用与组合，在使用 shell 脚本支持的一些语言特性，完成想要的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;&#xA;  注释&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e9%87%8a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;#&amp;rdquo; 开头的就是注释，被编译器忽略&lt;/p&gt;&#xA;&lt;p&gt;单行注释： #&lt;/p&gt;&#xA;&lt;p&gt;多行注释：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;COMMENT&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;这是多行注释的第一行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;第二行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;第三行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;COMMENT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;变量&#34;&gt;&#xA;  变量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;变量类型&#34;&gt;&#xA;  变量类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e9%87%8f%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;运行 shell 时，会同时存在三种变量：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;局部变量：局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。&lt;/li&gt;&#xA;&lt;li&gt;环境变量：所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。&lt;/li&gt;&#xA;&lt;li&gt;shell 变量：shell 变量是由 shell 程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;变量操作&#34;&gt;&#xA;  变量操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e9%87%8f%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;创建普通变量： &lt;code&gt;name=&amp;quot;test&amp;quot;&lt;/code&gt;，&lt;strong&gt;=两边不可有空格&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>😪xxxxxx</title>
      <link>https://example.com/wiki/docs/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/wiki/docs/hidden/</guid>
      <description>&lt;div class=&#34;book-tabs&#34;&gt;&#xA;&#xA;&#xA;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-uniqueid&#34; id=&#34;tabs-uniqueid-0&#34; checked=&#34;checked&#34; /&gt;&#xA;&lt;label for=&#34;tabs-uniqueid-0&#34;&gt;Go&lt;/label&gt;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
