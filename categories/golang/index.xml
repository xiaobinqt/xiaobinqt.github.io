<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 分类 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/categories/golang/</link>
        <description>golang - 分类 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 06 Apr 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Go GC 原理</title>
    <link>https://www.xiaobinqt.cn/go-gc/</link>
    <pubDate>Wed, 06 Apr 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/go-gc/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220407/e9a10f9b61de47f8bdf2db1d0bb22bb2.png" referrerpolicy="no-referrer">
            </div>垃圾回收（Garbage Collection，GC）是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC 过程]]></description>
</item><item>
    <title>Go GMP 模型</title>
    <link>https://www.xiaobinqt.cn/gmp-model/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/gmp-model/</guid>
    <description><![CDATA[进程、线程、协程的区别 进程 进程是操作系统对一个正在运行的程序的一种抽象，进程是资源分配的最小单位。 进程在操作系统中的抽象表现进程在操作系统中]]></description>
</item><item>
    <title>Go 常用命令</title>
    <link>https://www.xiaobinqt.cn/go-build-args/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/go-build-args/</guid>
    <description><![CDATA[常用编译参数 参数 说明 -o 指定输出可执行文件名 -v 编译时显示包名，可以理解成输出详细编译信息 -race 开启竞态检测 *.go 编译当前目录下的所有go文件，也可以写]]></description>
</item><item>
    <title>grpc 入门应用</title>
    <link>https://www.xiaobinqt.cn/grpc-demo/</link>
    <pubDate>Sat, 05 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/grpc-demo/</guid>
    <description><![CDATA[RPC 是一种跨语言的协议，它可以让我们在不同的语言之间进行通信。 远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。]]></description>
</item><item>
    <title>running gcc failed: exit status 1</title>
    <link>https://www.xiaobinqt.cn/build-running-gcc-failed/</link>
    <pubDate>Thu, 10 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/build-running-gcc-failed/</guid>
    <description><![CDATA[今天在编译 go 项目时出现了如下错误： 1 2 3 4 /usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1 /usr/bin/ld: cannot find -lpthread /usr/bin/ld: cannot find -lc collect2: error: ld returned 1 exit status 解决办法： 1 yum install glibc-static.x86_64 -y]]></description>
</item><item>
    <title>go 函数式选项模式</title>
    <link>https://www.xiaobinqt.cn/functional-options-pattern/</link>
    <pubDate>Mon, 23 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/functional-options-pattern/</guid>
    <description><![CDATA[Go 语言没有构造函数，一般通过定义 New 函数来充当构造函数。但是，如果结构有较多字段，要初始化这些字段，就有很多种方式，有一种方式被认为是最优雅的]]></description>
</item><item>
    <title>golang make 和 new 的区别</title>
    <link>https://www.xiaobinqt.cn/new-make-difference/</link>
    <pubDate>Mon, 21 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/new-make-difference/</guid>
    <description><![CDATA[make 的作用是初始化内置的数据结构，也就是 slice、map和 channel。 new 的作用是根据传入的类型分配一片内存空间并返回指向这片内存空间的指]]></description>
</item><item>
    <title>golang udp 简单使用</title>
    <link>https://www.xiaobinqt.cn/upd-demo/</link>
    <pubDate>Thu, 01 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/upd-demo/</guid>
    <description><![CDATA[server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package main import ( &#34;fmt&#34; &#34;net&#34; &#34;time&#34; ) func main() { // 创建监听 socket, err := net.ListenUDP(&#34;udp4&#34;, &amp;net.UDPAddr{ IP: []byte{127, 0, 0, 1}, Port: 8080, })]]></description>
</item><item>
    <title>Linux 环境下安装 Go</title>
    <link>https://www.xiaobinqt.cn/linux-platform-install-go/</link>
    <pubDate>Wed, 12 Aug 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/linux-platform-install-go/</guid>
    <description><![CDATA[安装 在官网 https://go.dev/dl/，根据自己的环境下载对应的安装包： 官网安装包列表官网安装包列表 " 官网安装包列表 可以直接用 wget 下载]]></description>
</item><item>
    <title>Go interface</title>
    <link>https://www.xiaobinqt.cn/go-interface/</link>
    <pubDate>Thu, 18 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.xiaobinqt.cn/go-interface/</guid>
    <description><![CDATA[定义 interface 可以表示任意一种类型 interface 是接口的方法集合，只要实现了接口中的所有方法，那么就认为实现了这个接口 用途 实现多态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]]></description>
</item></channel>
</rss>
