<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 分类 - xiaobinqt&#39;s blog</title>
        <link>https://xiaobinqt.github.io/categories/golang/</link>
        <description>golang - 分类 - xiaobinqt&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xiaobinqt.github.io/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>go GMP 模型</title>
    <link>https://xiaobinqt.github.io/gmp_model/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/gmp_model/</guid>
    <description><![CDATA[进程、线程、协程的区别 协程的上下文切换比线程的上下文切换代价小 go 调度器机制 知识点 Go程序中没有语言级的关键字让你去创建一个内核线程，你只能创]]></description>
</item><item>
    <title>go 常用命令</title>
    <link>https://xiaobinqt.github.io/go_build_args/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/go_build_args/</guid>
    <description><![CDATA[常用编译参数 参数 说明 -o 指定输出可执行文件名 -v 编译时显示包名，可以理解成输出详细编译信息 -race 开启竞态检测 *.go 编译当前目录下的所有go文件，也可以写]]></description>
</item><item>
    <title>grpc 入门应用</title>
    <link>https://xiaobinqt.github.io/grpc_demo/</link>
    <pubDate>Sat, 05 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/grpc_demo/</guid>
    <description><![CDATA[RPC 是一种跨语言的协议，它可以让我们在不同的语言之间进行通信。 远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。]]></description>
</item><item>
    <title>golang break，continue，goto label 的区别</title>
    <link>https://xiaobinqt.github.io/break_continue_goto_label/</link>
    <pubDate>Wed, 16 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/break_continue_goto_label/</guid>
    <description><![CDATA[在 php 中可以直接在 break 和 continue 后加 num ，比如 break 2或 continue 2。 break num 是结束外层第 num 层整个循环体，continue num 是结束外层第 num 层单次循环。 类比 php ，go 中不能]]></description>
</item><item>
    <title>running gcc failed: exit status 1</title>
    <link>https://xiaobinqt.github.io/build_running_gcc_failed/</link>
    <pubDate>Thu, 10 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/build_running_gcc_failed/</guid>
    <description><![CDATA[今天在编译 go 项目时出现了如下错误： 1 2 3 4 /usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1 /usr/bin/ld: cannot find -lpthread /usr/bin/ld: cannot find -lc collect2: error: ld returned 1 exit status 解决办法： 1 yum install glibc-static.x86_64 -y]]></description>
</item><item>
    <title>go 函数式选项模式</title>
    <link>https://xiaobinqt.github.io/functional-options-pattern/</link>
    <pubDate>Mon, 23 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/functional-options-pattern/</guid>
    <description><![CDATA[Go 语言没有构造函数，一般通过定义 New 函数来充当构造函数。但是，如果结构有较多字段，要初始化这些字段，就有很多种方式，有一种方式被认为是最优雅的]]></description>
</item><item>
    <title>golang make 和 new 的区别</title>
    <link>https://xiaobinqt.github.io/new_make_difference/</link>
    <pubDate>Mon, 21 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/new_make_difference/</guid>
    <description><![CDATA[总结 make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。 new返回指针，指向新分配的类型 T 的]]></description>
</item><item>
    <title>golang udp 简单使用</title>
    <link>https://xiaobinqt.github.io/upd_demo/</link>
    <pubDate>Thu, 01 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/upd_demo/</guid>
    <description><![CDATA[server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package main import ( &#34;fmt&#34; &#34;net&#34; &#34;time&#34; ) func main() { // 创建监听 socket, err := net.ListenUDP(&#34;udp4&#34;, &amp;net.UDPAddr{ IP: []byte{127, 0, 0, 1}, Port: 8080, })]]></description>
</item></channel>
</rss>
