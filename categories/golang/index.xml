<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang - 分类 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/categories/golang/</link>
        <description>Golang - 分类 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 11 Oct 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Go channel 使用分析</title>
    <link>https://www.xiaobinqt.cn/go-channel-principle/</link>
    <pubDate>Wed, 11 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-channel-principle/</guid>
    <description><![CDATA[1 概念Go 中的 channel 是一个队列，遵循先进先出的原则，负责协程之间的通信。Go 语言提倡不要通过共享内存来通信，而要通过通信来实现内存共享，CSP（]]></description>
</item><item>
    <title>Go Slice 实现原理</title>
    <link>https://www.xiaobinqt.cn/go-slice-principle/</link>
    <pubDate>Tue, 10 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-slice-principle/</guid>
    <description><![CDATA[1 什么是 slice切片是基于数组实现的，它的底层是数组，可以理解为对底层数组的抽象。 源码包中 src/runtime/slice.go 定义了 slice 的数据结构： text type slice struct { array unsafe.Pointer // ArbitraryType int len int cap]]></description>
</item><item>
    <title>Golang 内存逃逸</title>
    <link>https://www.xiaobinqt.cn/escape-heap/</link>
    <pubDate>Tue, 10 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/escape-heap/</guid>
    <description><![CDATA[在 C/C++ 开发中，动态分配内存（new/malloc）需要开发者手动释放资源。这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。但是这有]]></description>
</item><item>
    <title>Go 编译标签 build tag</title>
    <link>https://www.xiaobinqt.cn/go-build-tag/</link>
    <pubDate>Sat, 28 Jan 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-build-tag/</guid>
    <description><![CDATA[1 简介在 Go 中，build tag 是添加到代码中第一行，来标识编译相关信息的，build tag 决定了当前文件是否会被当前 package 所包含，用于限制一整个文件是否]]></description>
</item><item>
    <title>Go1.18 sync.Map 解读</title>
    <link>https://www.xiaobinqt.cn/go-sync-map/</link>
    <pubDate>Wed, 14 Sep 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-sync-map/</guid>
    <description><![CDATA[1 背景项目中遇到了需要使用高并发的 map 的场景，众所周知 Go 官方的原生 map 是不支持并发读写的，直接并发的读写很容易触发 panic。 解决的办法有两个：]]></description>
</item><item>
    <title>Go GC 垃圾回收</title>
    <link>https://www.xiaobinqt.cn/go-gc/</link>
    <pubDate>Wed, 06 Apr 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-gc/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221118/74f00ad9b278426887ea4348fd7a0e1c.png" referrerpolicy="no-referrer">
            </div>垃圾回收（Garbage Collection，GC）是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC 过程]]></description>
</item><item>
    <title>Go GMP 调度模型</title>
    <link>https://www.xiaobinqt.cn/gmp-model/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/gmp-model/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221118/555f4905eb1c4615b9702ead116731d1.png" referrerpolicy="no-referrer">
            </div>1 进程、线程、协程的区别进程：进程是操作系统为应用程序分配资源的最小单元。每个进程有独立的内存空间和状态。 线程：线程是进程中的一个独立执行单]]></description>
</item><item>
    <title>Go 常用命令</title>
    <link>https://www.xiaobinqt.cn/go-build-args/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-build-args/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230714/766aed50dd3947ca9b2b2f9c0562a31a.png" referrerpolicy="no-referrer">
            </div>1 常用编译参数 参数 说明 -o 指定输出可执行文件名 -v 编译时显示包名，可以理解成输出详细编译信息 -u 不加-u标记，执行 go get 一个已有的代码包，会发现命令]]></description>
</item><item>
    <title>running gcc failed: exit status 1</title>
    <link>https://www.xiaobinqt.cn/build-running-gcc-failed/</link>
    <pubDate>Thu, 10 Feb 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/build-running-gcc-failed/</guid>
    <description><![CDATA[今天在编译 go 项目时出现了如下错误： shell /usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1 /usr/bin/ld: cannot find -lpthread /usr/bin/ld: cannot find -lc collect2: error: ld returned 1 exit status 解决办法： shell yum install glibc-static.x86_64 -y]]></description>
</item><item>
    <title>Go 实现下载文件的断点续传</title>
    <link>https://www.xiaobinqt.cn/go-breakpoint-resume/</link>
    <pubDate>Fri, 21 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-breakpoint-resume/</guid>
    <description><![CDATA[1 断点续传断点继传就是下载的文件可以在你下载了一半的时候暂停，下一次下载的时候可以从你暂停的地方继续下载，不用从头开始下载。 2 服务端 2.1 martini 实现]]></description>
</item></channel>
</rss>
