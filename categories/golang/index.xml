<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 分类 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/categories/golang/</link>
        <description>golang - 分类 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 14 Sep 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Go sync.Map 解读</title>
    <link>https://www.xiaobinqt.cn/go-sync-map/</link>
    <pubDate>Wed, 14 Sep 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-sync-map/</guid>
    <description><![CDATA[背景项目中遇到了需要使用高并发的 map 的场景，众所周知 Go 官方的原生 map 是不支持并发读写的，直接并发的读写很容易触发 panic。 解决的办法有两个： 自己配一把锁sync.Mutex，或者更加考究一点配一把读写锁]]></description>
</item><item>
    <title>高并发分布式架构演进</title>
    <link>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</link>
    <pubDate>Mon, 29 Aug 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/89de4f7569e845ad91eab0a8857d5afb.png" referrerpolicy="no-referrer">
            </div>原文链接：https://segmentfault.com/a/1190000018626163 0. 目录和说明文章在介绍一些基本概念后，按照以下过程阐述了整个架构的演进过程： 单机架构 第一次演进：Tomc]]></description>
</item><item>
    <title>Go GC 垃圾回收</title>
    <link>https://www.xiaobinqt.cn/go-gc/</link>
    <pubDate>Wed, 06 Apr 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-gc/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221118/74f00ad9b278426887ea4348fd7a0e1c.png" referrerpolicy="no-referrer">
            </div>垃圾回收（Garbage Collection，GC）是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC 过程中无需程序员手动执行。 GC 机制在现代很多编程语言都支持，GC 能]]></description>
</item><item>
    <title>Go GMP 调度模型</title>
    <link>https://www.xiaobinqt.cn/gmp-model/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/gmp-model/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221118/555f4905eb1c4615b9702ead116731d1.png" referrerpolicy="no-referrer">
            </div>进程、线程、协程的区别 进程进程是操作系统对一个正在运行的程序的一种抽象，进程是资源分配的最小单位，每一个进程都有一个自己的地址空间。 进程在操作系统中的抽象表现 通俗的说，进程就是一个正在执行的程序。 Wi]]></description>
</item><item>
    <title>Go 常用命令</title>
    <link>https://www.xiaobinqt.cn/go-build-args/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-build-args/</guid>
    <description><![CDATA[常用编译参数 参数 说明 -o 指定输出可执行文件名 -v 编译时显示包名，可以理解成输出详细编译信息 -race 开启竞态检测 *.go 编译当前目录下的所有go文件，也可以写成 f2.go f2.go &hellip; -a 强制重新构建 -w 去掉DWARF调试信息，得到的程序就]]></description>
</item><item>
    <title>grpc 入门应用</title>
    <link>https://www.xiaobinqt.cn/grpc-demo/</link>
    <pubDate>Sat, 05 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/grpc-demo/</guid>
    <description><![CDATA[RPC 是一种跨语言的协议，它可以让我们在不同的语言之间进行通信。 远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个 地址空间（通常为一]]></description>
</item><item>
    <title>running gcc failed: exit status 1</title>
    <link>https://www.xiaobinqt.cn/build-running-gcc-failed/</link>
    <pubDate>Thu, 10 Feb 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/build-running-gcc-failed/</guid>
    <description><![CDATA[今天在编译 go 项目时出现了如下错误： 1 2 3 4 /usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1 /usr/bin/ld: cannot find -lpthread /usr/bin/ld: cannot find -lc collect2: error: ld returned 1 exit status 解决办法： 1 yum install glibc-static.x86_64 -y]]></description>
</item><item>
    <title>Go 实现下载文件的断点续传</title>
    <link>https://www.xiaobinqt.cn/go-breakpoint-resume/</link>
    <pubDate>Fri, 21 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-breakpoint-resume/</guid>
    <description><![CDATA[断点续传断点继传就是下载的文件可以在你下载了一半的时候暂停，下一次下载的时候可以从你暂停的地方继续下载，不用从头开始下载。 服务端 martini 实现martini 框架实现👇 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]]></description>
</item><item>
    <title>常见设计模式-Go实现</title>
    <link>https://www.xiaobinqt.cn/design-patterns/</link>
    <pubDate>Wed, 20 Oct 2021 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/design-patterns/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221115/7f6d12f27a2e456db7779a98e9fc86f7.png" referrerpolicy="no-referrer">
            </div>创建型模式 单例模式保证一个类永远只能有一个对象，并提供一个访问它的全局访问点，且该对象的功能依然能被其他模块使用。 因为在系统内存中只存在一个对象，单例可以节省系统资源。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]]></description>
</item><item>
    <title>go 函数式选项模式</title>
    <link>https://www.xiaobinqt.cn/functional-options-pattern/</link>
    <pubDate>Mon, 23 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/functional-options-pattern/</guid>
    <description><![CDATA[Go 语言没有构造函数，一般通过定义 New 函数来充当构造函数。但是，如果结构有较多字段，要初始化这些字段，就有很多种方式，有一种方式被认为是最优雅的，就是函数式选项模式（Functional Options Pattern）]]></description>
</item></channel>
</rss>
