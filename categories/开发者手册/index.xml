<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开发者手册 - 分类 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/</link>
        <description>开发者手册 - 分类 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 16 Oct 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/" rel="self" type="application/rss+xml" /><item>
    <title>各种音乐文件格式转 MP3</title>
    <link>https://www.xiaobinqt.cn/multi-format-convert-mp3/</link>
    <pubDate>Mon, 16 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/multi-format-convert-mp3/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="mgg" class="headerLink">
    <a href="#mgg" class="header-mark"></a>mgg</h2><p>我的 qq 音乐桌面播放器版本是 1951，下载下来的音乐格式 mgg 格式的。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/256c0eddcd2e4f76a4e0f6215dd9455d.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/256c0eddcd2e4f76a4e0f6215dd9455d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/256c0eddcd2e4f76a4e0f6215dd9455d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>qq music version</h2>">
        
    </a><figcaption class="image-caption">qq music version</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/943f3b65ff8d4590b0796a8d9195435c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/943f3b65ff8d4590b0796a8d9195435c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/943f3b65ff8d4590b0796a8d9195435c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>mgg</h2>">
        
    </a><figcaption class="image-caption">mgg</figcaption>
    </figure></p>
<p>如何将 mgg 格式转 mgg 格式转成 MP3 格式呢，</p>
<ol>
<li>先用工具将 mgg 文件转成 ogg 文件，可以通过在线工具 <a href="https://openyyy.com/" target="_blank" rel="noopener noreferrer">OpenYYY</a></li>
</ol>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/4933322bfc504a7e82574c67472f533d.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/4933322bfc504a7e82574c67472f533d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/4933322bfc504a7e82574c67472f533d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>转 ogg</h2>">
        
    </a><figcaption class="image-caption">转 ogg</figcaption>
    </figure></p>
<ol start="2">
<li>下载 ogg 文件，通过 ffmpeg 将 ogg 转成 mp3，命令为 <code>ffmpeg -i ogg文件 输出mp3文件</code>，下面的示例中，将老鼠爱大米的 ogg 转成了 mp3 文件：</li>
</ol>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/587e2afcba774a5cba89c2d302568ef4.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/587e2afcba774a5cba89c2d302568ef4.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/587e2afcba774a5cba89c2d302568ef4.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>ogg convert mp3</h2>">
        
    </a><figcaption class="image-caption">ogg convert mp3</figcaption>
    </figure></p>
<p>转之后的 mp3 文件用播放器可以正常播放：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/004eaea8e54d47318ada684c393edf8c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/004eaea8e54d47318ada684c393edf8c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/004eaea8e54d47318ada684c393edf8c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>正常播放</h2>">
        
    </a><figcaption class="image-caption">正常播放</figcaption>
    </figure></p>
<p>ffmpeg 的在线工具可以使用 <a href="https://ffmpeg-online.vercel.app/" target="_blank" rel="noopener noreferrer">https://ffmpeg-online.vercel.app/</a></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/3c9833714b35434aaaf261f29110718f.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/3c9833714b35434aaaf261f29110718f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20231016/3c9833714b35434aaaf261f29110718f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>ffmpeg 在线工具</h2>">
        
    </a><figcaption class="image-caption">ffmpeg 在线工具</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://askubuntu.com/questions/442997/how-can-i-convert-audio-from-ogg-to-mp3" target="_blank" rel="noopener noreferrer">How can I convert audio from ogg to mp3?</a></li>
<li><a href="https://linuxhint.com/install-ffmpeg-ubuntu22-04/" target="_blank" rel="noopener noreferrer">How to Install FFmpeg on Ubuntu 22.04?</a></li>
</ul>
]]></description>
</item><item>
    <title>Docker 单机安装使用 Elasticsearch</title>
    <link>https://www.xiaobinqt.cn/docker-elastic-install/</link>
    <pubDate>Tue, 12 Sep 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-elastic-install/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="安装-es" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-es" class="header-mark"></a>安装 ES</h2><p>当前 <code>ElasticSearch</code> 已经到了 <code>8.0+</code>，新版本都有很多新特性，性能和功能都有大幅提升，建议使用较高版本，这里采用 <code>7.12.1</code> 版本 👼</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f7745775638b42829fd11821d4406420.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f7745775638b42829fd11821d4406420.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f7745775638b42829fd11821d4406420.png" data-sub-html="<h2>es 版本</h2>">
        
    </a><figcaption class="image-caption">es 版本</figcaption>
    </figure></p>
<p>安装 <code>ElasticSearch</code> 脚本如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -d \
</span></span><span class="line"><span class="cl">--name elasticsearch \
</span></span><span class="line"><span class="cl">    -e &#34;discovery.type=single-node&#34; \
</span></span><span class="line"><span class="cl">    --privileged \
</span></span><span class="line"><span class="cl">    -p 9200:9200 \
</span></span><span class="line"><span class="cl">    -p 9300:9300 \
</span></span><span class="line"><span class="cl">elasticsearch:7.12.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>常用命令说明：</p>
<ul>
<li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li>
<li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li>
<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li>
<li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li>
<li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定<code>elasticsearch</code>的数据目录</li>
<li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定<code>elasticsearch</code>的日志目录</li>
<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定<code>elasticsearch</code>的插件目录</li>
<li><code>--privileged</code>：授予逻辑卷访问权</li>
<li><code>-p 9200:9200</code>：端口映射配置</li>
</ul>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ca407aeb5d044916b27673149b45ec26.png" title="安装 es" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ca407aeb5d044916b27673149b45ec26.png" data-sub-html="<h2>docker 安装 es</h2><p>安装 es</p>">
        
    </a><figcaption class="image-caption">docker 安装 es</figcaption>
    </figure></p>
<p>安装完成后，在浏览器中输入：<code>http://172.27.46.132/:9200/</code> 即可看到 <code>elasticsearch</code> 的响应结果：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8b3f2fe7d164cb7a02bf8491bbc05cf.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8b3f2fe7d164cb7a02bf8491bbc05cf.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8b3f2fe7d164cb7a02bf8491bbc05cf.png" data-sub-html="<h2>es 响应结果</h2>">
        
    </a><figcaption class="image-caption">es 响应结果</figcaption>
    </figure></p>
<h2 id="kibana" class="headerLink">
    <a href="#kibana" class="header-mark"></a>Kibana</h2><p>我们可以基于 <code>http</code> 请求操作 <code>ElasticSearch</code>，但基于 <code>http</code> 操作比较麻烦，可以采用 <code>Kibana</code> 实现可视化操作。</p>
<p><code>Kibana</code> 是一个免费且开放的用户界面，能够对 <code>Elasticsearch</code> 数据进行可视化，并在 <code>Elastic Stack</code> 中进行导航，可以进行各种操作，从跟踪查询负载，到理解请求如何流经的整个应用，都能轻松完成。<code>Kibana</code> 让能够自由地选择如何呈现自己的数据。</p>
<h3 id="kibana-安装" class="headerLink">
    <a href="#kibana-%e5%ae%89%e8%a3%85" class="header-mark"></a>Kibana 安装</h3><p>使用 <code>Docker</code> 安装 <code>Kibana</code> 非常简单，但是执行命令需要注意 <code>Kibana</code> 操作的 <code>ElasticSearch</code> 地址，因为 <code>Kibana</code> 是需要连接 <code>ElasticSearch</code> 进行操作的，所以需要 es 和 <code>Kibana</code> 在同一网段，安装 <code>Kibana</code> 命令如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -d \
</span></span><span class="line"><span class="cl">--name kibana \
</span></span><span class="line"><span class="cl">-e ELASTICSEARCH_HOSTS=http://172.27.46.132:9200 \
</span></span><span class="line"><span class="cl">-p 5601:5601  \
</span></span><span class="line"><span class="cl">kibana:7.12.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>命令说明：</p>
<ul>
<li><code>-e ELASTICSEARCH_HOSTS=http://172.27.46.132:9200&quot;</code>：设置 <code>elasticsearch</code> 的地址，因为 <code>kibana</code> 已经与<code>elasticsearch</code>在一个网络，因此可以用容器名直接访问 <code>elasticsearch</code>，也可以写 IP 地址实现访问。</li>
<li><code>-p 5601:5601</code>：端口映射配置</li>
</ul>
<p>安装的时候如果没有镜像，会下载镜像，效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/8348436b33284bba88bb2efa43b298f1.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/8348436b33284bba88bb2efa43b298f1.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/8348436b33284bba88bb2efa43b298f1.png" data-sub-html="<h2>安装 Kibana</h2>">
        
    </a><figcaption class="image-caption">安装 Kibana</figcaption>
    </figure></p>
<p>安装成功后，可以访问 <code>http://172.27.46.132:5601/</code> 效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/53c75f9beec0482ba216e08af2e4d035.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/53c75f9beec0482ba216e08af2e4d035.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/53c75f9beec0482ba216e08af2e4d035.png" data-sub-html="<h2>Kibana 效果</h2>">
        
    </a><figcaption class="image-caption">Kibana 效果</figcaption>
    </figure></p>
<p>可以点击 <code>Add data</code>，添加示例数据，如下图，随意选一个即可，不选其实也是可以的。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f74d72b57b544c6485d15de34417f89f.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f74d72b57b544c6485d15de34417f89f.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/f74d72b57b544c6485d15de34417f89f.png" data-sub-html="<h2>添加数据</h2>">
        
    </a><figcaption class="image-caption">添加数据</figcaption>
    </figure></p>
<h3 id="kibana-中文配置" class="headerLink">
    <a href="#kibana-%e4%b8%ad%e6%96%87%e9%85%8d%e7%bd%ae" class="header-mark"></a>Kibana 中文配置</h3><p><code>Kibana</code> 支持中文配置，可以把 <code>Kibana</code> 配置成中文版，切换中文操作如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#进入容器
</span></span><span class="line"><span class="cl">docker exec -it kibana /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#进入配置文件目录
</span></span><span class="line"><span class="cl">cd /usr/share/kibana/config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#编辑文件kibana.yml
</span></span><span class="line"><span class="cl">vi kibana.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#在最后一行添加如下配置
</span></span><span class="line"><span class="cl">i18n.locale: zh-CN
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#保存退出
</span></span><span class="line"><span class="cl">exit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#并重启容器
</span></span><span class="line"><span class="cl">docker restart kibana
</span></span></code></pre></td></tr></table>
</div>
</div><p>等待 <code>Kibana</code> 容器启动，再次访问 <code>http://172.27.46.132:5601/</code> 效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/43ffacffaff84394a12e7e741bcc8f65.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/43ffacffaff84394a12e7e741bcc8f65.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/43ffacffaff84394a12e7e741bcc8f65.png" data-sub-html="<h2>中文效果</h2>">
        
    </a><figcaption class="image-caption">中文效果</figcaption>
    </figure></p>
<h2 id="ik-分词器安装" class="headerLink">
    <a href="#ik-%e5%88%86%e8%af%8d%e5%99%a8%e5%ae%89%e8%a3%85" class="header-mark"></a>IK 分词器安装</h2><p>打开 <code>Kibana</code>，点击开发工具，操作如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef521d29bf764703adabe06108c6ef9f.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef521d29bf764703adabe06108c6ef9f.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef521d29bf764703adabe06108c6ef9f.png" data-sub-html="<h2>开发工具</h2>">
        
    </a><figcaption class="image-caption">开发工具</figcaption>
    </figure></p>
<p>在左边输入如下内容，用于查询分词：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET _analyze
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;analyzer&#34;: &#34;standard&#34;,
</span></span><span class="line"><span class="cl">  &#34;text&#34;: &#34;php 是世界上最好的语言&#34;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8c86a3f5c8640108a32551ace6b8cad.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8c86a3f5c8640108a32551ace6b8cad.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a8c86a3f5c8640108a32551ace6b8cad.png" data-sub-html="<h2>分词效果</h2>">
        
    </a><figcaption class="image-caption">分词效果</figcaption>
    </figure></p>
<p>使用 <code>standard</code> 对 <code>php 是世界上最好的语言</code> 进行分词。</p>
<p><code>分词</code>：提取一句话或者一篇文章中的词语。</p>
<p>我们在使用 <code>ElasticSearch</code> 的时候，默认用 <code>standard</code> 分词器，但 <code>standard</code> 分词器使用的是按空格分词，这种分词操作方法不符合中文分词标准，我们需要额外安装中文分词器。</p>
<h3 id="ik-分词器" class="headerLink">
    <a href="#ik-%e5%88%86%e8%af%8d%e5%99%a8" class="header-mark"></a>IK 分词器</h3><p><code>IK Analyzer</code> 是一个开源的，基于 java 语言开发的轻量级的中文分词工具包。可以直接在 <code>ElasticSearch</code> 中集成 IK 分词器，<code>IK</code> 分词器集成<code>ElasticSearch</code>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener noreferrer">elasticsearch-analysis-ik/releases</a>。IK 可以跟 es 的版本一致，我们 es 的版本是 7.12.1，IK 的版本也是用 7.12.1。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/89e1dba4c7fd481ba7183f764a9cb18f.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/89e1dba4c7fd481ba7183f764a9cb18f.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/89e1dba4c7fd481ba7183f764a9cb18f.png" data-sub-html="<h2>IK 分词器</h2>">
        
    </a><figcaption class="image-caption">IK 分词器</figcaption>
    </figure></p>
<h3 id="ik-分词器配置" class="headerLink">
    <a href="#ik-%e5%88%86%e8%af%8d%e5%99%a8%e9%85%8d%e7%bd%ae" class="header-mark"></a>IK 分词器配置</h3><p>下载安装包 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip" target="_blank" rel="noopener noreferrer">elasticsearch-analysis-ik/releases/tag/v7.12.1</a> 后，，需要将 <code>elasticsearch-analysis-ik-7.12.1.zip</code> 拷贝到 <code>elasticSearch</code> 容器里的的 <code>/usr/share/elasticsearch/plugins</code> 目录中解压即可。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ee221bb0e9424881b5ea8a687fa5d7bf.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ee221bb0e9424881b5ea8a687fa5d7bf.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ee221bb0e9424881b5ea8a687fa5d7bf.png" data-sub-html="<h2>cp elasticsearch-analysis-ik-7.12.1.zip</h2>">
        
    </a><figcaption class="image-caption">cp elasticsearch-analysis-ik-7.12.1.zip</figcaption>
    </figure></p>
<p>解压文件成功后，然后<strong>重启</strong> es 容器。</p>
<h3 id="分词测试" class="headerLink">
    <a href="#%e5%88%86%e8%af%8d%e6%b5%8b%e8%af%95" class="header-mark"></a>分词测试</h3><p><code>IK</code>分词器包含两种模式：</p>
<ul>
<li>
<p><code>ik_smart</code>：最少切分</p>
</li>
<li>
<p><code>ik_max_word</code>：最细切分</p>
</li>
</ul>
<p>前面使用默认的<code>standard</code>分词器，对中文分词非常难用，安装IK分词器后，我们可以使用IK分词器测试，测试代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET _analyze
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;analyzer&#34;: &#34;ik_max_word&#34;,
</span></span><span class="line"><span class="cl">  &#34;text&#34;: &#34;php 是世界上最好的语言&#34;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/689f9549af6440e999bf83865dedbe54.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/689f9549af6440e999bf83865dedbe54.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/689f9549af6440e999bf83865dedbe54.png" data-sub-html="<h2>效果</h2>">
        
    </a><figcaption class="image-caption">效果</figcaption>
    </figure></p>
<p>可以发现对中文的分词效果是比较不错的，但也存在一些不足，比如 <code>最好的</code> 我们希望它是一个词，而 <code>上</code>我们希望它不被识别一个词，这种需求可以同过自定义词典解决。</p>
<h2 id="ik-自定义词典" class="headerLink">
    <a href="#ik-%e8%87%aa%e5%ae%9a%e4%b9%89%e8%af%8d%e5%85%b8" class="header-mark"></a>IK 自定义词典</h2><p>IK 分词器支持自定义词典，包括自定义分词，也包含自定义停用分词，操作起来非常简单。接下来实现一下自定义词典和停用词典。</p>
<h3 id="自定义词典" class="headerLink">
    <a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e8%af%8d%e5%85%b8" class="header-mark"></a>自定义词典</h3><p>自定义词典，需要先创建自己的词典，再引用自己的词典即可。</p>
<ol>
<li>创建词典</li>
</ol>
<p>在 es 容器目录 <code>/usr/share/elasticsearch/plugins/ik/config</code> 中创建自己的词典，例如叫 <code>custome.dic</code>，在文件中添加自定义的词语，操作如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/432e98e286cb4c3587caa0c35f2d6446.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/432e98e286cb4c3587caa0c35f2d6446.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/432e98e286cb4c3587caa0c35f2d6446.png" data-sub-html="<h2>创建词典</h2>">
        
    </a><figcaption class="image-caption">创建词典</figcaption>
    </figure></p>
<p>我们把自定义的词典 <code>最好的</code> 添加到了 <code>custome.dic</code> 中了，这就是创建词典，如果有多个自定义词，需要换行加入，这里一定要注意中文分词设置编码格式为 <code>UTF-8</code>。</p>
<ol start="2">
<li>引用词典</li>
</ol>
<p>修改 <code>config/IKAnalyzer.cfg.xml</code> 引用自己创建的 <code>custome.dic</code> 词典，配置如下:</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef379f05c79646f4b61bc964dfe17b07.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef379f05c79646f4b61bc964dfe17b07.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/ef379f05c79646f4b61bc964dfe17b07.png" data-sub-html="<h2>引用自定义字典</h2>">
        
    </a><figcaption class="image-caption">引用自定义字典</figcaption>
    </figure></p>
<p>再使用 <code>Kibana</code> 效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/71f95f67e34c4723b8923d3113b4951c.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/71f95f67e34c4723b8923d3113b4951c.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/71f95f67e34c4723b8923d3113b4951c.png" data-sub-html="<h2>效果</h2>">
        
    </a><figcaption class="image-caption">效果</figcaption>
    </figure></p>
<h3 id="自定义停用词汇" class="headerLink">
    <a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%81%9c%e7%94%a8%e8%af%8d%e6%b1%87" class="header-mark"></a>自定义停用词汇</h3><p>自定义停用词典和自定义词典一样，需要先创建自己的词典，再引用自己的词典即可。</p>
<ol>
<li>创建词典</li>
</ol>
<p>在 <code>config</code> 中创建自己的停用词典，例如叫 <code>stop.dic</code>，在文件中添加自定义的停用词语，操作如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a389717b1b254a4199b0a08b334afd16.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a389717b1b254a4199b0a08b334afd16.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/a389717b1b254a4199b0a08b334afd16.png" data-sub-html="<h2>停用词汇</h2>">
        
    </a><figcaption class="image-caption">停用词汇</figcaption>
    </figure></p>
<ol start="2">
<li>引用词典</li>
</ol>
<p>修改 <code>config/IKAnalyzer.cfg.xml</code> 引用自己创建的 <code>stop.dic</code> 停用词典，配置如下:</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/cc6cc42963ec4eed8da6f875c9220807.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/cc6cc42963ec4eed8da6f875c9220807.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/cc6cc42963ec4eed8da6f875c9220807.png" data-sub-html="<h2>停用词典配置</h2>">
        
    </a><figcaption class="image-caption">停用词典配置</figcaption>
    </figure></p>
<p>修改完成后，重启 <code>elasticsearch</code> 容器。</p>
<p>再使用 <code>Kibana</code> 测试效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/9bdadba012d049e4a9c34f2d3163b190.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/9bdadba012d049e4a9c34f2d3163b190.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230912/9bdadba012d049e4a9c34f2d3163b190.png" data-sub-html="<h2>停用分词效果</h2>">
        
    </a><figcaption class="image-caption">停用分词效果</figcaption>
    </figure></p>
<p>可以发现，不再有 <code>世界</code>，<code>的</code>，<code>是</code>，<code>上</code>，<code>语言</code> 的分词了，说明停用分词也生效了。</p>
<h2 id="一个例子" class="headerLink">
    <a href="#%e4%b8%80%e4%b8%aa%e4%be%8b%e5%ad%90" class="header-mark"></a>一个例子</h2><p>现在有个需求是向 mysql 中插入文章，但是同时需要向 es 中写入文章，通过 es 来分词，优化搜索，通过 es 搜索时，可以返回 mysql 中对应的 id。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">article</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w">          </span><span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="n">unsigned</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">title</span><span class="o">`</span><span class="w">       </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">comment</span><span class="w"> </span><span class="s1">&#39;文章标题&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">content</span><span class="o">`</span><span class="w">     </span><span class="nb">text</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s1">&#39;文章内容&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">create_time</span><span class="o">`</span><span class="w"> </span><span class="k">timestamp</span><span class="w">    </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="k">CURRENT_TIMESTAMP</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">update_time</span><span class="o">`</span><span class="w"> </span><span class="k">timestamp</span><span class="w">    </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="k">CURRENT_TIMESTAMP</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="k">UPDATE</span><span class="w"> </span><span class="k">CURRENT_TIMESTAMP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">COMMENT</span><span class="o">=</span><span class="s1">&#39;文章表&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>golang 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;database/sql&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/elastic/go-elasticsearch/v7/esapi&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="s">&#34;github.com/go-sql-driver/mysql&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化 MySQL 连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;mysql&#34;</span><span class="p">,</span> <span class="s">&#34;root:123456@tcp(localhost:3306)/wb-test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化 Elasticsearch 连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">esConfig</span> <span class="o">:=</span> <span class="nx">elasticsearch</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addresses</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;http://localhost:9200&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">esClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">elasticsearch</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="nx">esConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 插入文章到 MySQL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">articleTitle</span> <span class="o">:=</span> <span class="s">&#34;蝶恋花&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">articleContent</span> <span class="o">:=</span> <span class="s">&#34;花褪残红注青杏小。燕子飞时，绿水人家绕。枝上柳绵注吹又少。天涯何处无芳草。墙里秋千墙外道。墙外行人，墙里佳人笑。笑渐不闻声渐悄。多情却被无情恼。&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="s">&#34;INSERT INTO article (title, content) VALUES (?, ?)&#34;</span><span class="p">,</span> <span class="nx">articleTitle</span><span class="p">,</span> <span class="nx">articleContent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取插入文章的 MySQL ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">articleID</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT LAST_INSERT_ID()&#34;</span><span class="p">).</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">articleID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 在 Elasticsearch 中写入文章
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">esIndexName</span> <span class="o">:=</span> <span class="s">&#34;articles&#34;</span> <span class="c1">// Elasticsearch 索引名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">docID</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="nx">articleID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//esDoc := map[string]interface{}{
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//	&#34;title&#34;:   articleTitle,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//	&#34;content&#34;: articleContent,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//	&#34;mysql_id&#34;: articleID, // 将 MySQL ID 存储在 Elasticsearch 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建 Elasticsearch 文档
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">esRequest</span> <span class="o">:=</span> <span class="nx">esapi</span><span class="p">.</span><span class="nx">IndexRequest</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Index</span><span class="p">:</span>      <span class="nx">esIndexName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DocumentID</span><span class="p">:</span> <span class="nx">docID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Body</span><span class="p">:</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">`{
</span></span></span><span class="line"><span class="cl"><span class="s">            &#34;title&#34;: &#34;%s&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">            &#34;content&#34;: &#34;%s&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">            &#34;mysql_id&#34;: %d
</span></span></span><span class="line"><span class="cl"><span class="s">        }`</span><span class="p">,</span> <span class="nx">articleTitle</span><span class="p">,</span> <span class="nx">articleContent</span><span class="p">,</span> <span class="nx">articleID</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Refresh</span><span class="p">:</span> <span class="s">&#34;true&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">esRequest</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">esClient</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 从 Elasticsearch 中查询文章，包括 MySQL ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//esQuery := map[string]interface{}{
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//	&#34;query&#34;: map[string]interface{}{
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//		&#34;match&#34;: map[string]interface{}{
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//			&#34;title&#34;: &#34;示例文章标题&#34;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//		},
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//	},
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">esSearchRequest</span> <span class="o">:=</span> <span class="nx">esapi</span><span class="p">.</span><span class="nx">SearchRequest</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Index</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">esIndexName</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Body</span><span class="p">:</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">`{
</span></span></span><span class="line"><span class="cl"><span class="s">            &#34;query&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">                &#34;match&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">                    &#34;title&#34;: &#34;示例文章标题&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                }
</span></span></span><span class="line"><span class="cl"><span class="s">            }
</span></span></span><span class="line"><span class="cl"><span class="s">        }`</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">esSearchRequest</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">esClient</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 处理 Elasticsearch 查询结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">res</span><span class="p">.</span><span class="nf">IsError</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error: %s&#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nf">Status</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 解析查询结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">response</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nf">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">response</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error parsing the response body: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">hits</span> <span class="o">:=</span> <span class="nx">response</span><span class="p">[</span><span class="s">&#34;hits&#34;</span><span class="p">].(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})[</span><span class="s">&#34;hits&#34;</span><span class="p">].([]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">hit</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">hits</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">source</span> <span class="o">:=</span> <span class="nx">hit</span><span class="p">.(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})[</span><span class="s">&#34;_source&#34;</span><span class="p">].(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">		<span class="nx">title</span> <span class="o">:=</span> <span class="nx">source</span><span class="p">[</span><span class="s">&#34;title&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">content</span> <span class="o">:=</span> <span class="nx">source</span><span class="p">[</span><span class="s">&#34;content&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mysqlID</span> <span class="o">:=</span> <span class="nx">source</span><span class="p">[</span><span class="s">&#34;mysql_id&#34;</span><span class="p">].(</span><span class="kt">float64</span><span class="p">)</span> <span class="c1">// 从 Elasticsearch 中获取 MySQL ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;标题: %s内容: %sMySQL ID: %d&#34;</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">mysqlID</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 kibana 查看到 es 现在有 2 条数据：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/3212ca90f6c04a96884c59ca17524f8b.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/3212ca90f6c04a96884c59ca17524f8b.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/3212ca90f6c04a96884c59ca17524f8b.png" data-sub-html="<h2>结果数据</h2>">
        
    </a><figcaption class="image-caption">结果数据</figcaption>
    </figure></p>
<p>在 kibana 中通过查询接口搜索 content 内容包含 “绕” 的，展示效果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/cd4487b3e4fd4c2f8e6e5bd830561b3e.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/cd4487b3e4fd4c2f8e6e5bd830561b3e.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/cd4487b3e4fd4c2f8e6e5bd830561b3e.png" data-sub-html="<h2>搜索结构</h2>">
        
    </a><figcaption class="image-caption">搜索结构</figcaption>
    </figure></p>
<p>查询 content 含有 “11111” <strong>或</strong> title 中含有 “悯” 的数据结果如下：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/2ef161f48f494c5aa4d4b50d46860ad7.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/2ef161f48f494c5aa4d4b50d46860ad7.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230913/2ef161f48f494c5aa4d4b50d46860ad7.png" data-sub-html="<h2>查询结果</h2>">
        
    </a><figcaption class="image-caption">查询结果</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/458011982" target="_blank" rel="noopener noreferrer">Elastic Search 入门</a></li>
<li><a href="https://juejin.cn/post/6936487066272432142" target="_blank" rel="noopener noreferrer">Elasticsearch 中 must, filter, should, must_not, constant_score 的区别</a></li>
</ul>
]]></description>
</item><item>
    <title>Docker bridge 网络与自定义 DNS 解析</title>
    <link>https://www.xiaobinqt.cn/docker-net-custom-dns/</link>
    <pubDate>Wed, 24 May 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-net-custom-dns/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="常见-dns-记录类型" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81-dns-%e8%ae%b0%e5%bd%95%e7%b1%bb%e5%9e%8b" class="header-mark"></a>常见 DNS 记录类型</h2><ul>
<li>A 记录（Address Record）</li>
</ul>
<p>记录格式：<code>example.com. IN A 192.0.2.1</code>，将域名映射到 IPv4 地址，不包含端口信息。</p>
<ul>
<li>AAAA 记录（IPv6 Address Record）</li>
</ul>
<p>记录格式：<code>example.com. IN AAAA 2001:db8::1</code>，将域名映射到 IPv6 地址。</p>
<ul>
<li>CNAME 记录（Canonical Name Record）</li>
</ul>
<p>记录格式：<code>www.example.com. IN CNAME example.com.</code>，将一个域名指向另一个域名，实现域名的别名或重定向。</p>
<ul>
<li>TXT 记录（Text Record）</li>
</ul>
<p>记录格式：<code>example.com. IN TXT &quot;Some text here&quot;</code>，存储与域名相关的文本信息，常用于验证域名所有权、防止电子邮件欺诈等。</p>
<ul>
<li>SRV 记录（Service Record）</li>
</ul>
<p>记录格式：<code>_service._proto.name. IN SRV priority weight port target</code>。<code>priority</code>表示优先级，用于指定备用服务器的顺序。值越小，优先级越高。<code>weight</code>表示权重，用于在具有相同优先级的记录之间进行负载均衡。值越大，权重越高。<code>port</code>表示服务的端口号。<code>target</code>表示提供该服务的目标主机的域名。</p>
<p>SRV 用于指定特定服务的域名、端口和优先级等信息，它用于在 DNS 中提供服务发现的功能，让客户端能够通过域名查找到提供特定服务的目标主机和端口。</p>
<ul>
<li>PTR 记录（Pointer Record）</li>
</ul>
<p>记录格式：<code>1.2.0.192.in-addr.arpa. IN PTR example.com.</code>，用于进行反向 DNS 查找，将 IP 地址解析为域名。</p>
<blockquote>
<p>IN（表示Internet）在 DNS 记录中是可选的，可以省略。当省略 IN 时，默认为 IN，因为大多数 DNS 记录都是针对互联网的。</p>
</blockquote>
<h2 id="resolvconf-配置文件" class="headerLink">
    <a href="#resolvconf-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>resolv.conf 配置文件</h2><p>resolv.conf 配置文件，存储了用于解析域名的 DNS 服务器的相关信息，用于指定系统的 DNS 解析配置。</p>
<p>resolv.conf 文件通常位于 Linux 系统中的 /etc/resolv.conf。每行包含一个配置项，配置项由关键字和对应的值组成，以空格或制表符分隔。常见的配置项包括：</p>
<ul>
<li>nameserver：指定 DNS 服务器的 IP 地址。可以有多个 nameserver 行，按照优先级从上到下进行解析。</li>
<li>search：指定默认的搜索域名列表。当使用不完全限定的域名时，系统会自动尝试附加这些域名来进行解析。</li>
<li>domain：指定系统的默认域名。当使用不完全限定的主机名时，系统会自动尝试附加默认域名来进行解析。</li>
<li>options：指定其他的解析选项，如超时时间、转发等。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nameserver 8.8.8.8
</span></span><span class="line"><span class="cl">nameserver 8.8.4.4
</span></span><span class="line"><span class="cl">search example.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如以下的这个配置</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>resolv.conf</h2>">
        
    </a><figcaption class="image-caption">resolv.conf</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">search xae-zcbus-20230523.28e5df10.csphere.local csphere.local
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条 search 配置表示系统默认的搜索域名列表包括两个域名：<code>xae-zcbus-20230523.28e5df10.csphere.local</code> 和 <code>csphere.local</code>。</p>
<p>当进行 DNS 解析时，如果使用一个不完全限定的域名（没有包含点号），系统会按照 search 配置中的顺序尝试逐个附加这些搜索域名，以尝试解析域名。例如，如果要解析的域名是 example，系统会依次尝试解析 <code>example.xae-zcbus-20230523.28e5df10.csphere.local</code> 和 <code>example.csphere.local</code>。</p>
<p>这样配置搜索域名列表可以简化 DNS 查询过程，特别是在本地网络内部使用内部域名时，通过设置合适的搜索域名，可以直接使用不完全限定的主机名进行解析，而无需每次都输入完整的域名。</p>
<p>ndots 参数控制着系统在进行 DNS 解析时是否自动追加搜索域名。它指定了一个域名中至少要包含的点号<code>.</code>的数量。点号在域名中的数量表示域名的层级结构，例如<code>example.com</code>有一个点号，而<code>www.example.com</code>有两个点号。当一个域名的层级结构中点号的数量达到或超过 ndots 参数指定的值时，系统将<strong>不再追加</strong>搜索域名。</p>
<p>如上的配置<code>options ndots:2</code>，表示当进行 DNS 解析时，如果域名中包含至少两个点号（层级结构至少为三级），系统将不会自动追加搜索域名。如果域名的层级结构不足三级（点号少于两个），系统会自动尝试使用 /etc/resolv.conf 中指定的搜索域名列表进行解析。</p>
<p><code>nameserver 172.17.0.1</code>用于指定 DNS 解析时要使用的 DNS 服务器的 IP 地址。这里的<code>172.17.0.1</code>是 Docker bridge 网络下虚拟网桥 docker0 的 IP 地址。</p>
<p>因为容器中没有 dns 解析服务，不管是 dnsmasq 还是 pdns 都是装在宿主机上的，所以最后肯定是到宿主机上来解析的域名，但是这里如果直接写宿主机 IP 会影响效率「TODO 待补充」。</p>
<h2 id="etchosts-配置文件" class="headerLink">
    <a href="#etchosts-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>/etc/hosts 配置文件</h2><p>/etc/hosts 是本地的主机名解析文件，用于将主机名映射到对应的 IP 地址。/etc/hosts 文件包含了主机名和对应 IP 地址的映射关系。每行的格式为 <code>&lt;IP 地址&gt; &lt;主机名&gt;</code> 或者 <code>&lt;IP 地址&gt; &lt;主机别名&gt; &lt;主机名&gt;</code>。</p>
<p>/etc/hosts 文件中的条目优先于 DNS（Domain Name System）解析，当系统需要解析主机名时，会首先查看 /etc/hosts 文件，如果找到匹配的主机名，则直接使用对应的 IP 地址进行通信，无需进行 DNS 查询。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>hosts</h2>">
        
    </a><figcaption class="image-caption">hosts</figcaption>
    </figure></p>
<h2 id="pdns" class="headerLink">
    <a href="#pdns" class="header-mark"></a>PDNS</h2><p>PDNS 是 PowerDNS 的简称，它是一款开源的域名系统（DNS）服务器软件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装 pdns</span>
</span></span><span class="line"><span class="cl">yum install pdns pdns-backend-pipe -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># pdns 启动,停止和查看是否运行正常</span>
</span></span><span class="line"><span class="cl">systemctl start/stop/status pdns
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>查看 dnsmasq 是否正常</h2>">
        
    </a><figcaption class="image-caption">查看 dnsmasq 是否正常</figcaption>
    </figure></p>
<p>如果有问题需要排查，可以使用如下命令让 pdns 在前台运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/usr/sbin/pdns_server --guardian<span class="o">=</span>no --daemon<span class="o">=</span>no --disable-syslog --log-timestamp<span class="o">=</span>no --write-pid<span class="o">=</span>no
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>前台运行模式</h2>">
        
    </a><figcaption class="image-caption">前台运行模式</figcaption>
    </figure></p>
<p><code>--guardian=no</code>: 禁用 Guardian 模式。Guardian 模式是 PowerDNS 的守护进程管理机制，它负责监控和重启 PowerDNS 进程。通过将此参数设置为 no，禁用了 Guardian 模式。</p>
<p><code>--daemon=no</code>: 禁用守护进程模式。默认情况下，PowerDNS 以守护进程的形式运行，即在后台作为系统服务运行。通过将此参数设置为 no，PowerDNS 将在前台运行，输出日志和调试信息到终端。</p>
<p><code>--disable-syslog</code>: 禁用使用系统日志。默认情况下，PowerDNS 会将日志信息写入系统日志。通过使用此参数，禁用了将日志写入系统日志的功能。</p>
<p><code>--log-timestamp=no</code>: 禁用日志时间戳。默认情况下，PowerDNS 在日志中添加时间戳以指示每个日志条目的时间。通过将此参数设置为 no，禁用了时间戳的添加。</p>
<p><code>--write-pid=no</code>: 禁用写入 PID 文件。默认情况下，PowerDNS 会将其进程 ID 写入 PID 文件。通过将此参数设置为 no，禁用了 PID 文件的写入。</p>
<h3 id="pipe-backend" class="headerLink">
    <a href="#pipe-backend" class="header-mark"></a>pipe backend</h3><p>在 PowerDNS 中，pipe 是一种后端（Backend）类型，用于将 DNS 查询通过管道（Pipe）方式传递给外部程序进行处理。这种后端类型被称为 &ldquo;pipe backend&rdquo;。</p>
<p>使用 pipe backend，PowerDNS 可以将接收到的 DNS 查询通过管道发送给一个外部的自定义脚本或程序，然后由该脚本或程序处理查询并返回结果给 PowerDNS。这种方式允许用户根据自己的需求编写自定义逻辑来处理 DNS 查询，从而实现更灵活的功能。</p>
<p>在 PowerDNS 中配置 pipe backend 需要以下步骤：</p>
<ol>
<li>
<p>编写自定义脚本或程序：根据需求，编写一个能够接收 DNS 查询并返回结果的脚本或程序。该脚本或程序可以使用任何编程语言来实现，例如 Python、Perl、Shell 等。</p>
</li>
<li>
<p>配置 PowerDNS：在 PowerDNS 的配置文件中指定使用 pipe backend，并设置要执行的脚本或程序的路径。通常需要修改 PowerDNS 的配置文件（例如 pdns.conf）来进行配置。</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">launch</span><span class="o">=</span>pipe
</span></span><span class="line"><span class="cl">pipe-command<span class="o">=</span>/path/to/your/script.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述示例中，pipe-command 指定了自定义脚本或程序的路径。在修改完配置文件后，<strong>需要重新启动</strong> PowerDNS 服务，使配置生效。</p>
<p>当 PowerDNS 接收到 DNS 查询时，它将会将查询数据通过管道传递给指定的脚本或程序。脚本或程序可以处理查询并返回结果给 PowerDNS，然后由 PowerDNS 将结果返回给客户端。</p>
<p>通过配置 pipe backend，可以根据自己的需求编写自定义的逻辑来处理 DNS 查询，例如基于外部数据源、自定义策略、过滤等操作。</p>
<h2 id="dnsmasq" class="headerLink">
    <a href="#dnsmasq" class="header-mark"></a>dnsmasq</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装 dnsmasq</span>
</span></span><span class="line"><span class="cl">yum install dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 一些状态命令</span>
</span></span><span class="line"><span class="cl">systemctl start/stop/restart/status dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 检查配置文件语法是否正确</span>
</span></span><span class="line"><span class="cl">dnsmasq --test
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>dnsmasq 命令</h2>">
        
    </a><figcaption class="image-caption">dnsmasq 命令</figcaption>
    </figure></p>
<p>Dnsmasq 是一个轻量级的 DNS 和 DHCP 服务器软件，用于提供本地域名解析和网络地址分配功能，配置文件通常位于 /etc/dnsmasq.conf。下面是一些常用的配置文件字段说明：</p>
<ul>
<li>
<p>port（端口）：指定 Dnsmasq 监听的 DNS 查询端口。默认为 53，但可以根据需要进行更改。</p>
</li>
<li>
<p>cache-size（缓存大小）：指定DNS缓存的最大大小（以条目数量表示）。缓存可以提高解析性能，减少对上游 DNS 服务器的查询次数。例如，cache-size=1000 表示最多缓存 1000 条 DNS 解析记录。</p>
</li>
<li>
<p>server（服务器）：用于指定要使用的上游 DNS 服务器。可以配置多个 server 字段，每个字段后面跟随一个有效的 DNS 服务器地址。Dnsmasq 会按顺序向这些服务器发送 DNS 查询请求。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>8.8.8.8
</span></span><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>8.8.4.4
</span></span></code></pre></td></tr></table>
</div>
</div><p>server 的另一种写法是用来指定特定域名的 DNS 服务器映射。比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>/domain.org/192.168.14.5
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置表示将域名 domain.org 解析到 IP 地址 192.168.14.5 上。当 Dnsmasq 收到对<code>domain.org</code>域名的解析请求时，它将使用指定的 IP 地址作为响应。这在本地网络中创建自定义的域名解析规则非常有用，可以用于内部域名解析或重定向特定域名到特定 IP 地址。</p>
<ul>
<li>address 参数用于指定域名解析的静态映射，将特定域名解析到指定的IP地址。它的语法如下：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">address</span><span class="o">=</span>/域名/IP地址
</span></span><span class="line"><span class="cl"><span class="nv">address</span><span class="o">=</span>/example.com/192.168.1.100
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置将域名 example.com 解析为 IP 地址 192.168.1.100。当 Dnsmasq 接收到关于 example.com 的解析请求时，它将使用指定的 IP 地址进行解析，而不会向上游 DNS 服务器发送查询请求。</p>
<h2 id="演练" class="headerLink">
    <a href="#%e6%bc%94%e7%bb%83" class="header-mark"></a>演练</h2><p>现在有 2 台机器，分别是<code>192.168.14.103</code>用来做控制器，安装有 powerDNS，作为上游 DNS，用来最后解析 DNS，<code>192.168.14.100</code>用来做 agent，安装有 dnsmasq 解析本地 DNS，通过配置 server 参数，将域名交给上游 DNS 服务器解析，也就是交给<code>192.168.14.103</code>解析处理。 pdns 通过 pipe backend 的 python 脚本，对所有的以<code>domain.org</code>结尾的域名请求都返回<code>192.168.40.223</code>的 IP，以下是 backend.py 的 python 脚本，python 版本是 python 3.6.8。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -*- coding: utf-8 -*-</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DNSLookup</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Handle PowerDNS pipe-backend domain name lookups.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ttl</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;parse DNS query and produce lookup result.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        query: a sequence containing the DNS query as per PowerDNS manual appendix A:
</span></span></span><span class="line"><span class="cl"><span class="s2">        http://downloads.powerdns.com/documentation/html/backends-detail.html#PIPEBACKEND-PROTOCOL
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">qtype</span><span class="p">,</span> <span class="n">_id</span><span class="p">,</span> <span class="n">ip</span><span class="p">)</span> <span class="o">=</span> <span class="n">query</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">False</span>  <span class="c1"># has a DNS query response</span>
</span></span><span class="line"><span class="cl">        <span class="n">qname_lower</span> <span class="o">=</span> <span class="n">qname</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;List of servers to round-robin&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">servers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;192.168.40.223&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">server</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">servers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># if (qtype == &#39;A&#39; or qtype == &#39;ANY&#39;) and qname_lower.endswith(&#39;domain.org&#39;):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">qtype</span> <span class="o">==</span> <span class="s1">&#39;ANY&#39;</span> <span class="ow">and</span> <span class="n">qname_lower</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;domain.org&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;DATA</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="s1">A</span><span class="se">\t</span><span class="si">%d</span><span class="se">\t</span><span class="s1">-1</span><span class="se">\t</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">DNSLookup</span><span class="o">.</span><span class="n">ttl</span><span class="p">,</span> <span class="n">server</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">qtype</span> <span class="o">==</span> <span class="s1">&#39;SOA&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;DATA</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="s1">3600</span><span class="se">\t</span><span class="s1">-1</span><span class="se">\t</span><span class="s1">ns1.test.soa</span><span class="se">\t</span><span class="s1">admin.test.soa</span><span class="se">\t</span><span class="s1">2014032110</span><span class="se">\t</span><span class="s1">10800</span><span class="se">\t</span><span class="s1">3600</span><span class="se">\t</span><span class="s1">604800</span><span class="se">\t</span><span class="s1">3600&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="o">%</span> <span class="p">(</span><span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">qtype</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">str_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;return string result suitable for pipe-backend output to PowerDNS.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Logger</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;/tmp/backend.log&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;self.logfile = &#39;/tmp/backend-</span><span class="si">%d</span><span class="s2">.log&#39; % pid&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">logline</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">%s</span><span class="s1">|</span><span class="si">%s</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">asctime</span><span class="p">(),</span> <span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">logfile</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">logline</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">debug_log</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PowerDNSbackend</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;The main PowerDNS pipe backend process.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filein</span><span class="p">,</span> <span class="n">fileout</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;initialise and run PowerDNS pipe backend process.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">filein</span> <span class="o">=</span> <span class="n">filein</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span> <span class="o">=</span> <span class="n">fileout</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_process_requests</span><span class="p">()</span>  <span class="c1"># main program loop</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_process_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;main program loop&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">first_time</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rawline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filein</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">rawline</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;EOF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span>  <span class="c1"># EOF detected</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">rawline</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;received from pdns:</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">first_time</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s1">&#39;HELO</span><span class="se">\t</span><span class="s1">1&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;OK</span><span class="se">\t</span><span class="s1">Python backend firing up&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;FAIL&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;HELO input not received - execution aborted&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">rawline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filein</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c1"># as per docs - read another line before aborting</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;calling sys.exit()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">first_time</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">query</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">6</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;LOG</span><span class="se">\t</span><span class="s1">PowerDNS sent unparseable line&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;FAIL&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;Performing DNSLookup(</span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="n">lookup</span> <span class="o">=</span> <span class="n">DNSLookup</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">lookup</span><span class="o">.</span><span class="n">has_result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pdns_result</span> <span class="o">=</span> <span class="n">lookup</span><span class="o">.</span><span class="n">str_result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="n">pdns_result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;DNSLookup result(</span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="n">pdns_result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;END&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_fprint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Print the given message with newline and flushing.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">message</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;sent to pdns:</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">infile</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># sys.stdout.close()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># outfile = os.fdopen(1, &#39;w&#39;, 1)</span>
</span></span><span class="line"><span class="cl">    <span class="n">outfile</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PowerDNSbackend</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;execution failure:&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>pipe backend</h2>">
        
    </a><figcaption class="image-caption">pipe backend</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>dig 解析正常</h2>">
        
    </a><figcaption class="image-caption">dig 解析正常</figcaption>
    </figure></p>
<p>现在在 agent 机器也就是<code>192.168.14.100</code>上通过 <a href="https://hub.docker.com/r/xiaobinqt/redis/tags" target="_blank" rel="noopener noreferrer">xiaobinqt/redis:7-ping</a> 镜像启动一个 redis 容器，容器名为 c-redis：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl">docker run --name c-redis --dns 172.17.0.1 --dns-search domain.org --dns-opt <span class="s2">&#34;ndots:2&#34;</span> -d  xiaobinqt/redis:7-ping<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>比如，当在容器中执行 <code>ping abdd</code>时，正常会先走 hosts 但是这里的 hosts 都没有对应的域名，所以 hosts 失效，再去 nameserver 指定的 DNS 服务器解析域名，由于配置了 ndots:2 ，系统会自动追加搜索域名<code>domain.org</code>，所以会去 172.17.0.1 DNS 服务器搜索域名 <code>abdd.domain.org</code>，172.17.0.1 对应的是宿主机的 docker0 虚拟网桥，最后会走到<strong>宿主机的 dns 服务</strong>，也就是<code>192.168.14.100</code> 的 dnsmasq 服务，对应的端口是 53。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>调试结果</h2>">
        
    </a><figcaption class="image-caption">调试结果</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://gist.github.com/sokratisg/10069682" target="_blank" rel="noopener noreferrer">pdns-pipebackend.py</a></li>
<li><a href="https://www.linuxhelp.com/questions/powerdns-libpipebackend-so-no-such-file-or-directory" target="_blank" rel="noopener noreferrer">PowerDNS : libpipebackend.so no such file or directory</a></li>
<li><a href="https://community.zextras.com/dns-server-installation-guide-on-centos-7-rhel-7-and-centos-8-rhel-8-using-dnsmasq/" target="_blank" rel="noopener noreferrer">Installing DNS Server on CentOS/RHEL using dnsmasq | Zimbra</a></li>
</ul>
]]></description>
</item><item>
    <title>SSH error: permissions are too open</title>
    <link>https://www.xiaobinqt.cn/ssh-permissions-are-too-open/</link>
    <pubDate>Sat, 25 Mar 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/ssh-permissions-are-too-open/</guid>
    <description><![CDATA[<h2 id="问题描述" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0" class="header-mark"></a>问题描述</h2><p>我的 git 版本在 1.8.3.1 的时候提交 push 代码时一直报错</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/66823aa8269d4341837ac1a2ecd69735.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/66823aa8269d4341837ac1a2ecd69735.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/66823aa8269d4341837ac1a2ecd69735.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>git 版本</h2>">
        
    </a><figcaption class="image-caption">git 版本</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/934bd49f1f9449ed9a22606e0c19f64d.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/934bd49f1f9449ed9a22606e0c19f64d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/934bd49f1f9449ed9a22606e0c19f64d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>Permission denied (publickey)</h2>">
        
    </a><figcaption class="image-caption">Permission denied (publickey)</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">fatal: Could not <span class="nb">read</span> from remote repository.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please make sure you have the correct access rights
</span></span><span class="line"><span class="cl">and the repository exists.
</span></span></code></pre></td></tr></table>
</div>
</div><p>排查了几个小时，一直没解决，之前也一直是这么用的，也没出现过问题。后来没办法，我尝试更新了下 git 版本到 2.39.2，发现错误提示不一样了😢</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/f4a5ce70fd7146d982ff72b70ec5098a.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/f4a5ce70fd7146d982ff72b70ec5098a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/f4a5ce70fd7146d982ff72b70ec5098a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>Permissions are too open</h2>">
        
    </a><figcaption class="image-caption">Permissions are too open</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Warning: Permanently added <span class="s1">&#39;192.168.40.233&#39;</span> <span class="o">(</span>ECDSA<span class="o">)</span> to the list of known hosts.
</span></span><span class="line"><span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span></span><span class="line"><span class="cl">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
</span></span><span class="line"><span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span></span><span class="line"><span class="cl">Permissions <span class="m">0755</span> <span class="k">for</span> <span class="s1">&#39;/tmp/tmp.LGAlGyMvNs/id_rsa&#39;</span> are too open.
</span></span><span class="line"><span class="cl">It is required that your private key files are NOT accessible by others.
</span></span><span class="line"><span class="cl">This private key will be ignored.
</span></span><span class="line"><span class="cl">Load key <span class="s2">&#34;/tmp/tmp.LGAlGyMvNs/id_rsa&#34;</span>: bad permissions
</span></span><span class="line"><span class="cl">Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">致命错误：无法读取远程仓库。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">请确认您有正确的访问权限并且仓库存在。
</span></span></code></pre></td></tr></table>
</div>
</div><p>我根据<code>Permissions 0755 for '/tmp/tmp.LGAlGyMvNs/id_rsa' are too open.</code> google 了下，原来是 isa 文件权限给的太高了，改成 400 或是 600 就可以了。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/283ea804c9de4b1dbe456b4e8915182f.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/283ea804c9de4b1dbe456b4e8915182f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230324/283ea804c9de4b1dbe456b4e8915182f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>问题解决</h2>">
        
    </a><figcaption class="image-caption">问题解决</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.educative.io/answers/ssh-error-permissions-are-too-open" target="_blank" rel="noopener noreferrer">SSH error: permissions are too open</a></li>
<li><a href="https://juejin.cn/post/7071910670056292389" target="_blank" rel="noopener noreferrer">CentOS 7 升级 git 版本到 2.x</a></li>
</ul>
]]></description>
</item><item>
    <title>Windows 10 专业版使用 WSL</title>
    <link>https://www.xiaobinqt.cn/windows-wsl/</link>
    <pubDate>Wed, 22 Feb 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/windows-wsl/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="什么是-wsl" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-wsl" class="header-mark"></a>什么是 wsl</h2><p>Windows Subsystem for Linux（WSL）是一个在 Windows 10+ 上能够运行原生 Linux 二进制可执行文件的兼容层。</p>
<p>与 WSL1 相比，WSL 2 使用更新、更强大的虚拟化技术在轻量级实用工具虚拟机 (VM) 中运行 Linux 内核。</p>
<h2 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>安装</h2><p>我是 win10 专业版，其他版本的 win10 也类似，不过<strong>推荐使用专业版</strong>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/a15dfa3e82854382859261a104cd8f3c.png" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/a15dfa3e82854382859261a104cd8f3c.png" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/a15dfa3e82854382859261a104cd8f3c.png" data-sub-html="<h2>电脑版本</h2>">
        
    </a><figcaption class="image-caption">电脑版本</figcaption>
    </figure></p>
<ol>
<li>进入 windows 终端</li>
<li><code>wsl -l -o</code>查看可安装的发行版</li>
<li>执行<code>wsl --set-default-version 2</code>将 WSL 默认版本调整为 WSL2</li>
<li><code>wsl --install --d NAME</code>即可安装。如： <code>wsl --install --d ubuntu-20.04</code>可安装 ubuntu20.04</li>
<li><code>wsl -l -v</code>可查看安装的发行版的 WSL 版本</li>
</ol>
<p>注销（卸载）当前安装的 Linux 的 Windows 子系统可以使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wsl --unregister 名称
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/0808f63a623d4c44aa9971e854b7f2e5.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/0808f63a623d4c44aa9971e854b7f2e5.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230320/0808f63a623d4c44aa9971e854b7f2e5.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>卸载 wsl</h2>">
        
    </a><figcaption class="image-caption">卸载 wsl</figcaption>
    </figure></p>
<p>对于已安装的 wsl 版本，从 wsl1 切换到 wsl2 可以使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wsl --set-version 名称 <span class="m">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230222/38eff9e474cc40b0a43068cec25fe08a.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230222/38eff9e474cc40b0a43068cec25fe08a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230222/38eff9e474cc40b0a43068cec25fe08a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>切换 wsl2</h2>">
        
    </a><figcaption class="image-caption">切换 wsl2</figcaption>
    </figure></p>
<h2 id="no_proxy-设置" class="headerLink">
    <a href="#no_proxy-%e8%ae%be%e7%bd%ae" class="header-mark"></a>no_proxy 设置</h2><p>win10 的 no_proxy 可以直接添加系统环境变量：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/64a916b5dc924109aef92251094661d3.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/64a916b5dc924109aef92251094661d3.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/64a916b5dc924109aef92251094661d3.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>win10 no_proxy</h2>">
        
    </a><figcaption class="image-caption">win10 no_proxy</figcaption>
    </figure></p>
<p>WSL no_proxy 也可以通过添加环境变量方式：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/f562263377664765a1d56204777d5168.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/f562263377664765a1d56204777d5168.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/f562263377664765a1d56204777d5168.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>wsl no_proxy</h2>">
        
    </a><figcaption class="image-caption">wsl no_proxy</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands" target="_blank" rel="noopener noreferrer">WSL 的基本命令</a></li>
<li><a href="https://www.sysgeek.cn/windows-11-install-windows-subsystem-for-linux/" target="_blank" rel="noopener noreferrer">如何在 Windows 11 中安装 Windows Subsystem for Linux（WSL）</a></li>
<li><a href="https://gist.github.com/libChan/3a804a46b532cc326a2ee55b27e8ac19" target="_blank" rel="noopener noreferrer">windows clash 设置代理</a></li>
<li><a href="https://blog.csdn.net/SHERLOCKSALVATORE/article/details/123599042" target="_blank" rel="noopener noreferrer">windows 的cmd设置代理方法</a></li>
<li><a href="https://www.jianshu.com/p/6e7488440db2" target="_blank" rel="noopener noreferrer">Windows 10/11 安装 WSL2 的简单方法</a></li>
<li><a href="https://blog.csdn.net/admans/article/details/125071913" target="_blank" rel="noopener noreferrer">Win11卸载WSL，卸载Windows子系统</a></li>
</ul>
]]></description>
</item><item>
    <title>curl: (60) Peer&#39;s Certificate has expired 问题解决</title>
    <link>https://www.xiaobinqt.cn/curl-ertificate-has-expired/</link>
    <pubDate>Tue, 17 Jan 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/curl-ertificate-has-expired/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<p>刚执行 curl 命令时发现一个问题</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/51b67e1e9f9847d096a86fe7f7ff27e3.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/51b67e1e9f9847d096a86fe7f7ff27e3.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/51b67e1e9f9847d096a86fe7f7ff27e3.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>Certificate has expired</h2>">
        
    </a><figcaption class="image-caption">Certificate has expired</figcaption>
    </figure></p>
<p>可以先更新证书试试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">update-ca-trust
</span></span></code></pre></td></tr></table>
</div>
</div><p>更新证书后如果问题没有解决，继续看是不是由于时间过期引起的问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">date
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果发现机器时间不对就需要同步时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ntpdate pool.ntp.org
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/b4ce330953b840b4a1d63c1380beb688.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/b4ce330953b840b4a1d63c1380beb688.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/b4ce330953b840b4a1d63c1380beb688.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>问题解决</h2>">
        
    </a><figcaption class="image-caption">问题解决</figcaption>
    </figure></p>
]]></description>
</item><item>
    <title>minikube 安装使用</title>
    <link>https://www.xiaobinqt.cn/minikube-usage/</link>
    <pubDate>Sat, 31 Dec 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/minikube-usage/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230128/3cce82b4c8ec479aa27d81f4d0388055.png" referrerpolicy="no-referrer">
            </div><!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="简介" class="headerLink">
    <a href="#%e7%ae%80%e4%bb%8b" class="header-mark"></a>简介</h2><p>Kubernetes 是一个生产级别的容器编排平台和集群管理系统，不仅能够创建、调度容器，还能够监控、管理服务器，它凝聚了 Google 等大公司和开源社区的集体智慧，从而让中小型公司也可以具备轻松运维海量计算节点，也就是 “云计算” 的能力。</p>
<p>minikube 是一个 “迷你” 版本的 Kubernetes，自从 2016 年发布以来一直在积极地开发维护，紧跟 Kubernetes 的版本更新，同时也兼容较旧的版本（最多可以到之前的 6 个小版本）。</p>
<p>minikube 最大特点就是 “小而美”，可执行文件仅有不到 100MB，运行镜像也不过 1GB。minikube 集成了 Kubernetes 的绝大多数功能特性，不仅有核心的容器编排功能，还有丰富的插件，例如 Dashboard、GPU、Ingress、Istio、Kong、Registry 等。</p>
<h2 id="安装-docker" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-docker" class="header-mark"></a>安装 Docker</h2><p>我的系统是 debian 11，<strong>本文所有的操作都是在 debian 11 的环境下进行</strong>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/1ce3091edf2d4b63933d4d5d7938fd5c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="系统版本" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/1ce3091edf2d4b63933d4d5d7938fd5c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>系统版本</h2><p>系统版本</p>">
        
    </a><figcaption class="image-caption">系统版本</figcaption>
    </figure></p>
<p>Docker 的安装可以参考官网 <a href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noopener noreferrer">Install Docker Engine on Debian</a>，其他系统的安装方式都可以在官网找到。debian 11 的安装步骤大致如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">apt-get remove docker docker-engine docker.io containerd runc <span class="c1"># 卸载旧版本</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt-get install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  gnupg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  lsb-release
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir -p /etc/apt/keyrings
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/debian/gpg <span class="p">|</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> tee /etc/apt/sources.list.d/docker.list &gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="安装-minikube" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-minikube" class="header-mark"></a>安装 minikube</h2><p>可以去官网 <a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener noreferrer">https://minikube.sigs.k8s.io/docs/start/</a> 下载对应的版本。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/a7572d5e517e45758a4822e28602502b.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="下载" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/a7572d5e517e45758a4822e28602502b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>下载地址</h2><p>下载</p>">
        
    </a><figcaption class="image-caption">下载地址</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">install minikube-linux-amd64 /usr/local/bin/minikube
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/e285a6927b944c0296c175a192f143d7.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="下载并安装" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/e285a6927b944c0296c175a192f143d7.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>下载并安装 minikube</h2><p>下载并安装</p>">
        
    </a><figcaption class="image-caption">下载并安装 minikube</figcaption>
    </figure></p>
<h2 id="安装-kubectl" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-kubectl" class="header-mark"></a>安装 kubectl</h2><p>minikube 只能够搭建 Kubernetes 环境，要操作 Kubernetes，还需要另一个专门的客户端工具 kubectl。</p>
<p>kubectl 是一个命令行工具，通过它可以与 Kubernetes 后台服务通信，把我们的命令转发给 Kubernetes，实现容器和集群的管理功能。</p>
<p>kubectl 是一个与 Kubernetes、minikube 彼此独立的项目，不包含在 minikube 里，但 minikube 提供了安装它的简化方式，只需执行下面的这条命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube kubectl
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/ae06b019feba415092522d5887a34c0b.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="下载 kubectl" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/ae06b019feba415092522d5887a34c0b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>下载 kubectl</h2><p>下载 kubectl</p>">
        
    </a><figcaption class="image-caption">下载 kubectl</figcaption>
    </figure></p>
<p>以上这条命令会把与当前 Kubernetes 版本匹配的 kubectl 下载下来，存放在内部目录（例如<code>.minikube/cache/linux/amd64/v1.23.3</code>），然后就可以使用它来操作 Kubernetes 了。</p>
<p>在 minikube 环境里会用到两个客户端，minikube 管理 Kubernetes 集群环境，kubectl 操作实际的 Kubernetes 功能。</p>
<h2 id="启动环境" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8%e7%8e%af%e5%a2%83" class="header-mark"></a>启动环境</h2><p>安装了 minikube 和 kubectl 就可以在本机上运行 minikube，创建 Kubernetes 实验环境了。</p>
<p>最好先关闭 swap 分区，不然会 WARNING 提示：</p>
<blockquote>
<p>swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 关闭 swap分区</span>
</span></span><span class="line"><span class="cl">swapoff -a
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用命令 minikube start 会从 Docker Hub 上拉取镜像，以当前最新版本的 Kubernetes 启动集群，也可以在后面再加上一个参数<code>--kubernetes-version</code> 明确指定要使用 Kubernetes 版本。这里使用 “1.23.3”，启动命令是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube start --kubernetes-version<span class="o">=</span>v1.23.3
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果出现类似以下的问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">* minikube v1.28.0 on Centos 7.9.2009 <span class="o">(</span>lxc/amd64<span class="o">)</span>
</span></span><span class="line"><span class="cl">* Automatically selected the docker driver. Other choices: none, ssh
</span></span><span class="line"><span class="cl">* The <span class="s2">&#34;docker&#34;</span> driver should not be used with root privileges. If you wish to <span class="k">continue</span> as root, use --force.
</span></span><span class="line"><span class="cl">* If you are running minikube within a VM, consider using --driver<span class="o">=</span>none:
</span></span><span class="line"><span class="cl">*   https://minikube.sigs.k8s.io/docs/reference/drivers/none/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">X Exiting due to DRV_AS_ROOT: The <span class="s2">&#34;docker&#34;</span> driver should not be used with root privileges.
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以使用加上 <code>--force</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube start --kubernetes-version<span class="o">=</span>v1.23.3 --force
</span></span></code></pre></td></tr></table>
</div>
</div><p>国内网络环境复杂，一般访问外网比较慢，也可以使用加上<code>--image-mirror-country='cn'</code>参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube start --image-mirror-country<span class="o">=</span><span class="s1">&#39;cn&#39;</span> --kubernetes-version<span class="o">=</span>v1.23.3 --force
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/756c1c2c48154d44aedd334ad6d5fe41.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="minikube start" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/756c1c2c48154d44aedd334ad6d5fe41.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>minikube start</h2><p>minikube start</p>">
        
    </a><figcaption class="image-caption">minikube start</figcaption>
    </figure></p>
<h2 id="简单使用" class="headerLink">
    <a href="#%e7%ae%80%e5%8d%95%e4%bd%bf%e7%94%a8" class="header-mark"></a>简单使用</h2><p>minikube 自带的 kubectl 有一点限制，必须要在前面加上 minikube 的前缀，后面再加上 <code>--</code> 才能使用，像这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube kubectl -- version
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/6d9652c6330c4cd888416362c9087f12.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="kubectl version" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/6d9652c6330c4cd888416362c9087f12.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>kubectl version</h2><p>kubectl version</p>">
        
    </a><figcaption class="image-caption">kubectl version</figcaption>
    </figure></p>
<p>我们在 Kubernetes 里运行一个 Nginx 应用，命令与 Docker 类似，也是 run，但是需要用<code>--image</code>指定镜像，然后 Kubernetes 会自动拉取镜像并运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">minikube kubectl -- run ngx --image<span class="o">=</span>nginx:alpine
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/caec80f930f94095832101c5bd351122.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="运行应用" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230117/caec80f930f94095832101c5bd351122.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>运行应用</h2><p>运行应用</p>">
        
    </a><figcaption class="image-caption">运行应用</figcaption>
    </figure></p>
<p>命令执行之后可以看到，在 Kubernetes 集群里就有了一个名字叫 ngx 的 Pod 正在运行，表示这个单节点 minikube 环境已经搭建成功。</p>
<h2 id="什么是容器编排" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%ae%b9%e5%99%a8%e7%bc%96%e6%8e%92" class="header-mark"></a>什么是容器编排</h2><p>容器，是现代程序的运行方式。编排就是部署、管理应用程序的系统，能动态地响应变化，如：回滚、滚动升级、故障自愈、自动扩缩容。自动完成这些所有任务，需要人工最初进行一些配置，就可以一劳永逸。所以，运行容器形式的应用程序，这些应用程序的构建方式，使它们能够实现回滚、滚动升级、故障自愈、自动扩缩容等就是容器编排。</p>
<h2 id="k8s-和-docker-的区别" class="headerLink">
    <a href="#k8s-%e5%92%8c-docker-%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>K8s 和 Docker 的区别</h2><p>Docker 应用打包、测试、交付，Kubernetes 是基于 Docker 的产物，进行编排、运行。例如有 1 个集群，3 个节点。这些节点，都以 Docker 作为容器运行时，Docker 是更偏向底层的技术。Kubernetes 更偏向上层的技术 ，它实现了对容器运行时的抽象，抽象的目的是兼容底层容器运行时（容器进行时技术不仅有 Docker，还有 containerd、kata 等，无论哪种容器运行时，Kubernetes 层面的操作都是一样的）以及解耦，同时还提供了一套容器运行时的标准。抽象的产物是容器运行时接口 CRI（Container Runtime Interface）。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener noreferrer">minikube start</a></li>
<li><a href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noopener noreferrer">docker docs</a></li>
</ul>
]]></description>
</item><item>
    <title>高并发分布式架构演进</title>
    <link>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</link>
    <pubDate>Mon, 29 Aug 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/89de4f7569e845ad91eab0a8857d5afb.png" referrerpolicy="no-referrer">
            </div><!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<blockquote>
<p>原文链接：<a href="https://segmentfault.com/a/1190000018626163" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000018626163</a></p>
</blockquote>
<h2 id="0-目录和说明" class="headerLink">
    <a href="#0-%e7%9b%ae%e5%bd%95%e5%92%8c%e8%af%b4%e6%98%8e" class="header-mark"></a>0. 目录和说明</h2><p>文章在介绍一些基本概念后，按照以下过程阐述了整个架构的演进过程：</p>
<ul>
<li>
<p>单机架构</p>
</li>
<li>
<p>第一次演进：Tomcat 与数据库分开部署</p>
</li>
<li>
<p>第二次演进：引入本地缓存和分布式缓存</p>
</li>
<li>
<p>第三次演进：引入反向代理实现负载均衡</p>
</li>
<li>
<p>第四次演进：数据库读写分离</p>
</li>
<li>
<p>第五次演进：数据库按业务分库</p>
</li>
<li>
<p>第六次演进：把大表拆分为小表</p>
</li>
<li>
<p>第七次演进：使用 LVS 或 F5 来使多个 Nginx 负载均衡</p>
</li>
<li>
<p>第八次演进：通过 DNS 轮询实现机房间的负载均衡</p>
</li>
<li>
<p>第九次演进：引入 NoSQL 数据库和搜索引擎等技术</p>
</li>
<li>
<p>第十次演进：大应用拆分为小应用</p>
</li>
<li>
<p>第十一次演进：复用的功能抽离成微服务</p>
</li>
<li>
<p>第十二次演进：引入企业服务总线 ESB 屏蔽服务接口的访问差异</p>
</li>
<li>
<p>第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</p>
</li>
<li>
<p>第十四次演进：以云平台承载系统</p>
</li>
</ul>
<h2 id="1-概述" class="headerLink">
    <a href="#1-%e6%a6%82%e8%bf%b0" class="header-mark"></a>1. 概述</h2><p>本文以淘宝作为例子，介绍从一百个到千万级并发情况下服务端的架构的演进过程，同时列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。</p>
<blockquote>
<p>特别说明：本文以淘宝为例仅仅是为了便于说明演进过程可能遇到的问题，并非是淘宝真正的技术演进路径</p>
</blockquote>
<h2 id="2-基本概念" class="headerLink">
    <a href="#2-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" class="header-mark"></a>2. 基本概念</h2><p>在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍。</p>
<ul>
<li><strong>分布式</strong></li>
</ul>
<p>系统中的多个模块在不同服务器上部署，即可称为分布式系统，如 Tomcat 和数据库分别部署在不同的服务器上，或两个相同功能的 Tomcat 分别部署在不同服务器上</p>
<ul>
<li><strong>高可用</strong></li>
</ul>
<p>系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性</p>
<ul>
<li><strong>集群</strong></li>
</ul>
<p>一个特定领域的软件部署在多台服务器上并<strong>作为一个整体</strong>提供一类服务，这个整体称为集群。如 Zookeeper 中的 Master 和 Slave 分别部署在多台服务器上，共同组成一个整体提供集中配置服务。在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性</p>
<ul>
<li><strong>负载均衡</strong></li>
</ul>
<p>请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的</p>
<ul>
<li><strong>正向代理和反向代理</strong></li>
</ul>
<p>系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，<strong>正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程</strong>。</p>
<h2 id="3-架构演进" class="headerLink">
    <a href="#3-%e6%9e%b6%e6%9e%84%e6%bc%94%e8%bf%9b" class="header-mark"></a>3. 架构演进</h2><h3 id="31-单机架构" class="headerLink">
    <a href="#31-%e5%8d%95%e6%9c%ba%e6%9e%b6%e6%9e%84" class="header-mark"></a>3.1 单机架构</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/1f117811d1f646bbbb030f52013818ab.png" title="单机架构" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/1f117811d1f646bbbb030f52013818ab.png" data-sub-html="<h2>单机架构</h2><p>单机架构</p>">
        
    </a><figcaption class="image-caption">单机架构</figcaption>
    </figure></p>
<p>以淘宝作为例子。在网站最初时，应用数量与用户数都较少，可以把 Tomcat 和数据库部署在同一台服务器上。浏览器往 <code>www.taobao.com</code> 发起请求时，首先经过 DNS 服务器（域名系统）把域名转换为实际 IP 地址
<code>10.102.4.1</code>，浏览器转而访问该 IP 对应的 Tomcat。</p>
<blockquote>
<p>随着用户数的增长，Tomcat 和数据库之间竞争资源，单机性能不足以支撑业务</p>
</blockquote>
<h3 id="32-第一次演进tomcat-与数据库分开部署" class="headerLink">
    <a href="#32-%e7%ac%ac%e4%b8%80%e6%ac%a1%e6%bc%94%e8%bf%9btomcat-%e4%b8%8e%e6%95%b0%e6%8d%ae%e5%ba%93%e5%88%86%e5%bc%80%e9%83%a8%e7%bd%b2" class="header-mark"></a>3.2 第一次演进：Tomcat 与数据库分开部署</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/51b57795a18a487daae0807e4e005d73.png" title="第一次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/51b57795a18a487daae0807e4e005d73.png" data-sub-html="<h2>第一次演进</h2><p>第一次演进</p>">
        
    </a><figcaption class="image-caption">第一次演进</figcaption>
    </figure></p>
<p>Tomcat 和数据库分别独占服务器资源，显著提高两者各自性能。</p>
<blockquote>
<p>随着用户数的增长，并发读写数据库成为瓶颈</p>
</blockquote>
<h3 id="33-第二次演进引入本地缓存和分布式缓存" class="headerLink">
    <a href="#33-%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%bc%95%e5%85%a5%e6%9c%ac%e5%9c%b0%e7%bc%93%e5%ad%98%e5%92%8c%e5%88%86%e5%b8%83%e5%bc%8f%e7%bc%93%e5%ad%98" class="header-mark"></a>3.3 第二次演进：引入本地缓存和分布式缓存</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/08062e488e3a42c3952d2e083e117f28.png" title="第二次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/08062e488e3a42c3952d2e083e117f28.png" data-sub-html="<h2>第二次演进</h2><p>第二次演进</p>">
        
    </a><figcaption class="image-caption">第二次演进</figcaption>
    </figure></p>
<p>在 Tomcat 同服务器上或同 JVM 中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的 html 页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。其中涉及的技术包括：使用 memcached 作为本地缓存，使用 Redis 作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。</p>
<blockquote>
<p>缓存抗住了大部分的访问请求，随着用户数的增长，并发压力主要落在单机的 Tomcat 上，响应逐渐变慢</p>
</blockquote>
<h3 id="34-第三次演进引入反向代理实现负载均衡" class="headerLink">
    <a href="#34-%e7%ac%ac%e4%b8%89%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%bc%95%e5%85%a5%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86%e5%ae%9e%e7%8e%b0%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.4 第三次演进：引入反向代理实现负载均衡</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/447531a9c371496e9263e32a312b192c.png" title="第三次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/447531a9c371496e9263e32a312b192c.png" data-sub-html="<h2>第三次演进</h2><p>第三次演进</p>">
        
    </a><figcaption class="image-caption">第三次演进</figcaption>
    </figure></p>
<p>在多台服务器上分别部署 Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个 Tomcat 中。此处假设 Tomcat 最多支持 100 个并发，Nginx 最多支持 50000 个并发，那么理论上 Nginx 把请求分发到 500 个 Tomcat 上，就能抗住 50000 个并发。其中涉及的技术包括：Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持 http 协议，还会涉及 session 共享、文件上传下载的问题。</p>
<blockquote>
<p>反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈</p>
</blockquote>
<h3 id="35-第四次演进数据库读写分离" class="headerLink">
    <a href="#35-%e7%ac%ac%e5%9b%9b%e6%ac%a1%e6%bc%94%e8%bf%9b%e6%95%b0%e6%8d%ae%e5%ba%93%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb" class="header-mark"></a>3.5 第四次演进：数据库读写分离</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/53d08f904fa54100bb891bacf5d55eec.png" title="第四次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/53d08f904fa54100bb891bacf5d55eec.png" data-sub-html="<h2>第四次演进</h2><p>第四次演进</p>">
        
    </a><figcaption class="image-caption">第四次演进</figcaption>
    </figure></p>
<p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。</p>
<blockquote>
<p>业务逐渐变多，不同业务之间的访问量差距较大，不同业务直接竞争数据库，相互影响性能</p>
</blockquote>
<h3 id="36-第五次演进数据库按业务分库" class="headerLink">
    <a href="#36-%e7%ac%ac%e4%ba%94%e6%ac%a1%e6%bc%94%e8%bf%9b%e6%95%b0%e6%8d%ae%e5%ba%93%e6%8c%89%e4%b8%9a%e5%8a%a1%e5%88%86%e5%ba%93" class="header-mark"></a>3.6 第五次演进：数据库按业务分库</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/effe7db154244811af27331d0b1a4d8c.png" title="第五次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/effe7db154244811af27331d0b1a4d8c.png" data-sub-html="<h2>第五次演进</h2><p>第五次演进</p>">
        
    </a><figcaption class="image-caption">第五次演进</figcaption>
    </figure></p>
<p>把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。</p>
<blockquote>
<p>随着用户数的增长，单机的写库会逐渐会达到性能瓶颈</p>
</blockquote>
<h3 id="37-第六次演进把大表拆分为小表" class="headerLink">
    <a href="#37-%e7%ac%ac%e5%85%ad%e6%ac%a1%e6%bc%94%e8%bf%9b%e6%8a%8a%e5%a4%a7%e8%a1%a8%e6%8b%86%e5%88%86%e4%b8%ba%e5%b0%8f%e8%a1%a8" class="header-mark"></a>3.7 第六次演进：把大表拆分为小表</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/2fad6020cd9b4b97baebc993157067dc.png" title="第六次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/2fad6020cd9b4b97baebc993157067dc.png" data-sub-html="<h2>第六次演进</h2><p>第六次演进</p>">
        
    </a><figcaption class="image-caption">第六次演进</figcaption>
    </figure></p>
<p>比如针对评论数据，可按照商品 ID 进行 hash，路由到对应的表中存储；针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户 ID 或记录编号来路由数据。只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的 Mycat 也支持在大表拆分为小表情况下的访问控制。</p>
<p>这种做法显著的增加了数据库运维的难度，对 DBA 的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库，但是这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的，如分库分表的管理和请求分发，由 Mycat 实现，SQL 的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等，这种架构其实是 <strong><ruby>MPP<rt>Massively Parallel Processing</rt></ruby></strong>
（大规模并行处理）架构的一类实现。</p>
<p>目前开源和商用都已经有不少 MPP 数据库，开源中比较流行的有 Greenplum、TiDB、Postgresql XC、HAWQ 等，商用的如南大通用的 GBase、睿帆科技的雪球 DB、华为的 LibrA 等等，不同的 MPP 数据库的侧重点也不一样，如 TiDB 更侧重于分布式 OLTP 场景，Greenplum 更侧重于分布式 OLAP 场景，这些 MPP 数据库基本都提供了类似 Postgresql、Oracle、MySQL 那样的 SQL 标准支持能力，能把一个查询解析为分布式的执行计划分发到每台机器上并行执行，最终由数据库本身汇总数据进行返回，也提供了诸如权限管理、分库分表、事务、数据副本等能力，并且大多能够支持 100 个节点以上的集群，大大降低了数据库运维的成本，并且使数据库也能够实现水平扩展。</p>
<blockquote>
<p>数据库和 Tomcat 都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的 Nginx 会成为瓶颈</p>
</blockquote>
<h3 id="38-第七次演进使用-lvs-或-f5-来使多个-nginx-负载均衡" class="headerLink">
    <a href="#38-%e7%ac%ac%e4%b8%83%e6%ac%a1%e6%bc%94%e8%bf%9b%e4%bd%bf%e7%94%a8-lvs-%e6%88%96-f5-%e6%9d%a5%e4%bd%bf%e5%a4%9a%e4%b8%aa-nginx-%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.8 第七次演进：使用 LVS 或 F5 来使多个 Nginx 负载均衡</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/1b37027ad49a4aaeb4485885ad9a696a.png" title="第七次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/1b37027ad49a4aaeb4485885ad9a696a.png" data-sub-html="<h2>第七次演进</h2><p>第七次演进</p>">
        
    </a><figcaption class="image-caption">第七次演进</figcaption>
    </figure></p>
<p>由于瓶颈在 Nginx，因此无法通过两层的 Nginx 来实现多个 Nginx 的负载均衡。图中的 <strong><ruby>LVS<rt>Linux Virtual Server</rt></ruby></strong> 和 F5 是工作在网络第四层的负载均衡解决方案，其中 LVS 是软件，运行在操作系统内核态，可对 TCP 请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于 Nginx，可假设单机的 LVS 可支持几十万个并发的请求转发；F5 是一种负载均衡硬件，与 LVS 提供的能力类似，性能比 LVS 更高，但价格昂贵。</p>
<p>由于 LVS 是单机版的软件，若 LVS 所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。可使用 keepalived 软件模拟出虚拟 IP，然后把虚拟 IP 绑定到多台 LVS 服务器上，浏览器访问虚拟 IP 时，会被路由器重定向到真实的 LVS 服务器，当主 LVS 服务器宕机时，keepalived 软件会自动更新路由器中的路由表，把虚拟 IP 重定向到另外一台正常的 LVS 服务器，从而达到 LVS 服务器高可用的效果。</p>
<p>此处需要注意的是，上图中从 Nginx 层到 Tomcat 层这样画并不代表全部 Nginx 都转发请求到全部的 Tomcat，在实际使用时，可能会是几个 Nginx 下面接一部分的 Tomcat，这些 Nginx 之间通过 keepalived 实现高可用，其他的 Nginx 接另外的 Tomcat，这样可接入的 Tomcat 数量就能成倍的增加。</p>
<blockquote>
<p>由于 LVS 也是单机的，随着并发数增长到几十万时，LVS 服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同</p>
</blockquote>
<h3 id="39-第八次演进通过-dns-轮询实现机房间的负载均衡" class="headerLink">
    <a href="#39-%e7%ac%ac%e5%85%ab%e6%ac%a1%e6%bc%94%e8%bf%9b%e9%80%9a%e8%bf%87-dns-%e8%bd%ae%e8%af%a2%e5%ae%9e%e7%8e%b0%e6%9c%ba%e6%88%bf%e9%97%b4%e7%9a%84%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1" class="header-mark"></a>3.9 第八次演进：通过 DNS 轮询实现机房间的负载均衡</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/460349470a99405eb838823aa29cbe27.png" title="第八次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/460349470a99405eb838823aa29cbe27.png" data-sub-html="<h2>第八次演进</h2><p>第八次演进</p>">
        
    </a><figcaption class="image-caption">第八次演进</figcaption>
    </figure></p>
<p>在 DNS 服务器中可配置一个域名对应多个 IP 地址，每个 IP 地址对应到不同的机房里的虚拟 IP。当用户访问 <code>www.taobao.com</code> 时，DNS 服务器会使用轮询策略或其他策略，来选择某个 IP 供用户访问。此方式能实现机房间的负载均衡，至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。</p>
<blockquote>
<p>随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求</p>
</blockquote>
<h3 id="310-第九次演进引入-nosql-数据库和搜索引擎等技术" class="headerLink">
    <a href="#310-%e7%ac%ac%e4%b9%9d%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%bc%95%e5%85%a5-nosql-%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e6%90%9c%e7%b4%a2%e5%bc%95%e6%93%8e%e7%ad%89%e6%8a%80%e6%9c%af" class="header-mark"></a>3.10 第九次演进：引入 NoSQL 数据库和搜索引擎等技术</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/4431084b90e14e95bad5a0beb93e9196.png" title="第九次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/4431084b90e14e95bad5a0beb93e9196.png" data-sub-html="<h2>第九次演进</h2><p>第九次演进</p>">
        
    </a><figcaption class="image-caption">第九次演进</figcaption>
    </figure></p>
<p>当数据库中的数据多到一定规模时，数据库就不适用于复杂的查询了，往往只能满足普通查询的场景。对于统计报表场景，在数据量大时不一定能跑出结果，而且在跑复杂查询时会导致其他查询变慢，对于全文检索、可变数据结构等场景，数据库天生不适用。因此需要针对特定的场景，引入合适的解决方案。如对于海量文件存储，可通过分布式文件系统 HDFS 解决，对于 key value 类型的数据，可通过 HBase 和 Redis 等方案解决，对于全文检索场景，可通过搜索引擎如 ElasticSearch 解决，对于多维分析场景，可通过 Kylin 或 Druid 等方案解决。</p>
<p>当然，引入更多组件同时会提高系统的复杂度，不同的组件保存的数据需要同步，需要考虑一致性的问题，需要有更多的运维手段来管理这些组件等。</p>
<blockquote>
<p>引入更多组件解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，业务的升级迭代变得困难</p>
</blockquote>
<h3 id="311-第十次演进大应用拆分为小应用" class="headerLink">
    <a href="#311-%e7%ac%ac%e5%8d%81%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%a4%a7%e5%ba%94%e7%94%a8%e6%8b%86%e5%88%86%e4%b8%ba%e5%b0%8f%e5%ba%94%e7%94%a8" class="header-mark"></a>3.11 第十次演进：大应用拆分为小应用</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/8cb5f4af10c54384bcda7ac1a19bdaba.png" title="第十次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/8cb5f4af10c54384bcda7ac1a19bdaba.png" data-sub-html="<h2>第十次演进</h2><p>第十次演进</p>">
        
    </a><figcaption class="image-caption">第十次演进</figcaption>
    </figure></p>
<p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心 Zookeeper 来解决。</p>
<blockquote>
<p>不同应用之间存在共用的模块，由应用单独管理会导致相同代码存在多份，导致公共功能升级时全部应用代码都要跟着升级</p>
</blockquote>
<h3 id="312-第十一次演进复用的功能抽离成微服务" class="headerLink">
    <a href="#312-%e7%ac%ac%e5%8d%81%e4%b8%80%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%a4%8d%e7%94%a8%e7%9a%84%e5%8a%9f%e8%83%bd%e6%8a%bd%e7%a6%bb%e6%88%90%e5%be%ae%e6%9c%8d%e5%8a%a1" class="header-mark"></a>3.12 第十一次演进：复用的功能抽离成微服务</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/542da2f0e6704dd2bc537098708aedcc.png" title="第十一次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/542da2f0e6704dd2bc537098708aedcc.png" data-sub-html="<h2>第十一次演进</h2><p>第十一次演进</p>">
        
    </a><figcaption class="image-caption">第十一次演进</figcaption>
    </figure></p>
<p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理，这样的服务就是所谓的微服务，应用和服务之间通过 HTTP、TCP 或 RPC 请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理。此外，可以通过 Dubbo、SpringCloud 等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。</p>
<blockquote>
<p>不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，调用链将会变得非常复杂，逻辑变得混乱</p>
</blockquote>
<h3 id="313-第十二次演进引入企业服务总线-esb-屏蔽服务接口的访问差异" class="headerLink">
    <a href="#313-%e7%ac%ac%e5%8d%81%e4%ba%8c%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%bc%95%e5%85%a5%e4%bc%81%e4%b8%9a%e6%9c%8d%e5%8a%a1%e6%80%bb%e7%ba%bf-esb-%e5%b1%8f%e8%94%bd%e6%9c%8d%e5%8a%a1%e6%8e%a5%e5%8f%a3%e7%9a%84%e8%ae%bf%e9%97%ae%e5%b7%ae%e5%bc%82" class="header-mark"></a>3.13 第十二次演进：引入企业服务总线 ESB 屏蔽服务接口的访问差异</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/a2f54a652b6141f88fc441a97e8dea97.png" title="第十二次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/a2f54a652b6141f88fc441a97e8dea97.png" data-sub-html="<h2>第十二次演进</h2><p>第十二次演进</p>">
        
    </a><figcaption class="image-caption">第十二次演进</figcaption>
    </figure></p>
<p>通过 ESB 统一进行访问协议转换，应用统一通过 ESB 来访问后端服务，服务与服务之间也通过 ESB 来相互调用，以此降低系统的耦合程度。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的
<strong><ruby>SOA<rt>Service-Oriented Architecture</rt></ruby></strong>（面向服务）架构，这种架构与微服务架构容易混淆，因为表现形式十分相似。</p>
<p>个人理解，微服务架构更多是指把系统里的公共服务抽取出来单独运维管理的思想，而 SOA 架构则是指一种拆分服务并使服务接口访问变得统一的架构思想，SOA 架构中包含了微服务的思想。</p>
<blockquote>
<p>业务不断发展，应用和服务都会不断变多，应用和服务的部署变得复杂，同一台服务器上部署多个服务还要解决运行环境冲突的问题，
此外，对于如大促这类需要动态扩缩容的场景，需要水平扩展服务的性能，就需要在新增的服务上准备运行环境，部署服务等，运维将变得十分困难</p>
</blockquote>
<h3 id="314-第十三次演进引入容器化技术实现运行环境隔离与动态服务管理" class="headerLink">
    <a href="#314-%e7%ac%ac%e5%8d%81%e4%b8%89%e6%ac%a1%e6%bc%94%e8%bf%9b%e5%bc%95%e5%85%a5%e5%ae%b9%e5%99%a8%e5%8c%96%e6%8a%80%e6%9c%af%e5%ae%9e%e7%8e%b0%e8%bf%90%e8%a1%8c%e7%8e%af%e5%a2%83%e9%9a%94%e7%a6%bb%e4%b8%8e%e5%8a%a8%e6%80%81%e6%9c%8d%e5%8a%a1%e7%ae%a1%e7%90%86" class="header-mark"></a>3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/ebae2b361aaa4d00a266279ffb59f28e.png" title="第十三次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/ebae2b361aaa4d00a266279ffb59f28e.png" data-sub-html="<h2>第十三次演进</h2><p>第十三次演进</p>">
        
    </a><figcaption class="image-caption">第十三次演进</figcaption>
    </figure></p>
<p>目前最流行的容器化技术是 Docker，最流行的容器管理服务是 Kubernetes(K8S)，应用/服务可以打包为 Docker 镜像，通过 K8S 来动态分发和部署镜像。Docker 镜像可理解为一个能运行你的应用/服务的最小的操作系统，里面放着应用/服务的运行代码，运行环境根据实际的需要设置好。把整个“操作系统”打包为一个镜像后，就可以分发到需要部署相关服务的机器上，直接启动 Docker 镜像就可以把服务起起来，使服务的部署和运维变得简单。</p>
<p>在大促的之前，可以在现有的机器集群上划分出服务器来启动 Docker 镜像，增强服务的性能，大促过后就可以关闭镜像，对机器上的其他服务不造成影响（在 3.14 节之前，服务运行在新增机器上需要修改系统配置来适配服务，这会导致机器上其他服务需要的运行环境被破坏）。</p>
<blockquote>
<p>使用容器化技术后服务动态扩缩容问题得以解决，但是机器还是需要公司自身来管理，在非大促的时候，还是需要闲置着大量的机器资源来应对大促，机器自身成本和运维成本都极高，资源利用率低</p>
</blockquote>
<h3 id="315-第十四次演进以云平台承载系统" class="headerLink">
    <a href="#315-%e7%ac%ac%e5%8d%81%e5%9b%9b%e6%ac%a1%e6%bc%94%e8%bf%9b%e4%bb%a5%e4%ba%91%e5%b9%b3%e5%8f%b0%e6%89%bf%e8%bd%bd%e7%b3%bb%e7%bb%9f" class="header-mark"></a>3.15 第十四次演进：以云平台承载系统</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/9c8cba63d6594fa19726b0b0c97fe17d.png" title="第十四次演进" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220830/9c8cba63d6594fa19726b0b0c97fe17d.png" data-sub-html="<h2>第十四次演进</h2><p>第十四次演进</p>">
        
    </a><figcaption class="image-caption">第十四次演进</figcaption>
    </figure></p>
<p>系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题，在大促的时间段里，在云平台中临时申请更多的资源，结合 Docker 和 K8S 来快速部署服务，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。</p>
<p>所谓的云平台，就是把海量机器资源，通过统一的资源管理，抽象为一个资源整体，在之上可按需动态申请硬件资源（如 CPU、内存、网络等），并且之上提供通用的操作系统，提供常用的技术组件（如 Hadoop 技术栈，MPP 数据库等）供用户使用，甚至提供开发好的应用，用户不需要关系应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。在云平台中会涉及如下几个概念：</p>
<ul>
<li>
<p><strong>IaaS</strong>基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</p>
</li>
<li>
<p><strong>PaaS</strong>平台即服务。对应于上面所说的提供常用的技术组件方便系统的开发和维护；</p>
</li>
<li>
<p><strong>SaaS</strong>软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</p>
</li>
</ul>
<blockquote>
<p>至此，以上所提到的从高并发访问问题，到服务的架构和系统实施的层面都有了各自的解决方案，但同时也应该意识到，在上面的介绍中，其实是有意忽略了诸如跨机房数据同步、分布式事务实现等等的实际问题，这些问题以后有机会再拿出来单独讨论</p>
</blockquote>
<h2 id="4-架构设计总结" class="headerLink">
    <a href="#4-%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1%e6%80%bb%e7%bb%93" class="header-mark"></a>4. 架构设计总结</h2><ul>
<li><strong>架构的调整是否必须按照上述演变路径进行？</strong></li>
</ul>
<p>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进，在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p>
<ul>
<li><strong>对于将要实施的系统，架构应该设计到什么程度？</strong></li>
</ul>
<p>对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。</p>
<ul>
<li><strong>服务端架构和大数据架构有什么区别</strong>?</li>
</ul>
<p>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术，如数据采集有 Flume、Sqoop、Kettle 等，数据存储有分布式文件系统 HDFS、FastDFS，NoSQL 数据库 HBase、MongoDB 等，数据分析有 Spark 技术栈、机器学习算法等。总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。</p>
<ul>
<li>
<p><strong>有没有一些架构设计的原则？</strong></p>
<ul>
<li>
<p>N+1 设计。系统中的每个组件都应做到没有单点故障；</p>
</li>
<li>
<p>回滚设计。确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</p>
</li>
<li>
<p>禁用设计。应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</p>
</li>
<li>
<p>监控设计。在设计阶段就要考虑监控的手段；</p>
</li>
<li>
<p>多活数据中心设计。若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</p>
</li>
<li>
<p>采用成熟的技术。刚开发的或开源的技术往往存在很多隐藏的 bug，出了问题没有商业支持可能会是一个灾难；</p>
</li>
<li>
<p>资源隔离设计。应避免单一业务占用全部资源；</p>
</li>
<li>
<p>架构应能水平扩展。系统只有做到能水平扩展，才能有效避免瓶颈问题；</p>
</li>
<li>
<p>非核心则购买。非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</p>
</li>
<li>
<p>使用商用硬件。商用硬件能有效降低硬件故障的机率；</p>
</li>
<li>
<p>快速迭代。系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</p>
</li>
<li>
<p>无状态设计。服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</p>
</li>
</ul>
</li>
</ul>
]]></description>
</item><item>
    <title>Chrome 浏览器使用备忘</title>
    <link>https://www.xiaobinqt.cn/chrome-use/</link>
    <pubDate>Tue, 03 May 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/chrome-use/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="volume-control" class="headerLink">
    <a href="#volume-control" class="header-mark"></a>Volume Control</h2><p>刚在使用蓝牙时，发现一看视频，电脑左上角屏幕就出现了音量块，类似这样：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230710/1c7725ac551d4b98a7857468b5e58e57.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230710/1c7725ac551d4b98a7857468b5e58e57.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230710/1c7725ac551d4b98a7857468b5e58e57.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>voice</h2>">
        
    </a><figcaption class="image-caption">voice</figcaption>
    </figure></p>
<p>解决方式可以参考：</p>
<ul>
<li><a href="https://winbuzzer.com/2021/06/16/how-to-enable-or-disable-chrome-volume-control-and-hardware-media-key-handling-xcxwbt/" target="_blank" rel="noopener noreferrer">How to Enable or Disable Chrome Volume Control and Hardware Media Key Handling</a></li>
</ul>
]]></description>
</item><item>
    <title>Redis 缓存击穿、缓存穿透、缓存雪崩</title>
    <link>https://www.xiaobinqt.cn/redis-break-pierce-avalanche/</link>
    <pubDate>Wed, 13 Apr 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/redis-break-pierce-avalanche/</guid>
    <description><![CDATA[<h2 id="缓存击穿" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e5%87%bb%e7%a9%bf" class="header-mark"></a>缓存击穿</h2><p>高并发流量，访问的这个数据是热点数据，请求的数据在 DB 中存在，但是 Redis 存的那一份已经过期，后端需要从 DB 从加载数据并写到 Redis。</p>
<p>总结起来就是：单一热点数据、高并发、数据失效。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/10c8c8557c8b41ea967c82617bef1814.png" title="缓存击穿" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/10c8c8557c8b41ea967c82617bef1814.png" data-sub-html="<h2>缓存击穿</h2><p>缓存击穿</p>">
        
    </a><figcaption class="image-caption">缓存击穿</figcaption>
    </figure></p>
<h3 id="解决方案" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>解决方案</h3><h4 id="过期时间随机值" class="headerLink">
    <a href="#%e8%bf%87%e6%9c%9f%e6%97%b6%e9%97%b4%e9%9a%8f%e6%9c%ba%e5%80%bc" class="header-mark"></a>过期时间➕随机值</h4><p>对于热点数据，我们不设置过期时间，这样就可以把请求都放在缓存中处理，充分把 Redis 高吞吐量性能利用起来。或者过期时间再加一个随机值。</p>
<p>设计缓存的过期时间时，使用公式：<strong>过期时间 = baes 时间 + 随机时间</strong>。</p>
<p>即相同业务数据写缓存时，在基础过期时间之上，再加一个随机的过期时间，让数据在未来一段时间内慢慢过期，避免瞬时全部过期，对 DB 造成过大压力。</p>
<h4 id="预热" class="headerLink">
    <a href="#%e9%a2%84%e7%83%ad" class="header-mark"></a>预热</h4><p>预先把热门数据提前存入 Redis 中，并设热门数据的过期时间超大值。</p>
<h4 id="使用锁" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e9%94%81" class="header-mark"></a>使用锁</h4><p>当发现缓存失效的时候，不是立即从数据库加载数据。</p>
<p>而是先获取分布式锁，获取锁成功才执行数据库查询和写数据到缓存的操作，获取锁失败，则说明当前有线程在执行数据库查询操作，当前线程睡眠一段时间再重试。这样只让一个请求去数据库读取数据。</p>
<h2 id="缓存穿透" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e7%a9%bf%e9%80%8f" class="header-mark"></a>缓存穿透</h2><p>数据库本就没有这个数据，请求直奔数据库，缓存系统形同虚设。</p>
<p>大量请求的 key 根本<font color="red"><strong>不存在于缓存中也不存在数据库</strong></font>，导致请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成压力而影响正常服务。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/19352698c9c047d4a635c3e561b8293b.png" title="缓存穿透" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/19352698c9c047d4a635c3e561b8293b.png" data-sub-html="<h2>缓存穿透</h2><p>缓存穿透</p>">
        
    </a><figcaption class="image-caption">缓存穿透</figcaption>
    </figure></p>
<h3 id="解决方案-1" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88-1" class="header-mark"></a>解决方案</h3><p>最基本的首先就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</p>
<h4 id="缓存无效的-key" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e6%97%a0%e6%95%88%e7%9a%84-key" class="header-mark"></a>缓存无效的 key</h4><p>如果<strong>缓存和数据库都查不到</strong>
某个 key 的数据就写一个到 Redis 中去并设置过期时间。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，应该尽量将无效的 key 的过期时间设置短一点比如 1 分钟。</p>
<h4 id="布隆过滤器" class="headerLink">
    <a href="#%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8" class="header-mark"></a>布隆过滤器</h4><p>布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地<strong>判断一个给定数据是否存在于海量数据中</strong>。我们需要的仅仅就是判断 key 是否合法。</p>
<p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话再走其他的判断流程。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220407/c81922434bf5420c94e349e07980054b.png" title="布隆过滤器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220407/c81922434bf5420c94e349e07980054b.png" data-sub-html="<h2>布隆过滤器</h2><p>布隆过滤器</p>">
        
    </a><figcaption class="image-caption">布隆过滤器</figcaption>
    </figure></p>
<p>需要注意的是布隆过滤器可能会存在误判的情况。</p>
<p><strong>布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，这个元素一定不在</strong>。</p>
<p>这是因为，当一个元素加入布隆过滤器中的时候，会进行如下操作：</p>
<ol>
<li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li>
<li>根据得到的哈希值，在数组中把对应下标的值置为 1。</li>
</ol>
<p>当需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</p>
<ol>
<li>对给定元素再次进行相同的哈希计算；</li>
<li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li>
</ol>
<p>然而，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。我们可以适当增加位数组大小或者调整我们的哈希函数来降低概率。</p>
<h2 id="缓存雪崩" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e9%9b%aa%e5%b4%a9" class="header-mark"></a>缓存雪崩</h2><p>缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。或是有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。</p>
<p>而出现该原因主要有两种：</p>
<ul>
<li>大量热点数据同时过期，导致大量请求需要查询数据库并写到缓存。</li>
<li>Redis 故障宕机，缓存系统异常。</li>
</ul>
<h3 id="缓存大量数据同时过期" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e5%a4%a7%e9%87%8f%e6%95%b0%e6%8d%ae%e5%90%8c%e6%97%b6%e8%bf%87%e6%9c%9f" class="header-mark"></a>缓存大量数据同时过期</h3><p>数据保存在缓存系统并设置了过期时间，但是由于在同时一刻，大量数据同时过期。系统就把请求全部打到数据库获取数据，并发量大的话就会导致数据库压力激增。</p>
<p><font color="red"><strong>缓存雪崩是发生在大量数据同时失效的场景，而缓存击穿是在某个热点数据失效的场景，这是他们最大的区别</strong>
</font>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/12a33b5773ef4e36be2c71a94b93df11.png" title="缓存大量数据同时过期" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/12a33b5773ef4e36be2c71a94b93df11.png" data-sub-html="<h2>缓存大量数据同时过期</h2><p>缓存大量数据同时过期</p>">
        
    </a><figcaption class="image-caption">缓存大量数据同时过期</figcaption>
    </figure></p>
<h4 id="过期时间添加随机值" class="headerLink">
    <a href="#%e8%bf%87%e6%9c%9f%e6%97%b6%e9%97%b4%e6%b7%bb%e5%8a%a0%e9%9a%8f%e6%9c%ba%e5%80%bc" class="header-mark"></a>过期时间添加随机值</h4><p>要避免给大量的数据设置一样的过期时间，过期时间 = baes 时间+ 随机时间（较小的随机数，比如随机增加 1~5 分钟）。</p>
<p>这样一来，就不会导致同一时刻热点数据全部失效，同时过期时间差别也不会太大，既保证了相近时间失效，又能满足业务需求。</p>
<h4 id="接口限流" class="headerLink">
    <a href="#%e6%8e%a5%e5%8f%a3%e9%99%90%e6%b5%81" class="header-mark"></a>接口限流</h4><p>当访问的不是核心数据的时候，在查询的方法上加上接口限流保护。比如设置 10000 req/s。如果访问的是核心数据接口，缓存不存在允许从数据库中查询并设置到缓存中。这样的话，只有部分请求会发送到数据库，减少了压力。</p>
<p><strong>限流，就是指，我们在业务系统的请求入口前端控制每秒进入系统的请求数，避免过多的请求被发送到数据库</strong>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/340401972fac48f391fa6906a9444eac.png" title="限流" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220413/340401972fac48f391fa6906a9444eac.png" data-sub-html="<h2>限流</h2><p>限流</p>">
        
    </a><figcaption class="image-caption">限流</figcaption>
    </figure></p>
<h3 id="redis-故障" class="headerLink">
    <a href="#redis-%e6%95%85%e9%9a%9c" class="header-mark"></a>Redis 故障</h3><p>一旦 Redis 故障或宕机，会导致大量请求打到数据库，从而发生缓存雪崩。对于 Redis 故障，主要有以下两种解决方案。</p>
<h4 id="服务熔断和限流" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e7%86%94%e6%96%ad%e5%92%8c%e9%99%90%e6%b5%81" class="header-mark"></a>服务熔断和限流</h4><p>在业务系统中，针对高并发的使用服务熔断来有损提供服务从而保证系统的可用性。</p>
<p>服务熔断就是当从缓存获取数据发现异常，则直接返回错误数据给前端，防止所有流量打到数据库导致宕机。</p>
<p>服务熔断和限流属于在发生了缓存雪崩，如何<strong>降低雪崩对数据库造成的影响</strong>的方案。</p>
<h4 id="高可用缓存集群" class="headerLink">
    <a href="#%e9%ab%98%e5%8f%af%e7%94%a8%e7%bc%93%e5%ad%98%e9%9b%86%e7%be%a4" class="header-mark"></a>高可用缓存集群</h4><p>缓存系统一定要构建一套 Redis 高可用集群，比如 <a href="" rel="">Redis 哨兵集群 TODO</a> 或者 <a href="" rel="">Redis Cluster 集群 TODO</a>，如果 Redis 的主节点故障宕机了，从节点还可以切换成为主节点，继续提供缓存服务，避免了由于缓存实例宕机而导致的缓存雪崩问题。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><ul>
<li>缓存穿透指的是数据库本就没有这个数据，请求直奔数据库，缓存系统形同虚设。</li>
<li>缓存击穿（失效）指的是数据库有数据，缓存本应该也有数据，但是缓存过期了，Redis 这层流量防护屏障被击穿了，请求直奔数据库。</li>
<li>缓存雪崩指的是大量的热点数据无法在 Redis 缓存中处理（大面积热点数据缓存失效、Redis 宕机），流量全部打到数据库，导致数据库极大压力。</li>
</ul>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247488270&amp;idx=1&amp;sn=03674abcaa78b027bd12aaafd5a2f6e2" target="_blank" rel="noopener noreferrer">Redis 缓存击穿（失效）、缓存穿透、缓存雪崩怎么解决？</a></li>
</ul>
]]></description>
</item></channel>
</rss>
