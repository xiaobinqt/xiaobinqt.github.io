<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>算法与数学 - 分类 - xiaobinqt&#39;s blog</title>
        <link>https://xiaobinqt.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/</link>
        <description>算法与数学 - 分类 - xiaobinqt&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 25 Mar 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xiaobinqt.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/" rel="self" type="application/rss+xml" /><item>
    <title>LeetCode 热题 HOT 100</title>
    <link>https://xiaobinqt.github.io/hot100/</link>
    <pubDate>Fri, 25 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/hot100/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220326/750cc88f8c434944af5eec1c38b02b51.png" referrerpolicy="no-referrer">
            </div>1. 两数之和 题目地址：https://leetcode-cn.com/problems/two-sum/ 解题思路 嵌套遍历数组，外层遍历的值和内]]></description>
</item><item>
    <title>一致性 hash</title>
    <link>https://xiaobinqt.github.io/consistent_hash/</link>
    <pubDate>Sat, 15 Jan 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/consistent_hash/</guid>
    <description><![CDATA[存在的意义 一致性哈希算法解决了普通余数 Hash 算法伸缩性差的问题，可以保证在上线、下线服务器的情况下尽量有多的请求命中原来路由到的服务器。 优化 一致]]></description>
</item><item>
    <title>常见缓存淘汰策略</title>
    <link>https://xiaobinqt.github.io/common_cache_-strategies/</link>
    <pubDate>Thu, 05 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://xiaobinqt.github.io/common_cache_-strategies/</guid>
    <description><![CDATA[常见缓存淘汰策略 FIFO First In First Out(FIFO)，先进先出，也就是淘汰缓存中最老(最早添加)的记录。FIFO 认为，最早添加的记录，其不再被使用的可]]></description>
</item></channel>
</rss>
