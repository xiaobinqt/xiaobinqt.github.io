<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>js - 标签 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/tags/js/</link>
        <description>js - 标签 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 18 Mar 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/tags/js/" rel="self" type="application/rss+xml" /><item>
    <title>JS运行机制</title>
    <link>https://www.xiaobinqt.cn/js-cb-asyn/</link>
    <pubDate>Fri, 18 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/js-cb-asyn/</guid>
    <description><![CDATA[<h2 id="执行模式" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c%e6%a8%a1%e5%bc%8f" class="header-mark"></a>执行模式</h2><p>JS的执行模式是单线程的，当有多个任务时必须排队执行，优点是执行环境简单，缺点是性能低下，当有多个任务时，需要等待上一个任务执行完成才能执行下一个任务， 如果某个任务出现了死循环，那么就会导致程序崩溃。 所以JS出现了同步和异步的概念。</p>
<h3 id="同步" class="headerLink">
    <a href="#%e5%90%8c%e6%ad%a5" class="header-mark"></a>同步</h3><p>后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的。</p>
<h3 id="异步" class="headerLink">
    <a href="#%e5%bc%82%e6%ad%a5" class="header-mark"></a>异步</h3><p>每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序可能是不一致的。</p>
<h2 id="event-loop" class="headerLink">
    <a href="#event-loop" class="header-mark"></a>Event Loop</h2><p>// TODO</p>
<h2 id="promise" class="headerLink">
    <a href="#promise" class="header-mark"></a>Promise</h2><p>Promise 对象代表一个<strong>异步操作</strong>，<code>then()</code> 第一个参数是成功<code>resolve</code>的回调函数，第二个参数是失败<code>reject</code>的回调函数，当不写第二个
<code>then()</code> 参数时，可以用 <code>catch()</code> 捕获 <code>reject</code> 异常。</p>
<h3 id="使用" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8" class="header-mark"></a>使用</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// resolve(&#39;成功&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">reject</span><span class="p">(</span><span class="s2">&#34;失败&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;第一个fn: &#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;第二个 fn: &#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>resolve和reject除了正常的值外，还可能是另一个promise实例。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">resolve</span><span class="p">(</span><span class="nx">p1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">p2</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>用 catch 捕获 reject 异常</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// todo...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">reject</span><span class="p">(</span><span class="mi">111111</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;第一个fn: &#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;err :&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="k">finally</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;finally exec...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="执行顺序" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f" class="header-mark"></a>执行顺序</h3><h2 id="asyncawait的用法和理解" class="headerLink">
    <a href="#asyncawait%e7%9a%84%e7%94%a8%e6%b3%95%e5%92%8c%e7%90%86%e8%a7%a3" class="header-mark"></a>async/await的用法和理解</h2><p>async 函数是非常新的语法功能，在 ES7 中可用。</p>
<p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。await 作为修饰符，只能放在 async 内部使用。 当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>
<p>await 等待右侧表达式的结果。 如果等到的不是一个 promise 对象，那 await 表达式的运算结果就是它等到的东西。 如果它等到的是一个 promise 对象，它会阻塞后面的代码，等着 promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;test&#34;</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="kr">await</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">ret</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">test1Ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">test1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test1Ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;test end...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">test1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;test1_return&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220321/370858b72be740ddabd37996d1ada207.png?imageView2/0/interlace/1/q/50%7cimageslim" title="运行结果" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220321/370858b72be740ddabd37996d1ada207.png?imageView2/0/interlace/1/q/50|imageslim" data-sub-html="<h2> </h2><p>运行结果</p>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<h2 id="宏任务和微任务" class="headerLink">
    <a href="#%e5%ae%8f%e4%bb%bb%e5%8a%a1%e5%92%8c%e5%be%ae%e4%bb%bb%e5%8a%a1" class="header-mark"></a>宏任务和微任务</h2><p>// TODO</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener noreferrer">Javascript异步编程的4种方法</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener noreferrer">JavaScript 运行机制详解：再谈Event Loop</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener noreferrer">async 函数的含义和用法</a></li>
<li><a href="https://www.jianshu.com/p/b16e7c9e1f9f" target="_blank" rel="noopener noreferrer">JS执行——Promise</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI4OTc3NDgzNQ==&amp;mid=2247484695&amp;idx=1&amp;sn=57b4e00a6929784ae9c5026cc71f46ef" target="_blank" rel="noopener noreferrer">你真的了解回调?</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI4OTc3NDgzNQ==&amp;mid=2247484700&amp;idx=1&amp;sn=0a840596519263dd8baa1e4a0f265151" target="_blank" rel="noopener noreferrer">回调地狱</a></li>
<li><a href="https://blog.csdn.net/namechenfl/article/details/99623700" target="_blank" rel="noopener noreferrer">js中微任务和宏任务的区别</a></li>
<li><a href="https://www.jb51.net/article/250696.htm" target="_blank" rel="noopener noreferrer">Javascript单线程和事件循环</a></li>
</ul>
]]></description>
</item><item>
    <title>nodeJS 调用 C 语言</title>
    <link>https://www.xiaobinqt.cn/js-call-c/</link>
    <pubDate>Thu, 18 Nov 2021 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/js-call-c/</guid>
    <description><![CDATA[<p>最近在 node 项目开发中，有个需求是 nodeJS 需要支持调用 C 语言的函数，<a href="https://www.npmjs.com/package/node-addon-api" target="_blank" rel="noopener noreferrer">node-addon-api</a> 可以支持这个需求。</p>
<h2 id="开发环境" class="headerLink">
    <a href="#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83" class="header-mark"></a>开发环境</h2><p>我用的开发环境 docker 起的 code-server 环境，code-server
版本为 <a href="https://hub.docker.com/r/linuxserver/code-server/tags?page=1&amp;name=3.11.1" target="_blank" rel="noopener noreferrer">code-server:version-v3.11.1</a> 。可以把
code-server 理解成一个在线 vscode 环境，就像 github 的在线 web 编辑器一样。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl">docker pull linuxserver/code-server:version-v3.11.1<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/9a6234c147f34cfe86d67b72902aa1cf.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="code-server" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/9a6234c147f34cfe86d67b72902aa1cf.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>code-server</h2><p>code-server</p>">
        
    </a><figcaption class="image-caption">code-server</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/1452c3a995af4dd480963de599766c73.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="github web 编辑器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/1452c3a995af4dd480963de599766c73.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>github web 编辑器</h2><p>github web 编辑器</p>">
        
    </a><figcaption class="image-caption">github web 编辑器</figcaption>
    </figure></p>
<h2 id="加法器示例" class="headerLink">
    <a href="#%e5%8a%a0%e6%b3%95%e5%99%a8%e7%a4%ba%e4%be%8b" class="header-mark"></a>加法器示例</h2><p>开发环境搭建成功后，可以实现一个小功能，以熟悉 node-addon-api 的使用。</p>
<p>现在实现一个加法器，JS 调用 C 语言的 add 方法，传入 2 个参数，C 语言累加后返回结果。</p>
<h3 id="项目初始化" class="headerLink">
    <a href="#%e9%a1%b9%e7%9b%ae%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>项目初始化</h3><p>创建项目并进行 <code>npm init</code> 初始化：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/f3f108e8c5664b1390766008751decb0.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="创建项目并初始化" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/f3f108e8c5664b1390766008751decb0.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>创建项目并初始化</h2><p>创建项目并初始化</p>">
        
    </a><figcaption class="image-caption">创建项目并初始化</figcaption>
    </figure></p>
<p>安装 node-addon-api：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npm i node-addon-api
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/eecca630b11b49bf840351bd5c6dfe06.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="安装 npm 依赖包" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/eecca630b11b49bf840351bd5c6dfe06.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>安装 npm 依赖包</h2><p>安装 npm 依赖包</p>">
        
    </a><figcaption class="image-caption">安装 npm 依赖包</figcaption>
    </figure></p>
<h3 id="c-代码" class="headerLink">
    <a href="#c-%e4%bb%a3%e7%a0%81" class="header-mark"></a>c 代码</h3><p>新建一个 cal.cc 文件，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;napi.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 定义一个 Add() 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">Add</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> <span class="c1">// 获取 js 上下文信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="nf">Length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Napi</span><span class="o">::</span><span class="n">TypeError</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;Wrong number of arguments&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nf">ThrowAsJavaScriptException</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">Null</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">IsNumber</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">info</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">IsNumber</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Napi</span><span class="o">::</span><span class="n">TypeError</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;Wrong arguments&#34;</span><span class="p">).</span><span class="nf">ThrowAsJavaScriptException</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">Null</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg0</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">Int32Value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg1</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">Int32Value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg2</span> <span class="o">=</span> <span class="n">arg0</span> <span class="o">+</span> <span class="n">arg1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Number</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">arg2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 导出函数，可使用 exports.Set() 导出多个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Napi</span><span class="o">::</span><span class="n">Object</span> <span class="nf">Init</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span><span class="p">,</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Object</span> <span class="n">exports</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;add&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">Add</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">exports</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">NODE_API_MODULE</span><span class="p">(</span><span class="n">addon</span><span class="p">,</span> <span class="n">Init</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bindinggyp" class="headerLink">
    <a href="#bindinggyp" class="header-mark"></a>binding.gyp</h3><p>编译带第三方扩展库的 c/c++ 程序，通常需要在编译时指定额外的头文件包含路径和链接第三方库，这些都是在 binding.gyp 文件中指定的，这些指定在 nodeJS 自动编译的时候，会解析并应用在命令行的编译工具中。</p>
<p>新建一个 binding.gyp 文件，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;targets&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;target_name&#34;</span><span class="p">:</span> <span class="s2">&#34;test&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;cal.cc&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;include_dirs&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&lt;!@(node -p \&#34;require(&#39;node-addon-api&#39;).include\&#34;)&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;libraries&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&lt;!(node -p \&#34;require(&#39;node-addon-api&#39;).gyp\&#34;)&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;cflags!&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-fno-exceptions&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;cflags_cc!&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;-fno-exceptions&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;defines&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;NAPI_CPP_EXCEPTIONS&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;xcode_settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;GCC_ENABLE_CPP_EXCEPTIONS&#34;</span><span class="p">:</span> <span class="s2">&#34;YES&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>target_name</code> 指定了编译之后模块的名称。</li>
<li><code>sources</code> 指明 c/c++ 的源文件，如果有多个文件，需要用逗号隔开，放到同一个数组中。</li>
<li><code>include_dirs</code> 是编译时使用的头文件引入路径，这里使用 <code>node -p</code> 执行 node-addon-api 模块中的预置变量。</li>
<li><code>dependencies</code> 是必须的，一般不要改变。</li>
<li><code>cflags!</code>，<code>cflags_cc!</code>，<code>defines</code> 三行指定如果c++程序碰到意外错误的时候，由 NAPI 接口来处理，而不是通常的由 c/c++ 程序自己处理。这防止因为 c/c++
部分程序碰到意外直接就退出了程序，而是由 nodeJS 程序来捕获处理，如果是在Linux中编译使用，有这三行就够了。</li>
</ul>
<h3 id="编译调用" class="headerLink">
    <a href="#%e7%bc%96%e8%af%91%e8%b0%83%e7%94%a8" class="header-mark"></a>编译调用</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/04a96bb9ac254b30a65ffa2939134d05.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="编译" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/04a96bb9ac254b30a65ffa2939134d05.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>编译</h2><p>编译</p>">
        
    </a><figcaption class="image-caption">编译</figcaption>
    </figure></p>
<blockquote>
<p>每次修改代码后都需要执行 <code>npm i</code> 重新编译</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npm i 
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译后，进入 nodeJS 中可以直接 require 调用。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/0eac8fccb7334cb5bbde15a5bd25c573.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="调用" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/0eac8fccb7334cb5bbde15a5bd25c573.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>调用</h2><p>调用</p>">
        
    </a><figcaption class="image-caption">调用</figcaption>
    </figure></p>
<p>这里 require 的 <code>test.node</code>，<code>.node</code> 后缀是固定的，<code>test</code> 就是 binding.gyp 文件里 <code>target_name</code> 的值。</p>
<p><code>1+3=4</code> 从调用结果来看，符合预期。</p>
<h3 id="bindings-包" class="headerLink">
    <a href="#bindings-%e5%8c%85" class="header-mark"></a>bindings 包</h3><p>现在我们 require 编译后的 node 需要这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./build/Release/nodecamera.node&#39;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以用 <code>bindings</code> 包简化 require 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npm i bindings --save
</span></span></code></pre></td></tr></table>
</div>
</div><p>通估&#x1f446;命令安装 <code>bindings</code> 包。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/518e631de25144c0a7558b36a50c4375.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="bindings 包使用" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/518e631de25144c0a7558b36a50c4375.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>bindings 包使用</h2><p>bindings 包使用</p>">
        
    </a><figcaption class="image-caption">bindings 包使用</figcaption>
    </figure></p>
<p>所以以上示例简化后的 require 为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">addon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bindings&#39;</span><span class="p">)(</span><span class="s1">&#39;test.node&#39;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="常见数据类型转换" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2" class="header-mark"></a>常见数据类型转换</h2><p>JS 与 C 的数据类型有较大差别，比如 C 中没有字符串的概念，只有字节数组等。node-addon-api 可以很好的支持 JS 与 C 数据类型的转换。</p>
<h3 id="字符串" class="headerLink">
    <a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2" class="header-mark"></a>字符串</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">ToString</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/bd714b564556421b83480d47b7c00c9e.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="字符串转换示例" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/bd714b564556421b83480d47b7c00c9e.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>字符串转换示例</h2><p>字符串转换示例</p>">
        
    </a><figcaption class="image-caption">字符串转换示例</figcaption>
    </figure></p>
<h3 id="arraybuffer" class="headerLink">
    <a href="#arraybuffer" class="header-mark"></a>ArrayBuffer</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span> <span class="nf">ABuffer</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="kt">int8_t</span> <span class="n">num</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">88</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">num</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/d6d3e0a559f14e7db556152c7e165a33.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="ArrayBuffer 示例" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/d6d3e0a559f14e7db556152c7e165a33.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>ArrayBuffer 示例</h2><p>ArrayBuffer 示例</p>">
        
    </a><figcaption class="image-caption">ArrayBuffer 示例</figcaption>
    </figure></p>
<h3 id="数组" class="headerLink">
    <a href="#%e6%95%b0%e7%bb%84" class="header-mark"></a>数组</h3><p>JS 将数组作为 C 函数参数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">ArrayArg</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Array</span> <span class="n">b</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Array</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="nf">Length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="n">v</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">IsString</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">)</span><span class="n">v</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/a5e1c3db4491444394f51cbee383df45.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="编译可能有 warning" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/a5e1c3db4491444394f51cbee383df45.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>编译可能有 warning</h2><p>编译可能有 warning</p>">
        
    </a><figcaption class="image-caption">编译可能有 warning</figcaption>
    </figure></p>
<p>编译时可能有 warning，但是不影响。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/3a4b15094092464b8608c0d3f8bdda85.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="数组参数" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/3a4b15094092464b8608c0d3f8bdda85.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>数组参数</h2><p>数组参数</p>">
        
    </a><figcaption class="image-caption">数组参数</figcaption>
    </figure></p>
<h2 id="faq" class="headerLink">
    <a href="#faq" class="header-mark"></a>FAQ</h2><h3 id="持久化函数" class="headerLink">
    <a href="#%e6%8c%81%e4%b9%85%e5%8c%96%e5%87%bd%e6%95%b0" class="header-mark"></a>持久化函数</h3><p>这个功能可以理解成在 C 的内存空间中有一个 JS 的函数对象且在生命周期内不会被 C 垃圾回收，可以直接在 C 中调用这个 JS 函数。</p>
<p>以下示例，C 提供了 debug 函数，但是参数是一个函数，这个函数会持久在 C 的内存中，在 C 的 Str 函数中用 Call 来调用这个函数并传入对应的参数。</p>
<p>js-call-c-demo.js</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">addon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bindings&#39;</span><span class="p">)(</span><span class="s1">&#39;test.node&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 调用 c 中的 debug 函数，将函数注入到 c 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">addon</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">msg</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;debug console, c 中传入的 msg 需要打印的参数值为：&#34;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 调用 c 的 str 函数，在 str 函数中会调用 debug 函数中的 console.log()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;str 函数的返回值为: &#34;</span><span class="p">,</span> <span class="nx">addon</span><span class="p">.</span><span class="nx">str</span><span class="p">(</span><span class="s2">&#34;xiaobinqt&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>cal.cc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;napi.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">FunctionReference</span> <span class="n">Debug</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">napi_env</span> <span class="n">DebugEnv</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">DebugFun</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="n">Debug</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="nf">Persistent</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">&gt;</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="n">DebugEnv</span> <span class="o">=</span> <span class="n">env</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="s">&#34;OK&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">Str</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">ToString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 调用 Debug 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Debug</span><span class="p">.</span><span class="nf">Call</span><span class="p">({</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">DebugEnv</span><span class="p">,</span><span class="s">&#34;我是一个测试 debug&#34;</span><span class="p">)});</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义一个 Add() 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">Add</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> <span class="c1">// 获取 js 上下文信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="nf">Length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Napi</span><span class="o">::</span><span class="n">TypeError</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;Wrong number of arguments&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="nf">ThrowAsJavaScriptException</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">Null</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">IsNumber</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">info</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">IsNumber</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Napi</span><span class="o">::</span><span class="n">TypeError</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;Wrong arguments&#34;</span><span class="p">).</span><span class="nf">ThrowAsJavaScriptException</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">Null</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg0</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">Int32Value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg1</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span><span class="p">().</span><span class="nf">Int32Value</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">arg2</span> <span class="o">=</span> <span class="n">arg0</span> <span class="o">+</span> <span class="n">arg1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Number</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Number</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">arg2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span> <span class="nf">ABuffer</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="kt">int8_t</span> <span class="n">num</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">88</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Napi</span><span class="o">::</span><span class="n">ArrayBuffer</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">num</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="nf">ArrayArg</span><span class="p">(</span><span class="k">const</span> <span class="n">Napi</span><span class="o">::</span><span class="n">CallbackInfo</span><span class="o">&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="nf">Env</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">  <span class="n">Napi</span><span class="o">::</span><span class="n">Array</span> <span class="n">b</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">Array</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="nf">Length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Napi</span><span class="o">::</span><span class="n">Value</span> <span class="n">v</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">IsString</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">)</span><span class="n">v</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 导出函数，可使用 exports.Set() 导出多个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Napi</span><span class="o">::</span><span class="n">Object</span> <span class="nf">Init</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">Env</span> <span class="n">env</span><span class="p">,</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Object</span> <span class="n">exports</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;add&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">Add</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;str&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">Str</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;ab&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">ABuffer</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;arr&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">ArrayArg</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">exports</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="n">Napi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#34;debug&#34;</span><span class="p">),</span> <span class="n">Napi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="nf">New</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">DebugFun</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">exports</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">NODE_API_MODULE</span><span class="p">(</span><span class="n">addon</span><span class="p">,</span> <span class="n">Init</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/0329f648225d4aac9b0201a4fe8a1589.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="测试结果" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220412/0329f648225d4aac9b0201a4fe8a1589.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>测试结果</h2><p>测试结果</p>">
        
    </a><figcaption class="image-caption">测试结果</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/andrewwang/p/9409876.html" target="_blank" rel="noopener noreferrer">简单上手nodejs调用c++(c++和js的混合编程)</a></li>
<li><a href="https://github.com/nodejs/node-addon-api/tree/9bea434326d5e6c6fa355a51b6f232a503521a21/doc" target="_blank" rel="noopener noreferrer">node-addon-api-doc</a></li>
<li><a href="https://github.com/nodejs/node-addon-api" target="_blank" rel="noopener noreferrer">https://github.com/nodejs/node-addon-api</a></li>
<li><a href="https://nodejs.github.io/node-addon-examples/special-topics/object-function-refs#persistent-reference" target="_blank" rel="noopener noreferrer">https://nodejs.github.io/node-addon-examples/special-topics/object-function-refs#persistent-reference</a></li>
</ul>
]]></description>
</item></channel>
</rss>
