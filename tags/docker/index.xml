<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>docker - 标签 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/tags/docker/</link>
        <description>docker - 标签 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 24 May 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/tags/docker/" rel="self" type="application/rss+xml" /><item>
    <title>Docker bridge 网络与自定义 DNS 解析</title>
    <link>https://www.xiaobinqt.cn/docker-net-custom-dns/</link>
    <pubDate>Wed, 24 May 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-net-custom-dns/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="常见-dns-记录类型" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81-dns-%e8%ae%b0%e5%bd%95%e7%b1%bb%e5%9e%8b" class="header-mark"></a>常见 DNS 记录类型</h2><ul>
<li>A 记录（Address Record）</li>
</ul>
<p>记录格式：<code>example.com. IN A 192.0.2.1</code>，将域名映射到 IPv4 地址，不包含端口信息。</p>
<ul>
<li>AAAA 记录（IPv6 Address Record）</li>
</ul>
<p>记录格式：<code>example.com. IN AAAA 2001:db8::1</code>，将域名映射到 IPv6 地址。</p>
<ul>
<li>CNAME 记录（Canonical Name Record）</li>
</ul>
<p>记录格式：<code>www.example.com. IN CNAME example.com.</code>，将一个域名指向另一个域名，实现域名的别名或重定向。</p>
<ul>
<li>TXT 记录（Text Record）</li>
</ul>
<p>记录格式：<code>example.com. IN TXT &quot;Some text here&quot;</code>，存储与域名相关的文本信息，常用于验证域名所有权、防止电子邮件欺诈等。</p>
<ul>
<li>SRV 记录（Service Record）</li>
</ul>
<p>记录格式：<code>_service._proto.name. IN SRV priority weight port target</code>。<code>priority</code>表示优先级，用于指定备用服务器的顺序。值越小，优先级越高。<code>weight</code>表示权重，用于在具有相同优先级的记录之间进行负载均衡。值越大，权重越高。<code>port</code>表示服务的端口号。<code>target</code>表示提供该服务的目标主机的域名。</p>
<p>SRV 用于指定特定服务的域名、端口和优先级等信息，它用于在 DNS 中提供服务发现的功能，让客户端能够通过域名查找到提供特定服务的目标主机和端口。</p>
<ul>
<li>PTR 记录（Pointer Record）</li>
</ul>
<p>记录格式：<code>1.2.0.192.in-addr.arpa. IN PTR example.com.</code>，用于进行反向 DNS 查找，将 IP 地址解析为域名。</p>
<blockquote>
<p>IN（表示Internet）在 DNS 记录中是可选的，可以省略。当省略 IN 时，默认为 IN，因为大多数 DNS 记录都是针对互联网的。</p>
</blockquote>
<h2 id="resolvconf-配置文件" class="headerLink">
    <a href="#resolvconf-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>resolv.conf 配置文件</h2><p>resolv.conf 配置文件，存储了用于解析域名的 DNS 服务器的相关信息，用于指定系统的 DNS 解析配置。</p>
<p>resolv.conf 文件通常位于 Linux 系统中的 /etc/resolv.conf。每行包含一个配置项，配置项由关键字和对应的值组成，以空格或制表符分隔。常见的配置项包括：</p>
<ul>
<li>nameserver：指定 DNS 服务器的 IP 地址。可以有多个 nameserver 行，按照优先级从上到下进行解析。</li>
<li>search：指定默认的搜索域名列表。当使用不完全限定的域名时，系统会自动尝试附加这些域名来进行解析。</li>
<li>domain：指定系统的默认域名。当使用不完全限定的主机名时，系统会自动尝试附加默认域名来进行解析。</li>
<li>options：指定其他的解析选项，如超时时间、转发等。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nameserver 8.8.8.8
</span></span><span class="line"><span class="cl">nameserver 8.8.4.4
</span></span><span class="line"><span class="cl">search example.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如以下的这个配置</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/8b4dd5e7b70a4e17870780c2f4708751.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>resolv.conf</h2>">
        
    </a><figcaption class="image-caption">resolv.conf</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">search xae-zcbus-20230523.28e5df10.csphere.local csphere.local
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条 search 配置表示系统默认的搜索域名列表包括两个域名：<code>xae-zcbus-20230523.28e5df10.csphere.local</code> 和 <code>csphere.local</code>。</p>
<p>当进行 DNS 解析时，如果使用一个不完全限定的域名（没有包含点号），系统会按照 search 配置中的顺序尝试逐个附加这些搜索域名，以尝试解析域名。例如，如果要解析的域名是 example，系统会依次尝试解析 <code>example.xae-zcbus-20230523.28e5df10.csphere.local</code> 和 <code>example.csphere.local</code>。</p>
<p>这样配置搜索域名列表可以简化 DNS 查询过程，特别是在本地网络内部使用内部域名时，通过设置合适的搜索域名，可以直接使用不完全限定的主机名进行解析，而无需每次都输入完整的域名。</p>
<p>ndots 参数控制着系统在进行 DNS 解析时是否自动追加搜索域名。它指定了一个域名中至少要包含的点号<code>.</code>的数量。点号在域名中的数量表示域名的层级结构，例如<code>example.com</code>有一个点号，而<code>www.example.com</code>有两个点号。当一个域名的层级结构中点号的数量达到或超过 ndots 参数指定的值时，系统将<strong>不再追加</strong>搜索域名。</p>
<p>如上的配置<code>options ndots:2</code>，表示当进行 DNS 解析时，如果域名中包含至少两个点号（层级结构至少为三级），系统将不会自动追加搜索域名。如果域名的层级结构不足三级（点号少于两个），系统会自动尝试使用 /etc/resolv.conf 中指定的搜索域名列表进行解析。</p>
<p><code>nameserver 172.17.0.1</code>用于指定 DNS 解析时要使用的 DNS 服务器的 IP 地址。这里的<code>172.17.0.1</code>是 Docker bridge 网络下虚拟网桥 docker0 的 IP 地址。</p>
<p>因为容器中没有 dns 解析服务，不管是 dnsmasq 还是 pdns 都是装在宿主机上的，所以最后肯定是到宿主机上来解析的域名，但是这里如果直接写宿主机 IP 会影响效率「TODO 待补充」。</p>
<h2 id="etchosts-配置文件" class="headerLink">
    <a href="#etchosts-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>/etc/hosts 配置文件</h2><p>/etc/hosts 是本地的主机名解析文件，用于将主机名映射到对应的 IP 地址。/etc/hosts 文件包含了主机名和对应 IP 地址的映射关系。每行的格式为 <code>&lt;IP 地址&gt; &lt;主机名&gt;</code> 或者 <code>&lt;IP 地址&gt; &lt;主机别名&gt; &lt;主机名&gt;</code>。</p>
<p>/etc/hosts 文件中的条目优先于 DNS（Domain Name System）解析，当系统需要解析主机名时，会首先查看 /etc/hosts 文件，如果找到匹配的主机名，则直接使用对应的 IP 地址进行通信，无需进行 DNS 查询。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230524/16561b7c30f74809822274beff9af838.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>hosts</h2>">
        
    </a><figcaption class="image-caption">hosts</figcaption>
    </figure></p>
<h2 id="pdns" class="headerLink">
    <a href="#pdns" class="header-mark"></a>PDNS</h2><p>PDNS 是 PowerDNS 的简称，它是一款开源的域名系统（DNS）服务器软件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装 pdns</span>
</span></span><span class="line"><span class="cl">yum install pdns pdns-backend-pipe -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># pdns 启动,停止和查看是否运行正常</span>
</span></span><span class="line"><span class="cl">systemctl start/stop/status pdns
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230525/fa40c2fa19674bd1a29c4edd0496ff5b.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>查看 dnsmasq 是否正常</h2>">
        
    </a><figcaption class="image-caption">查看 dnsmasq 是否正常</figcaption>
    </figure></p>
<p>如果有问题需要排查，可以使用如下命令让 pdns 在前台运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/usr/sbin/pdns_server --guardian<span class="o">=</span>no --daemon<span class="o">=</span>no --disable-syslog --log-timestamp<span class="o">=</span>no --write-pid<span class="o">=</span>no
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230527/fc4df6cc9be049929788893a037ccd6f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>前台运行模式</h2>">
        
    </a><figcaption class="image-caption">前台运行模式</figcaption>
    </figure></p>
<p><code>--guardian=no</code>: 禁用 Guardian 模式。Guardian 模式是 PowerDNS 的守护进程管理机制，它负责监控和重启 PowerDNS 进程。通过将此参数设置为 no，禁用了 Guardian 模式。</p>
<p><code>--daemon=no</code>: 禁用守护进程模式。默认情况下，PowerDNS 以守护进程的形式运行，即在后台作为系统服务运行。通过将此参数设置为 no，PowerDNS 将在前台运行，输出日志和调试信息到终端。</p>
<p><code>--disable-syslog</code>: 禁用使用系统日志。默认情况下，PowerDNS 会将日志信息写入系统日志。通过使用此参数，禁用了将日志写入系统日志的功能。</p>
<p><code>--log-timestamp=no</code>: 禁用日志时间戳。默认情况下，PowerDNS 在日志中添加时间戳以指示每个日志条目的时间。通过将此参数设置为 no，禁用了时间戳的添加。</p>
<p><code>--write-pid=no</code>: 禁用写入 PID 文件。默认情况下，PowerDNS 会将其进程 ID 写入 PID 文件。通过将此参数设置为 no，禁用了 PID 文件的写入。</p>
<h3 id="pipe-backend" class="headerLink">
    <a href="#pipe-backend" class="header-mark"></a>pipe backend</h3><p>在 PowerDNS 中，pipe 是一种后端（Backend）类型，用于将 DNS 查询通过管道（Pipe）方式传递给外部程序进行处理。这种后端类型被称为 &ldquo;pipe backend&rdquo;。</p>
<p>使用 pipe backend，PowerDNS 可以将接收到的 DNS 查询通过管道发送给一个外部的自定义脚本或程序，然后由该脚本或程序处理查询并返回结果给 PowerDNS。这种方式允许用户根据自己的需求编写自定义逻辑来处理 DNS 查询，从而实现更灵活的功能。</p>
<p>在 PowerDNS 中配置 pipe backend 需要以下步骤：</p>
<ol>
<li>
<p>编写自定义脚本或程序：根据需求，编写一个能够接收 DNS 查询并返回结果的脚本或程序。该脚本或程序可以使用任何编程语言来实现，例如 Python、Perl、Shell 等。</p>
</li>
<li>
<p>配置 PowerDNS：在 PowerDNS 的配置文件中指定使用 pipe backend，并设置要执行的脚本或程序的路径。通常需要修改 PowerDNS 的配置文件（例如 pdns.conf）来进行配置。</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">launch</span><span class="o">=</span>pipe
</span></span><span class="line"><span class="cl">pipe-command<span class="o">=</span>/path/to/your/script.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述示例中，pipe-command 指定了自定义脚本或程序的路径。在修改完配置文件后，<strong>需要重新启动</strong> PowerDNS 服务，使配置生效。</p>
<p>当 PowerDNS 接收到 DNS 查询时，它将会将查询数据通过管道传递给指定的脚本或程序。脚本或程序可以处理查询并返回结果给 PowerDNS，然后由 PowerDNS 将结果返回给客户端。</p>
<p>通过配置 pipe backend，可以根据自己的需求编写自定义的逻辑来处理 DNS 查询，例如基于外部数据源、自定义策略、过滤等操作。</p>
<h2 id="dnsmasq" class="headerLink">
    <a href="#dnsmasq" class="header-mark"></a>dnsmasq</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装 dnsmasq</span>
</span></span><span class="line"><span class="cl">yum install dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 一些状态命令</span>
</span></span><span class="line"><span class="cl">systemctl start/stop/restart/status dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 检查配置文件语法是否正确</span>
</span></span><span class="line"><span class="cl">dnsmasq --test
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/21042ad8bf514e519d55c93d7431336d.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>dnsmasq 命令</h2>">
        
    </a><figcaption class="image-caption">dnsmasq 命令</figcaption>
    </figure></p>
<p>Dnsmasq 是一个轻量级的 DNS 和 DHCP 服务器软件，用于提供本地域名解析和网络地址分配功能，配置文件通常位于 /etc/dnsmasq.conf。下面是一些常用的配置文件字段说明：</p>
<ul>
<li>
<p>port（端口）：指定 Dnsmasq 监听的 DNS 查询端口。默认为 53，但可以根据需要进行更改。</p>
</li>
<li>
<p>cache-size（缓存大小）：指定DNS缓存的最大大小（以条目数量表示）。缓存可以提高解析性能，减少对上游 DNS 服务器的查询次数。例如，cache-size=1000 表示最多缓存 1000 条 DNS 解析记录。</p>
</li>
<li>
<p>server（服务器）：用于指定要使用的上游 DNS 服务器。可以配置多个 server 字段，每个字段后面跟随一个有效的 DNS 服务器地址。Dnsmasq 会按顺序向这些服务器发送 DNS 查询请求。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>8.8.8.8
</span></span><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>8.8.4.4
</span></span></code></pre></td></tr></table>
</div>
</div><p>server 的另一种写法是用来指定特定域名的 DNS 服务器映射。比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">server</span><span class="o">=</span>/domain.org/192.168.14.5
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置表示将域名 domain.org 解析到 IP 地址 192.168.14.5 上。当 Dnsmasq 收到对<code>domain.org</code>域名的解析请求时，它将使用指定的 IP 地址作为响应。这在本地网络中创建自定义的域名解析规则非常有用，可以用于内部域名解析或重定向特定域名到特定 IP 地址。</p>
<ul>
<li>address 参数用于指定域名解析的静态映射，将特定域名解析到指定的IP地址。它的语法如下：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">address</span><span class="o">=</span>/域名/IP地址
</span></span><span class="line"><span class="cl"><span class="nv">address</span><span class="o">=</span>/example.com/192.168.1.100
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置将域名 example.com 解析为 IP 地址 192.168.1.100。当 Dnsmasq 接收到关于 example.com 的解析请求时，它将使用指定的 IP 地址进行解析，而不会向上游 DNS 服务器发送查询请求。</p>
<h2 id="演练" class="headerLink">
    <a href="#%e6%bc%94%e7%bb%83" class="header-mark"></a>演练</h2><p>现在有 2 台机器，分别是<code>192.168.14.103</code>用来做控制器，安装有 powerDNS，作为上游 DNS，用来最后解析 DNS，<code>192.168.14.100</code>用来做 agent，安装有 dnsmasq 解析本地 DNS，通过配置 server 参数，将域名交给上游 DNS 服务器解析，也就是交给<code>192.168.14.103</code>解析处理。 pdns 通过 pipe backend 的 python 脚本，对所有的以<code>domain.org</code>结尾的域名请求都返回<code>192.168.40.223</code>的 IP，以下是 backend.py 的 python 脚本，python 版本是 python 3.6.8。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -*- coding: utf-8 -*-</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DNSLookup</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Handle PowerDNS pipe-backend domain name lookups.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ttl</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;parse DNS query and produce lookup result.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        query: a sequence containing the DNS query as per PowerDNS manual appendix A:
</span></span></span><span class="line"><span class="cl"><span class="s2">        http://downloads.powerdns.com/documentation/html/backends-detail.html#PIPEBACKEND-PROTOCOL
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">qtype</span><span class="p">,</span> <span class="n">_id</span><span class="p">,</span> <span class="n">ip</span><span class="p">)</span> <span class="o">=</span> <span class="n">query</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">False</span>  <span class="c1"># has a DNS query response</span>
</span></span><span class="line"><span class="cl">        <span class="n">qname_lower</span> <span class="o">=</span> <span class="n">qname</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;List of servers to round-robin&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">servers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;192.168.40.223&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">server</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">servers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># if (qtype == &#39;A&#39; or qtype == &#39;ANY&#39;) and qname_lower.endswith(&#39;domain.org&#39;):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">qtype</span> <span class="o">==</span> <span class="s1">&#39;ANY&#39;</span> <span class="ow">and</span> <span class="n">qname_lower</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;domain.org&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;DATA</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="s1">A</span><span class="se">\t</span><span class="si">%d</span><span class="se">\t</span><span class="s1">-1</span><span class="se">\t</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">DNSLookup</span><span class="o">.</span><span class="n">ttl</span><span class="p">,</span> <span class="n">server</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">qtype</span> <span class="o">==</span> <span class="s1">&#39;SOA&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;DATA</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="s1">3600</span><span class="se">\t</span><span class="s1">-1</span><span class="se">\t</span><span class="s1">ns1.test.soa</span><span class="se">\t</span><span class="s1">admin.test.soa</span><span class="se">\t</span><span class="s1">2014032110</span><span class="se">\t</span><span class="s1">10800</span><span class="se">\t</span><span class="s1">3600</span><span class="se">\t</span><span class="s1">604800</span><span class="se">\t</span><span class="s1">3600&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="o">%</span> <span class="p">(</span><span class="n">qname</span><span class="p">,</span> <span class="n">qclass</span><span class="p">,</span> <span class="n">qtype</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">str_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;return string result suitable for pipe-backend output to PowerDNS.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">has_result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Logger</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;/tmp/backend.log&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;self.logfile = &#39;/tmp/backend-</span><span class="si">%d</span><span class="s2">.log&#39; % pid&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">logline</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">%s</span><span class="s1">|</span><span class="si">%s</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">asctime</span><span class="p">(),</span> <span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">logfile</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">logline</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">debug_log</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PowerDNSbackend</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;The main PowerDNS pipe backend process.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filein</span><span class="p">,</span> <span class="n">fileout</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;initialise and run PowerDNS pipe backend process.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">filein</span> <span class="o">=</span> <span class="n">filein</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span> <span class="o">=</span> <span class="n">fileout</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_process_requests</span><span class="p">()</span>  <span class="c1"># main program loop</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_process_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;main program loop&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">first_time</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rawline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filein</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">rawline</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;EOF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span>  <span class="c1"># EOF detected</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">rawline</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;received from pdns:</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">first_time</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s1">&#39;HELO</span><span class="se">\t</span><span class="s1">1&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;OK</span><span class="se">\t</span><span class="s1">Python backend firing up&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;FAIL&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;HELO input not received - execution aborted&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">rawline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filein</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>  <span class="c1"># as per docs - read another line before aborting</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;calling sys.exit()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">first_time</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">query</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">6</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;LOG</span><span class="se">\t</span><span class="s1">PowerDNS sent unparseable line&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;FAIL&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;Performing DNSLookup(</span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="n">lookup</span> <span class="o">=</span> <span class="n">DNSLookup</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">lookup</span><span class="o">.</span><span class="n">has_result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pdns_result</span> <span class="o">=</span> <span class="n">lookup</span><span class="o">.</span><span class="n">str_result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="n">pdns_result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;DNSLookup result(</span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="n">pdns_result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">_fprint</span><span class="p">(</span><span class="s1">&#39;END&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_fprint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Print the given message with newline and flushing.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">message</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fileout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;sent to pdns:</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">infile</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># sys.stdout.close()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># outfile = os.fdopen(1, &#39;w&#39;, 1)</span>
</span></span><span class="line"><span class="cl">    <span class="n">outfile</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PowerDNSbackend</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">debug_log</span><span class="p">(</span><span class="s1">&#39;execution failure:&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/a1a644dcf7bb425e9cd4eb4606c554a9.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>pipe backend</h2>">
        
    </a><figcaption class="image-caption">pipe backend</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/761e93174f9d4763be59cef6711c3fe0.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>dig 解析正常</h2>">
        
    </a><figcaption class="image-caption">dig 解析正常</figcaption>
    </figure></p>
<p>现在在 agent 机器也就是<code>192.168.14.100</code>上通过 <a href="https://hub.docker.com/r/xiaobinqt/redis/tags" target="_blank" rel="noopener noreferrer">xiaobinqt/redis:7-ping</a> 镜像启动一个 redis 容器，容器名为 c-redis：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl">docker run --name c-redis --dns 172.17.0.1 --dns-search domain.org --dns-opt <span class="s2">&#34;ndots:2&#34;</span> -d  xiaobinqt/redis:7-ping<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>比如，当在容器中执行 <code>ping abdd</code>时，正常会先走 hosts 但是这里的 hosts 都没有对应的域名，所以 hosts 失效，再去 nameserver 指定的 DNS 服务器解析域名，由于配置了 ndots:2 ，系统会自动追加搜索域名<code>domain.org</code>，所以会去 172.17.0.1 DNS 服务器搜索域名 <code>abdd.domain.org</code>，172.17.0.1 对应的是宿主机的 docker0 虚拟网桥，最后会走到<strong>宿主机的 dns 服务</strong>，也就是<code>192.168.14.100</code> 的 dnsmasq 服务，对应的端口是 53。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230529/ae90a8281d72406ca0bf831fc375f36c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>调试结果</h2>">
        
    </a><figcaption class="image-caption">调试结果</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://gist.github.com/sokratisg/10069682" target="_blank" rel="noopener noreferrer">pdns-pipebackend.py</a></li>
<li><a href="https://www.linuxhelp.com/questions/powerdns-libpipebackend-so-no-such-file-or-directory" target="_blank" rel="noopener noreferrer">PowerDNS : libpipebackend.so no such file or directory</a></li>
<li><a href="https://community.zextras.com/dns-server-installation-guide-on-centos-7-rhel-7-and-centos-8-rhel-8-using-dnsmasq/" target="_blank" rel="noopener noreferrer">Installing DNS Server on CentOS/RHEL using dnsmasq | Zimbra</a></li>
</ul>
]]></description>
</item><item>
    <title>Docker 安装 mysql8.0</title>
    <link>https://www.xiaobinqt.cn/docker-install-mysql8.0/</link>
    <pubDate>Wed, 08 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-install-mysql8.0/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="设置镜像源" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae%e9%95%9c%e5%83%8f%e6%ba%90" class="header-mark"></a>设置镜像源</h2><p>国内的网络环境，使用官方的镜像源，下载速度很慢，所以我们需要使用国内的镜像源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /etc/docker/daemon.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果没有<code>daemon.json</code>文件可以手动创建一个。可以设置中国区镜像或是网易镜像，也可以设置阿里云镜像（推荐使用阿里云的加速器，因为快&#x1f923;）。</p>
<ul>
<li>中国区镜像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://registry.docker-cn.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>网易镜像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://hub-mirror.c.163.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>阿里云镜像</li>
</ul>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/db638d8f1d5447bca5e54227203de932.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="阿里云镜像地址" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/db638d8f1d5447bca5e54227203de932.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>阿里云镜像地址</h2><p>阿里云镜像地址</p>">
        
    </a><figcaption class="image-caption">阿里云镜像地址</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/96866e63f1ca4b9d9f5e3b129c405cd4.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="设置镜像源" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/96866e63f1ca4b9d9f5e3b129c405cd4.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>设置镜像源</h2><p>设置镜像源</p>">
        
    </a><figcaption class="image-caption">设置镜像源</figcaption>
    </figure></p>
<p>设置完成后，重启docker服务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过 <code>docker info</code> 查看镜像源是否设置成功。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker info <span class="p">|</span> grep Mirrors -A <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/bd599a600ab44a73a6f21de4167a4446.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="查看镜像源" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/bd599a600ab44a73a6f21de4167a4446.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>查看镜像源</h2><p>查看镜像源</p>">
        
    </a><figcaption class="image-caption">查看镜像源</figcaption>
    </figure></p>
<h2 id="下载镜像" class="headerLink">
    <a href="#%e4%b8%8b%e8%bd%bd%e9%95%9c%e5%83%8f" class="header-mark"></a>下载镜像</h2><p>可以去 <a href="https://hub.docker.com/_/mysql/tags" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/mysql/tags</a> 仓库找需要的 mysql 版本&#x1f447;</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/09ed0f1adae443d3a22a34796c8b3c0e.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="镜像下载" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/09ed0f1adae443d3a22a34796c8b3c0e.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>镜像下载</h2><p>镜像下载</p>">
        
    </a><figcaption class="image-caption">镜像下载</figcaption>
    </figure></p>
<p>通过 <code>docker pull</code>下载需要的镜像。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/569c7174b200474f9e20724d2f7c4e35.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="下载镜像" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/569c7174b200474f9e20724d2f7c4e35.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>下载镜像</h2><p>下载镜像</p>">
        
    </a><figcaption class="image-caption">下载镜像</figcaption>
    </figure></p>
<h2 id="配置并启动容器" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e5%b9%b6%e5%90%af%e5%8a%a8%e5%ae%b9%e5%99%a8" class="header-mark"></a>配置并启动容器</h2><h3 id="主机挂载目录" class="headerLink">
    <a href="#%e4%b8%bb%e6%9c%ba%e6%8c%82%e8%bd%bd%e7%9b%ae%e5%bd%95" class="header-mark"></a>主机挂载目录</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p mysql8.0/<span class="o">{</span>conf,data<span class="o">}</span> <span class="c1"># conf 存放配置文件,data 存放数据库文件</span>
</span></span><span class="line"><span class="cl">touch mysql8.0/conf/my.cnf <span class="c1"># 创建配置文件</span>
</span></span><span class="line"><span class="cl">chown -R 999:999 mysql8.0 <span class="c1"># 修改权限</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将<code>my.cnf</code>文件中写入以下配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>mysqld<span class="o">]</span>
</span></span><span class="line"><span class="cl">pid-file        <span class="o">=</span> /var/run/mysqld/mysqld.pid
</span></span><span class="line"><span class="cl"><span class="nv">socket</span>          <span class="o">=</span> /var/run/mysqld/mysqld.sock
</span></span><span class="line"><span class="cl"><span class="nv">datadir</span>         <span class="o">=</span> /var/lib/mysql
</span></span><span class="line"><span class="cl">secure-file-priv<span class="o">=</span> /var/lib/mysql
</span></span></code></pre></td></tr></table>
</div>
</div><p>具体可以参考<a href="https://github.com/docker-library/mysql/blob/master/8.0/config/my.cnf" target="_blank" rel="noopener noreferrer">https://github.com/docker-library/mysql/blob/master/8.0/config/my.cnf</a></p>
<p><code>secure-file-priv</code> 设置为 <code>/var/lib/mysql</code>是为了解决 <a href="https://github.com/docker-library/mysql/issues/541" target="_blank" rel="noopener noreferrer">MySQL 8 docker-compose :Failed to access directory for &ndash;secure-file-priv</a> 问题。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/014c2fb94bb74b0b8f42178efaff315c.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="设置挂载目录" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/014c2fb94bb74b0b8f42178efaff315c.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>设置挂载目录</h2><p>设置挂载目录</p>">
        
    </a><figcaption class="image-caption">设置挂载目录</figcaption>
    </figure></p>
<h3 id="启动容器" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8%e5%ae%b9%e5%99%a8" class="header-mark"></a>启动容器</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 3310:3306 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name mysql8.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /root/weibin/mysql8.0/conf/my.cnf:/etc/mysql/my.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /root/weibin/mysql8.0/data:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mysql:8.0
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/2c0a7dbf9628400a98fcfaaa341c6970.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="启动容器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/2c0a7dbf9628400a98fcfaaa341c6970.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>启动容器</h2><p>启动容器</p>">
        
    </a><figcaption class="image-caption">启动容器</figcaption>
    </figure></p>
<p>这里还可以在启动容器时初始化一些工作，比如建库建表，可以把 sql 或是 sh 文件放在容器的<code>/docker-entrypoint-initdb.d</code>目录下，可以直接通过宿主机映射到容器目录，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-v /root/dockerdata/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230307/f4a351ea0e654164b078634826de0033.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230307/f4a351ea0e654164b078634826de0033.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20230307/f4a351ea0e654164b078634826de0033.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>docker-entrypoint-initdb.d 目录</h2>">
        
    </a><figcaption class="image-caption">docker-entrypoint-initdb.d 目录</figcaption>
    </figure></p>
<h2 id="开启远程连接" class="headerLink">
    <a href="#%e5%bc%80%e5%90%af%e8%bf%9c%e7%a8%8b%e8%bf%9e%e6%8e%a5" class="header-mark"></a>开启远程连接</h2><p>如果不能远程连接可以进入容器后连接数据库，修改 mysql 库的 user 表。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it 容器ID bash
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/c086da058f074cfc96f93ce87d8d2cfb.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="进入容器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/c086da058f074cfc96f93ce87d8d2cfb.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>进入容器</h2><p>进入容器</p>">
        
    </a><figcaption class="image-caption">进入容器</figcaption>
    </figure></p>
<p>查看 user 表中的<code>user='root'</code>的账号的 host 是否是<code>%</code>，如果不是则设置为<code>%</code>。如果已存在多个 root 账号，其中只要有一个的 host 为<code>%</code>就可以了。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/534fccacb5c44d9e8dcc9db8df1d6ee3.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="设置host" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/534fccacb5c44d9e8dcc9db8df1d6ee3.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>设置host</h2><p>设置host</p>">
        
    </a><figcaption class="image-caption">设置host</figcaption>
    </figure></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">update user <span class="nb">set</span> <span class="nv">host</span><span class="o">=</span><span class="s1">&#39;%&#39;</span> where <span class="nv">user</span> <span class="o">=</span> <span class="s1">&#39;root&#39;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果修改了用户需要执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">flush privileges<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样在不重启的 mysql 服务的情况下就可以生效。</p>
<h2 id="修改密码" class="headerLink">
    <a href="#%e4%bf%ae%e6%94%b9%e5%af%86%e7%a0%81" class="header-mark"></a>修改密码</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ALTER USER <span class="s1">&#39;root&#39;</span>@<span class="s1">&#39;localhost&#39;</span> IDENTIFIED WITH caching_sha2_password BY <span class="s1">&#39;yourpasswd&#39;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/3ca7bd00dfaf402d871581aca72d2e93.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="修改密码" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/3ca7bd00dfaf402d871581aca72d2e93.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>修改密码</h2><p>修改密码</p>">
        
    </a><figcaption class="image-caption">修改密码</figcaption>
    </figure></p>
<h2 id="faq" class="headerLink">
    <a href="#faq" class="header-mark"></a>FAQ</h2><ul>
<li>&#x2753; <strong>secure-file-priv</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Failed to access directory <span class="k">for</span> --secure-file-priv. Please make sure that directory exists and is accessible by MySQL Server. Supplied value : /var/lib/mysql-files
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/22c2b7f4e7f24aaba10ede6b043cbb55.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="FAQ1" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/22c2b7f4e7f24aaba10ede6b043cbb55.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>FAQ1</h2><p>FAQ1</p>">
        
    </a><figcaption class="image-caption">FAQ1</figcaption>
    </figure></p>
<p>宿主机的映射目录需要设置用户和用户组为<code>999:999</code>，因为 docker 容器里的用户也是 999，可以启动一个临时容器进去查看。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/8591686d90444944a3b3aaefed189b26.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="999:999" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221121/8591686d90444944a3b3aaefed189b26.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>999:999</h2><p>999:999</p>">
        
    </a><figcaption class="image-caption">999:999</figcaption>
    </figure></p>
<ul>
<li>&#x2753; <strong>flush privileges</strong></li>
</ul>
<p><code>flush privileges</code>命令本质上的作用是将当前 user 和 privilige 表中的用户信息/权限设置从 mysql 库中提取到内存里。</p>
<p>MySQL 用户数据和权限有修改后，希望在<strong>不重启MySQL服务</strong>的情况下直接生效，就可以执行这个命令。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6" target="_blank" rel="noopener noreferrer">Docker Hub 镜像加速器</a></li>
<li><a href="https://github.com/docker-library/mysql/issues/541" target="_blank" rel="noopener noreferrer">MySQL 8 docker-compose :Failed to access directory for &ndash;secure-file-priv</a></li>
<li><a href="https://www.jianshu.com/p/000fee62e786" target="_blank" rel="noopener noreferrer">docker安装mysql 8</a></li>
<li><a href="https://stackoverflow.com/questions/50691977/how-to-reset-the-root-password-in-mysql-8-0-11" target="_blank" rel="noopener noreferrer">How to reset the root password in MySQL 8.0.11?</a></li>
<li><a href="https://www.atlantic.net/dedicated-server-hosting/how-to-create-a-new-user-and-grant-permissions-in-mysql8-on-centos8/" target="_blank" rel="noopener noreferrer">How To Create a New User and Grant Permissions in MySQL8 on CentOS8</a></li>
</ul>
]]></description>
</item><item>
    <title>IPv4 forwarding is disabled. Networking will not work</title>
    <link>https://www.xiaobinqt.cn/ipv4-forwarding-is-disabled-networking-will-not-work/</link>
    <pubDate>Sun, 08 Nov 2020 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/ipv4-forwarding-is-disabled-networking-will-not-work/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="问题" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98" class="header-mark"></a>问题</h2><p>今天在操作 docker 时遇到了一个问题<code>IPv4 forwarding is disabled. Networking will not work</code>&#x1f447;</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/e1bf06fd0d134476833680c7c412da4a.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="报错信息" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/e1bf06fd0d134476833680c7c412da4a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>报错信息</h2><p>报错信息</p>">
        
    </a><figcaption class="image-caption">报错信息</figcaption>
    </figure></p>
<p>我的系统是 CentOS7.9</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/bd163e7f159544fb82224f0e6e37fbf6.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="系统信息" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/bd163e7f159544fb82224f0e6e37fbf6.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>系统信息</h2><p>系统信息</p>">
        
    </a><figcaption class="image-caption">系统信息</figcaption>
    </figure></p>
<h2 id="解决方案" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>解决方案</h2><p>在宿主机执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;net.ipv4.ip_forward=1&#34;</span> &gt;&gt;/usr/lib/sysctl.d/00-system.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后重启网络和 docker</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemctl restart network
</span></span><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/a8321d29039d48be9106c0ad5ba07f35.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="问题解决" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/a8321d29039d48be9106c0ad5ba07f35.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>问题解决</h2><p>问题解决</p>">
        
    </a><figcaption class="image-caption">问题解决</figcaption>
    </figure></p>
]]></description>
</item><item>
    <title>WARNING: bridge-nf-call-iptables is disabled</title>
    <link>https://www.xiaobinqt.cn/bridge-nf-call-iptables-is-disabled/</link>
    <pubDate>Thu, 06 Aug 2020 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/bridge-nf-call-iptables-is-disabled/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="问题" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98" class="header-mark"></a>问题</h2><p>今天在使用 docker 时出现如下问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">WARNING: bridge-nf-call-iptables is disabled
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/5851b966f1d243718279d4e31dd229e6.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="warning" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/5851b966f1d243718279d4e31dd229e6.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>warning</h2><p>warning</p>">
        
    </a><figcaption class="image-caption">warning</figcaption>
    </figure></p>
<p>我的系统版本是<code>CentOS 7.9</code>，</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/1265baf476d6436a87f9d0f04eeb2125.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="系统版本" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/1265baf476d6436a87f9d0f04eeb2125.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>系统版本</h2><p>系统版本</p>">
        
    </a><figcaption class="image-caption">系统版本</figcaption>
    </figure></p>
<h2 id="解决办法" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95" class="header-mark"></a>解决办法</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim /etc/sysctl.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>/etc/sysctl.conf</code> 中添加如下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">net.bridge.bridge-nf-call-ip6tables <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">net.bridge.bridge-nf-call-iptables <span class="o">=</span> <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行 <code>sysctl -p</code> 即可。</p>
]]></description>
</item><item>
    <title>Docker Swarm 笔记</title>
    <link>https://www.xiaobinqt.cn/docker-swarm/</link>
    <pubDate>Sun, 14 Jun 2020 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-swarm/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<p>作为容器集群管理器，Swarm 最大的优势之一就是原生支持 Docker API。各种基于标准 API 的工具比如 Compose、Docker
SDK、各种管理软件，甚至 Docker 本身等都可以很容易的与 Swarm
进行集成，这大大方便了用户将原先基于单节点的系统移植到 Swarm 上。同时 Swarm 内置了对 Docker 网络插件的支持，这样就可以很容易地<strong>部署跨主机的容器集群服务</strong>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/a2c6cdd8918444218b889fa03a9a9605.png" title="主从结构" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/a2c6cdd8918444218b889fa03a9a9605.png" data-sub-html="<h2>主从结构</h2><p>主从结构</p>">
        
    </a><figcaption class="image-caption">主从结构</figcaption>
    </figure></p>
<p>Swarm 采用了典型的主从结构，通过 Raft 协议来在多个<strong><ruby>管理节点<rt>Manager</rt></ruby></strong>中实现共识。<strong><ruby>工作节点<rt>Worker</rt></ruby></strong>
上运行 agent 接受管理节点的统一管理和任务分配。用户提交服务请求只需要发给管理节点即可，管理节点会按照调度策略在集群中分配节点来运行服务相关的任务。</p>
<h2 id="基本概念" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5" class="header-mark"></a>基本概念</h2><h3 id="swarm集群" class="headerLink">
    <a href="#swarm%e9%9b%86%e7%be%a4" class="header-mark"></a>Swarm集群</h3><p>Swarm<strong><ruby>集群<rt>Cluster</rt></ruby></strong>为一组被统一管理起来的 Docker 主机。集群是 Swarm 所管理的对象。这些主机通过 Docker 引擎的 Swarm
模式相互沟通，其中部分主机可能作为<strong><ruby>管理节点<rt>manager</rt></ruby></strong>响应外部的管理请求，其他主机作为<strong><ruby>工作节点<rt>worker</rt></ruby></strong>
来实际运行 Docker 容器。同一个主机也可以既作为管理节点，同时作为工作节点。</p>
<p>当使用 Swarm 集群时，首先定义一个服务（指定状态、复制个数、网络、存储、暴露端口等），然后通过管理节点发出启动服务的指令，管理节点随后会按照指定的服务规则进行调度，在集群中启动起来整个服务，并确保它正常运行。</p>
<h3 id="节点" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9" class="header-mark"></a>节点</h3><p><strong><ruby>节点<rt>Node</rt></ruby></strong>是 Swarm 集群的最小资源单位。每个节点实际上都是一台 Docker 主机。Swarm 集群中节点分为两种：</p>
<ul>
<li><strong><ruby>管理节点<rt>manager node</rt></ruby></strong>：负责响应外部对集群的操作请求，并维持集群中资源，分发任务给工作节点。同时，多个管理节点之间通过Raft协议构成共识。一般推荐每个集群设置5个或7个管理节点。</li>
<li><strong><ruby>工作节点<rt>worker node</rt></ruby></strong>：负责执行管理节点安排的具体任务。默认情况下，管理节点自身也同时是工作节点。每个工作节点上运行代理（agent）来汇报任务完成情况。</li>
</ul>
<p>可以通过<code>docker node promote</code>命令来提升一个工作节点为管理节点；或者通过<code>docker node demote</code>命令来将一个管理节点降级为工作节点。</p>
<h3 id="服务" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1" class="header-mark"></a>服务</h3><p>一个<strong><ruby>服务<rt>Service</rt></ruby></strong>可以由若干个任务组成，每个任务为某个具体的应用。服务还包括对应的存储、网络、端口映射、副本个数、访问配置、升级配置等附加参数。</p>
<p>一般来说，服务需要面向特定的场景，例如一个典型的 Web 服务可能包括前端应用、后端应用，以及数据库等。这些应用都属于该服务的管理范畴。</p>
<p>Swarm 集群中服务类型也分为两种（可以通过<code>-mode</code>指定）：</p>
<ul>
<li>
<p><strong><ruby>复制服务<rt>replicated services</rt></ruby></strong>模式：默认模式，每个任务在集群中会存在若干副本，这些副本会被管理节点按照调度策略分发到集群中的工作节点上。此模式下可以使用<code>-replicas</code>参数设置副本数量。</p>
</li>
<li>
<p><strong><ruby>全局服务<rt>global services</rt></ruby></strong>模式：调度器将在每个可用节点都执行一个相同的任务。该模式适合运行节点的检查，如监控应用等</p>
</li>
</ul>
<h3 id="任务" class="headerLink">
    <a href="#%e4%bb%bb%e5%8a%a1" class="header-mark"></a>任务</h3><p>任务是 Swarm 集群中最小的调度单位，即一个指定的应用容器。例如仅仅运行前端业务的前端容器。任务从生命周期上将可能处于<strong><ruby>创建<rt>NEW</rt></ruby></strong>、<strong><ruby>等待<rt>PENDING</rt></ruby></strong>
、<strong><ruby>分配<rt>ASSIGNED</rt></ruby></strong>、<strong><ruby>接受<rt>ACCEPTED</rt></ruby></strong>、<strong><ruby>准备<rt>PREPARING</rt></ruby></strong>、<strong><ruby>开始<rt>STARTING</rt></ruby></strong>、<strong><ruby>运行<rt>RUNNING</rt></ruby></strong>、<strong><ruby>完成<rt>COMPLETE</rt></ruby></strong>、<strong><ruby>失败<rt>FAILED</rt></ruby></strong>
、<strong><ruby>关闭<rt>SHUTDOWN</rt></ruby></strong>、<strong><ruby>拒绝<rt>REJECTED</rt></ruby></strong>、<strong><ruby>孤立<rt>ORPHANED</rt></ruby></strong>等不同状态。</p>
<p>Swarm 集群中的管理节点会按照调度要求将任务分配到工作节点上。例如指定副本为 2 时，可能会被分配到两个不同的工作节点上。一旦当某个任务被分配到一个工作节点，将无法被转移到另外的工作节点，即 Swarm 中的任务不支持迁移。</p>
<h3 id="外部访问" class="headerLink">
    <a href="#%e5%a4%96%e9%83%a8%e8%ae%bf%e9%97%ae" class="header-mark"></a>外部访问</h3><p>Swarm 集群中的服务要被集群外部访问，必须要能允许任务的响应端口映射出来。Swarm 中支持<strong><ruby>入口负载均衡<rt>ingress load balancing</rt></ruby></strong>的映射模式。该模式下，每个服务都会被分配一个[公开端口]^(
PublishedPort)，该端口在集群中任意节点上都可以访问到，并被保留给该服务。</p>
<p>当有请求发送到任意节点的公开端口时，该节点若并没有实际执行服务相关的容器，则会通过路由机制将请求转发给实际执行了服务容器的工作节点。</p>
<h2 id="搭建集群" class="headerLink">
    <a href="#%e6%90%ad%e5%bb%ba%e9%9b%86%e7%be%a4" class="header-mark"></a>搭建集群</h2><p>我用 VMWare 搭建了 2 台主机，IP 分别为 <code>192.168.48.125</code> 和 <code>192.168.48.8</code>，现在将<code>192.168.48.128</code>作为管理节点，将<code>192.168.48.8</code>作为工作节点。</p>
<p>在集群中，时间同步是很重要，可以使用<code>ntp</code>先同步时间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yum -y install ntp
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> ntpd
</span></span><span class="line"><span class="cl">systemctl start ntpd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建集群" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e9%9b%86%e7%be%a4" class="header-mark"></a>创建集群</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker swarm init --advertise-addr 192.168.48.125
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/4dad63ec41c74aa7bb34fc3eb36c2f67.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="swarm init" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/4dad63ec41c74aa7bb34fc3eb36c2f67.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>swarm init</h2><p>swarm init</p>">
        
    </a><figcaption class="image-caption">swarm init</figcaption>
    </figure></p>
<p><strong>注意</strong>返回的 token 串，这是集群的唯一 id，加入集群的各个节点将需要这个信息。</p>
<p>默认的管理服务端口为 2377，需要能被工作节点访问到；另外，为了支持集群的成员发现和外部服务映射，还需要再所有节点上开启 7946 TCP/UDP 端口和 4789 UDP 端口。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/ae34164603074161b0bd725a3eca796f.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="开发端口" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/ae34164603074161b0bd725a3eca796f.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>开发端口</h2><p>开发端口</p>">
        
    </a><figcaption class="image-caption">开发端口</figcaption>
    </figure></p>
<p>关于 Centos7.x
开放端口可以参考<a href="https://blog.csdn.net/qq_39007083/article/details/106875997" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_39007083/article/details/106875997</a>
。</p>
<h3 id="加入集群" class="headerLink">
    <a href="#%e5%8a%a0%e5%85%a5%e9%9b%86%e7%be%a4" class="header-mark"></a>加入集群</h3><p>在所有要加入集群的普通节点上面执行<code>swarm join</code>命令，表示把这台机器加入指定集群当中。例如，在<code>192.168.48.8</code>工作节点上，将其加入刚创建的集群，则可以通过：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker swarm join --token SWMTKN-1-15692f3ho3t3oi68ljnv0fi5nxerox2jsuplmhv0qzerzqpfh1-er9ufvvh4bym5o3iifummtvnf 192.168.48.125:2377
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/04a42d532f814048aa2b5036d7165e5a.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="加入集群" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/04a42d532f814048aa2b5036d7165e5a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>加入集群</h2><p>加入集群</p>">
        
    </a><figcaption class="image-caption">加入集群</figcaption>
    </figure></p>
<p>此时在管理节点可以看到刚加进来的<code>192.168.48.8</code>工作节点：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/f883196e32e04000a22eebf0297910a9.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="工作节点加入成功" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/f883196e32e04000a22eebf0297910a9.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>工作节点加入成功</h2><p>工作节点加入成功</p>">
        
    </a><figcaption class="image-caption">工作节点加入成功</figcaption>
    </figure></p>
<h3 id="使用集群服务" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e9%9b%86%e7%be%a4%e6%9c%8d%e5%8a%a1" class="header-mark"></a>使用集群服务</h3><p>搭建成功的集群，可以使用使用<code>docker service</code>命令使用 Swarm 提供的服务。</p>
<p>可以在管理节点上执行如下命令来快速创建一个应用服务，并制定服务的复制份数为 2。如下命令所示，默认会自动检查确认服务状态都正常：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker service create --replicas <span class="m">2</span> --name ping_app debian:jessie ping docker.com
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/7815a5ff32724a86b3933c8a13bef9ba.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="docker service create" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/7815a5ff32724a86b3933c8a13bef9ba.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>docker service create</h2><p>docker service create</p>">
        
    </a><figcaption class="image-caption">docker service create</figcaption>
    </figure></p>
<p>在管理节点上使用 <code>docker service ls</code> 可以查看集群中服务情况：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/56517c7b0d994d4594268d3ff04bd894.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="service ls" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/56517c7b0d994d4594268d3ff04bd894.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>service ls</h2><p>service ls</p>">
        
    </a><figcaption class="image-caption">service ls</figcaption>
    </figure></p>
<p>可以看到，管理节点和工作节点上都运行了一个容器，镜像为<code>debian:jessie</code>：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/890b1178de3840c0bca1cad2b219bab8.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="service ps" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/890b1178de3840c0bca1cad2b219bab8.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>service ps</h2><p>service ps</p>">
        
    </a><figcaption class="image-caption">service ps</figcaption>
    </figure></p>
<h3 id="扩展服务" class="headerLink">
    <a href="#%e6%89%a9%e5%b1%95%e6%9c%8d%e5%8a%a1" class="header-mark"></a>扩展服务</h3><p>可以通过</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker service scale &lt;SERVICE-ID&gt;<span class="o">=</span>&lt;NUMBER-OF-TASKS&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>命令来对服务进行伸缩，例如将服务复制个数从 2 改为 1。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/8b65b07f8ce74086925f7b81317aad93.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="扩展服务" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/8b65b07f8ce74086925f7b81317aad93.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>扩展服务</h2><p>扩展服务</p>">
        
    </a><figcaption class="image-caption">扩展服务</figcaption>
    </figure></p>
<h3 id="离开集群" class="headerLink">
    <a href="#%e7%a6%bb%e5%bc%80%e9%9b%86%e7%be%a4" class="header-mark"></a>离开集群</h3><p>节点可以在任何时候通过<code>swarm leave</code>命令离开一个集群。命令格式为<code>dockerswarm leave [OPTIONS]</code>，支持<code>-f</code>, <code>--force</code>意味着强制离开集群。</p>
<h3 id="常用命令" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>常用命令</h3><p>Docker 通过 service 命令来管理应用服务，主要包括<code>create</code>、<code>inspect</code>、<code>logs</code>、<code>ls</code>、<code>ps</code>、<code>rm</code>、<code>rollback</code>、<code>scale</code>、<code>update</code>等若干子命令：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/bb88c53985fe4641801deed194fbd823.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="常用命令" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220512/bb88c53985fe4641801deed194fbd823.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>常用命令</h2><p>常用命令</p>">
        
    </a><figcaption class="image-caption">常用命令</figcaption>
    </figure></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.wenjiangs.com/docs/docker-swarm-guides" target="_blank" rel="noopener noreferrer">Docker Swarm 深入浅出</a></li>
<li><a href="https://blog.csdn.net/qq_36573407/article/details/121351589" target="_blank" rel="noopener noreferrer">docker-swarm 节点增加、删除、权限提升、降低、服务部署、配置可视化界面、stack等一系列操作</a></li>
<li><a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/swarm/</a></li>
</ul>
]]></description>
</item><item>
    <title>Docker 备忘</title>
    <link>https://www.xiaobinqt.cn/docker-summary-of-common-usage/</link>
    <pubDate>Wed, 06 May 2020 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-summary-of-common-usage/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/3305e58fbade4acc862591389ce7cd0f.png" referrerpolicy="no-referrer">
            </div><!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="root-用户执行" class="headerLink">
    <a href="#root-%e7%94%a8%e6%88%b7%e6%89%a7%e8%a1%8c" class="header-mark"></a>root 用户执行</h2><p>有时进入容器后，用户就是变成非 root 用户，这种时候又没有密码，在执行一些操作的时候就会非常不方便，这是可以用 <code>-u root</code> 来指定用户。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/4c15cdd08fc44144ba76364b04a5daed.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="非root用户" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/4c15cdd08fc44144ba76364b04a5daed.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>非root用户</h2><p>非root用户</p>">
        
    </a><figcaption class="image-caption">非root用户</figcaption>
    </figure></p>
<p>执行简单命令可以这样&#x1f447;</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/0cb85b06bf314f989212dea7af42535e.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="图01" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/0cb85b06bf314f989212dea7af42535e.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>图01</h2><p>图01</p>">
        
    </a><figcaption class="image-caption">图01</figcaption>
    </figure></p>
<p>如果需要进入容器，可以这样&#x1f447;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span>  -u root -it 容器名  bash
</span></span><span class="line"><span class="cl"><span class="c1">#或者</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span>  -u root -it 容器名  sh
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/fbee690400664f6d88aea131abc00465.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="图02" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/fbee690400664f6d88aea131abc00465.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>图02</h2><p>图02</p>">
        
    </a><figcaption class="image-caption">图02</figcaption>
    </figure></p>
<h2 id="仓库和注册服务器" class="headerLink">
    <a href="#%e4%bb%93%e5%ba%93%e5%92%8c%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-mark"></a>仓库和注册服务器</h2><p>有时候会把仓库（Repository）和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<div align="center"></div>
]]></description>
</item><item>
    <title>Docker Compose 笔记</title>
    <link>https://www.xiaobinqt.cn/docker-compose/</link>
    <pubDate>Tue, 21 May 2019 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-compose/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<p>在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括前端的负载均衡容器等。Compose
恰好满足了这样的需求。Compose 定位是<strong>定义和运行多个Docker容器的应用</strong>。</p>
<p>Compose 允许用户通过一个单独的 docker-compose.yml 模板文件（YAML格式）来定义一组相关联的应用容器为一个<strong><ruby>服务栈<rt>stack</rt></ruby></strong>。</p>
<p>Compose中有几个重要的概念：</p>
<ul>
<li><strong><ruby>任务<rt>task</rt></ruby></strong>：一个容器被称为一个任务。任务拥有独一无二的ID，在同一个服务中的多个任务序号依次递增。</li>
<li><strong><ruby>服务<rt>service</rt></ruby></strong>：某个相同应用镜像的容器副本集合，一个服务可以横向扩展为多个容器实例。</li>
<li><strong><ruby>服务栈<rt>stack</rt></ruby></strong>：由多个服务组成，相互配合完成特定业务，如Web应用服务、数据库服务共同构成Web服务栈，一般由一个docker-compose.yml文件定义。</li>
</ul>
<p>Compose 的默认管理对象是服务栈，通过子命令对栈中的多个服务进行便捷的生命周期管理。</p>
<h2 id="常用命令" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>常用命令</h2><table>
<thead>
<tr>
<th>CMD</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>docker-compose up</code></td>
<td>根据 docker-compose.yml 中配置的内容，创建所有的容器、网络、数据卷等等内容，并将它们启动。</td>
</tr>
<tr>
<td><code>docker-compose down</code></td>
<td>停止所有的容器，并将它们删除，同时消除网络等配置内容。</td>
</tr>
<tr>
<td><code>docker-compose logs 服务名</code></td>
<td>查看服务日志</td>
</tr>
</tbody>
</table>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220511/364fd570c3c34f73a782ea8e47b09c82.png" title="常用 compose 命令" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220511/364fd570c3c34f73a782ea8e47b09c82.png" data-sub-html="<h2>常用 compose 命令</h2><p>常用 compose 命令</p>">
        
    </a><figcaption class="image-caption">常用 compose 命令</figcaption>
    </figure></p>
<p>具体可以参考</p>
<ul>
<li><a href="https://yeasy.gitbook.io/docker_practice/compose/commands" target="_blank" rel="noopener noreferrer">https://yeasy.gitbook.io/docker_practice/compose/commands</a></li>
<li><a href="https://weread.qq.com/web/reader/57f327107162732157facd6kbd432fb02a1bd4c9ab736c3" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/57f327107162732157facd6kbd432fb02a1bd4c9ab736c3</a></li>
</ul>
<p><code>docker-compose</code> 命令默认会识别当前控制台所在目录内的 docker-compose.yml 文件，会以这个目录的名字作为组装的应用项目的名称。如果需要改变它们，可以通过选项 <code>-f</code> 来修改识别的 Docker
Compose 配置文件，通过 <code>-p</code> 选项来定义项目名&#x1f447;。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose -f ./compose/docker-compose.yml -p myapp up -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置项" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e9%a1%b9" class="header-mark"></a>配置项</h2><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220511/fe7bc1c181984359a0212a117b30e28f.png" title="常见配置项" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220511/fe7bc1c181984359a0212a117b30e28f.png" data-sub-html="<h2>常见配置项</h2><p>常见配置项</p>">
        
    </a><figcaption class="image-caption">常见配置项</figcaption>
    </figure></p>
<p>具体可以参看</p>
<ul>
<li>
<p><a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file" target="_blank" rel="noopener noreferrer">https://yeasy.gitbook.io/docker_practice/compose/compose_file</a></p>
</li>
<li>
<p><a href="https://weread.qq.com/web/reader/57f327107162732157facd6kb73329202a0b73ce398cadd" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/57f327107162732157facd6kb73329202a0b73ce398cadd</a></p>
</li>
</ul>
<h2 id="示例说明" class="headerLink">
    <a href="#%e7%a4%ba%e4%be%8b%e8%af%b4%e6%98%8e" class="header-mark"></a>示例说明</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">redis:3.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./redis/redis.conf:/etc/redis.conf:ro</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;6379:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;redis-server&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;/etc/redis.conf&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">database</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql:5.7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./mysql/my.cnf:/etc/mysql/my.cnf:ro</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql-data:/var/lib/mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">MYSQL_ROOT_PASSWORD=my-secret-pw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3306:3306&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">webapp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="l">./webapp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./webapp:/webapp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">database</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:1.12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./nginx/conf.d:/etc/nginx/conf.d:ro</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./webapp/html:/webapp/html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">webapp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">frontend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql-data</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>&#x261d;&#xfe0f;如上：</p>
<ul>
<li>
<p><code>version</code>，这个配置是可选的，代表定义的 docker-compose.yml 文件内容所采用的版本，目前 Docker Compose 的配置文件已经迭代至了第三版。</p>
</li>
<li>
<p><code>services</code> ，是整个 docker-compose.yml 的核心，<code>services</code>定义了容器的各项细节。 在 Docker Compose 里不直接体现容器这个概念，而是把 <code>service</code>
作为配置的最小单元。虽然看上去每个 <code>service</code> 里的配置内容就像是在配置容器，但其实 <code>service</code> 代表的是一个应用集群的配置。</p>
</li>
</ul>
<h3 id="定义服务" class="headerLink">
    <a href="#%e5%ae%9a%e4%b9%89%e6%9c%8d%e5%8a%a1" class="header-mark"></a>定义服务</h3><p>在使用 docker compose 时，可以为为每个服务定义一个名称，用以区别不同的服务。在这个例子里，<code>redis</code>、<code>database</code>、<code>webapp</code>、<code>nginx</code>就是服务的名称。</p>
<h3 id="指定镜像" class="headerLink">
    <a href="#%e6%8c%87%e5%ae%9a%e9%95%9c%e5%83%8f" class="header-mark"></a>指定镜像</h3><p>容器最基础的就是镜像，而每个服务必须指定镜像。在 Docker Compose 里，可以通过两种方式为服务指定所采用的镜像。</p>
<p>一种是通过 image 这个配置，给出能在镜像仓库中找到镜像的名称即可。</p>
<p>另外一种指定镜像的方式就是直接采用 Dockerfile 来构建镜像，通过 <code>build</code> 这个配置能够定义构建的环境目录，可以通过这种方式指定镜像，Docker Compose 先会帮助我们执行镜像的构建，之后再通过这个镜像启动容器。</p>
<p>在<code>docker build</code>里还能通过选项定义许多内容，这些在 Docker Compose 里依然可以&#x1f447;，我们能够指定更多的镜像构建参数，例如 Dockerfile 的文件名，构建参数等等。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  webapp:
</span></span><span class="line"><span class="cl">    build:
</span></span><span class="line"><span class="cl">      context: ./webapp
</span></span><span class="line"><span class="cl">      dockerfile: webapp-dockerfile
</span></span><span class="line"><span class="cl">      args:
</span></span><span class="line"><span class="cl">        - JAVA_VERSION=1.6
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="依赖声明" class="headerLink">
    <a href="#%e4%be%9d%e8%b5%96%e5%a3%b0%e6%98%8e" class="header-mark"></a>依赖声明</h3><p>如果服务间有非常强的依赖关系，就必须告知 Docker Compose 容器的<strong>先后启动顺序</strong>。只有当被依赖的容器完全启动后，Docker Compose 才会创建和启动这个容器。</p>
<p>定义依赖的方式很简单，在上面的<a href="#%e9%85%8d%e7%bd%ae%e9%a1%b9" rel="">例子</a>里可以看到，就是 <code>depends_on</code> 这个配置项，只需要通过它列出这个服务所有依赖的其他服务即可。在 Docker Compose
为我们启动项目的时候，会检查所有依赖，形成正确的启动顺序并按这个顺序来依次启动容器。</p>
<h3 id="文件挂载" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e6%8c%82%e8%bd%bd" class="header-mark"></a>文件挂载</h3><p>Docker Compose 里定义文件挂载的方式与 Docker Engine 里也并没有太多的区别，使用 <code>volumes</code> 配置可以像 docker CLI 里的 <code>-v</code> 选项一样来指定外部挂载和数据卷挂载。</p>
<p>在上面的<a href="#%e9%85%8d%e7%bd%ae%e9%a1%b9" rel="">例子</a>里，可以看到几种常用挂载的方式。我们能够直接挂载宿主机文件系统中的目录，也可以通过数据卷的形式挂载内容。</p>
<p>可以直接指定相对目录进行挂载，这里的相对目录是指相对于 docker-compose.yml 文件的目录。</p>
<h3 id="使用数据卷" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e6%95%b0%e6%8d%ae%e5%8d%b7" class="header-mark"></a>使用数据卷</h3><p><strong>独立于</strong> <code>services</code> 的 <code>volumes</code> 配置就是用来声明数据卷的。定义数据卷最简单的方式仅需要提供数据卷的名称。</p>
<p>如果想把属于 Docker Compose 项目以外的数据卷引入进来直接使用，可以将数据卷定义为外部引入，通过 <code>external</code> 这个配置就能完成这个定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">volumes:
</span></span><span class="line"><span class="cl">  mysql-data:
</span></span><span class="line"><span class="cl">    external: true
</span></span></code></pre></td></tr></table>
</div>
</div><p>在加入 <code>external</code> 定义后，Docker Compose 在创建项目时不会直接创建数据卷，而是优先从 Docker Engine 中已有的数据卷里寻找并直接采用。</p>
<h3 id="端口映射" class="headerLink">
    <a href="#%e7%ab%af%e5%8f%a3%e6%98%a0%e5%b0%84" class="header-mark"></a>端口映射</h3><p><code>ports</code> 这个配置项，它是用来定义端口映射的。可以利用它进行宿主机与容器端口的映射，这个配置与 docker CLI 中 <code>-p</code> 选项的使用方法是近似的。</p>
<p>由于 YAML 格式对 <code>xx:yy</code> 这种格式的解析有特殊性，在设置小于 60 的值时，会被当成时间而不是字符串来处理，所以最好<strong>使用引号</strong>将端口映射的定义包裹起来，避免歧义。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener noreferrer">Docker-入门到实践</a></li>
</ul>
]]></description>
</item><item>
    <title>slim、stretch、buster、jessie、alpine、debian、ubuntu、centOS、fedora、buildpack-deps</title>
    <link>https://www.xiaobinqt.cn/docker-slim-stretch-buster-jessie/</link>
    <pubDate>Thu, 10 May 2018 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-slim-stretch-buster-jessie/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="版本代号" class="headerLink">
    <a href="#%e7%89%88%e6%9c%ac%e4%bb%a3%e5%8f%b7" class="header-mark"></a>版本代号</h2><p>我太难了，搞这么多代号干啥&#x1f622;</p>
<p>在写 Dockerfile 引用基础镜像时经常会看到这样的写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> debian:buster</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> node:14.16.1-stretch-slim</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>那这里的 <code>buster</code> 和 <code>stretch</code> 具体是什么呢？其实 <code>buster</code>、<code>stretch</code>还有<code>jessie</code>针对的是不同 Debian <strong><ruby>代号<rt>codename</rt></ruby></strong>，除了 Debian 之外，还有 Ubuntu、CentOS、Fedora，他们每次在更新版本时都会更新代号。</p>
<h3 id="ubuntu-版本代号" class="headerLink">
    <a href="#ubuntu-%e7%89%88%e6%9c%ac%e4%bb%a3%e5%8f%b7" class="header-mark"></a>ubuntu 版本代号</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/e902306343af4eb78a8b04396d2338e8.png" title="ubuntu版本代号" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/e902306343af4eb78a8b04396d2338e8.png" data-sub-html="<h2>ubuntu版本代号</h2><p>ubuntu版本代号</p>">
        
    </a><figcaption class="image-caption">ubuntu版本代号</figcaption>
    </figure></p>
<h3 id="debian-版本代号" class="headerLink">
    <a href="#debian-%e7%89%88%e6%9c%ac%e4%bb%a3%e5%8f%b7" class="header-mark"></a>debian 版本代号</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/1d34964dde2344738f39c32182e35297.png" title="debian版本代号" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/1d34964dde2344738f39c32182e35297.png" data-sub-html="<h2>debian版本代号</h2><p>debian版本代号</p>">
        
    </a><figcaption class="image-caption">debian版本代号</figcaption>
    </figure></p>
<h2 id="slimfatrc" class="headerLink">
    <a href="#slimfatrc" class="header-mark"></a>slim、fat、rc</h2><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221231/407d5f7456e840bb81a0a9128a6d7bb5.png" title="规则" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221231/407d5f7456e840bb81a0a9128a6d7bb5.png" data-sub-html="<h2>命名规则</h2><p>规则</p>">
        
    </a><figcaption class="image-caption">命名规则</figcaption>
    </figure></p>
<p><code>slim</code> 可以理解为精简版，跟 <code>Minimal</code>是一样的，仅安装运行特定工具所需的最少软件包。fat 镜像会比较大，适合用来开发调试。 rc 版（候选版本，release candidate）</p>
<p>所以<code>FROM debian:buster</code> 就是把 debian 10 作为基础镜像，<code>FROM node:14.16.1-stretch-slim</code> 就是把 debian 9 的精简版作为基础镜像。</p>
<p>容器的核心是应用。选择过大的父镜像（如Ubuntu系统镜像）会造成最终生成应用镜像的臃肿，所以会有这种瘦身过的应用镜像（如node:slim），或者较为小巧的系统镜像（如 alpine、busybox 或 debian）</p>
<h2 id="buildpack-deps" class="headerLink">
    <a href="#buildpack-deps" class="header-mark"></a>buildpack-deps</h2><p><a href="https://hub.docker.com/_/buildpack-deps" target="_blank" rel="noopener noreferrer">buildpack-deps</a>  是 docker hub 官方提供的一个镜像工具包，很多 docker 官方的基础镜像都基于此基础镜像进行构建的，buildpack-deps 已经提供了很多内置好的依赖库，可以简化镜像部署，官方也提供了 debian 以及 ubuntu 等的镜像，如 debian 10 <code>buildpack-deps:buster</code>，ubuntu 16 <code>buildpack-deps:xenial</code> 等。</p>
<h2 id="操作系统" class="headerLink">
    <a href="#%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" class="header-mark"></a>操作系统</h2><p><code>alpine</code>、<code>debian</code>、<code>ubuntu</code>、<code>centOS</code>、<code>fedora</code> 这些都是操作系统，是 Linux 的发行版。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/f18e321c61d749359df40c04029e8e5a.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="Linux发行版" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/f18e321c61d749359df40c04029e8e5a.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>Linux发行版</h2><p>Linux发行版</p>">
        
    </a><figcaption class="image-caption">Linux发行版</figcaption>
    </figure></p>
<h3 id="busybox" class="headerLink">
    <a href="#busybox" class="header-mark"></a>Busybox</h3><p>BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 等）的<strong>精简工具箱</strong>
，它只有几MB的大小，被誉为“Linux系统的瑞士军刀”。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/f67ba7a59a1a4bca999f48b0706f6331.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="busybox" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/f67ba7a59a1a4bca999f48b0706f6331.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>busybox</h2><p>busybox</p>">
        
    </a><figcaption class="image-caption">busybox</figcaption>
    </figure></p>
<h3 id="alpine" class="headerLink">
    <a href="#alpine" class="header-mark"></a>Alpine</h3><p>Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常的 Linux 发行版，Alpine 采用了 musl libc 和 BusyBox 以减小系统的体积和运行时资源消耗，但功能上比 BusyBox 又完善得多。在保持瘦身的同时，Alpine 还提供了自己的包管理工具<code>apk</code>
，可以通过 <a href="https://pkgs.alpinelinux.org/packages" target="_blank" rel="noopener noreferrer">https://pkgs.alpinelinux.org/packages</a> 查询包信息，也可以通过<code>apk</code>命令直接查询和安装各种软件。</p>
<p>相比于其他 Docker 镜像，Alpine Docker 的容量非常小，仅仅只有 5MB 左右，而 Ubuntu 系列镜像接近 200MB，且拥有非常友好的包管理机制。</p>
<p>Docker 官方推荐使用 Alpine 作为默认的基础镜像环境，这可以带来多个优势，如镜像下载速度加快、镜像安全性提高、主机之间的切换更方便、占用更少磁盘空间等。</p>
<p>Alpine 镜像的<strong>缺点</strong>就在于它实在<strong>过于精简</strong>
，以至于麻雀虽小，也无法做到五脏俱全了。在 Alpine 中缺少很多常见的工具和类库，以至于如果想基于 Alpine 标签的镜像进行二次构建，那搭建的过程会相当烦琐。所以如果想要对软件镜像进行改造，并基于其构建新的镜像，那么 Alpine 镜像不是一个很好的选择。</p>
<h3 id="debian" class="headerLink">
    <a href="#debian" class="header-mark"></a>Debian</h3><p>Debian 是由 GPL 和其他自由软件许可协议授权的自由软件组成的操作系统，由 Debian Project 组织维护。Debian 以其坚守 Unix 和自由软件的精神，以及给予用户的众多选择而闻名。</p>
<p>作为一个大的系统组织框架，Debian下面有多种不同操作系统核心的<strong>分支计划</strong>
，主要为采用 Linux 核心的 Debian GNU/Linux 系统，其他还有采用 GNU Hurd 核心的 Debian GNU/Hurd 系统、采用 FreeBSD 核心的 Debian GNU/kFreeBSD 系统，以及采用 NetBSD 核心的 Debian GNU/NetBSD 系统，甚至还有利用 Debian 的系统架构和工具，采用 OpenSolaris 核心构建而成的 Nexenta OS 系统。在这些 Debian 系统中，以采用 Linux 核心的 Debian GNU/Linux 最为著名。</p>
<p>众多的 Linux 发行版，例如 Ubuntu、Knoppix 和 Linspire 及 Xandros 等，都基于 Debian GNU/Linux。</p>
<h3 id="ubuntu" class="headerLink">
    <a href="#ubuntu" class="header-mark"></a>Ubuntu</h3><p>Ubuntu 是一个以桌面应用为主的 GNU/Linux 操作系统。Ubuntu 基于 Debian 发行版和 GNOME/Unity 桌面环境，与 Debian 的不同在于它每6个月会发布一个新版本，每2年会推出一个长期支持（Long Term Support，LTS）版本，一般支持3年。</p>
<h3 id="centos" class="headerLink">
    <a href="#centos" class="header-mark"></a>CentOS</h3><p>CentOS 是基于 Redhat 的常见 Linux 分支。CentOS 是目前企业级服务器的常用操作系统。</p>
<p>CentOS（Community Enterprise Operating System，社区企业操作系统）是基于 Red Hat Enterprise Linux 源代码编译而成的。由于 CentOS 与 Redhat Linux 源于相同的代码基础，所以很多成本敏感且需要高稳定性的公司就使用 CentOS 来替代商业版 Red Hat Enterprise Linux。CentOS 自身不包含闭源软件。</p>
<h3 id="fedora" class="headerLink">
    <a href="#fedora" class="header-mark"></a>Fedora</h3><p>Fedora 也是基于 Redhat 的常见 Linux分支。Fedora 则主要面向个人桌面用户。</p>
<p>Fedora 是由 Fedora Project 社区开发，红帽公司赞助的 Linux 发行版。它的目标是创建一套新颖、多功能并且自由和开源的操作系统。对用户而言，Fedora是一套功能完备的、可以更新的免费操作系统，而对赞助商 RedHat 而言，它是许多新技术的测试平台，被认为可用的技术最终会加入到 RedHat Enterprise Linux 中。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://linux.cn/article-7893-1.html" target="_blank" rel="noopener noreferrer">趣谈形形色色的 Linux 发行版的代号</a></li>
<li><a href="https://www.cnblogs.com/lovezbs/p/14058250.html" target="_blank" rel="noopener noreferrer">Docker运行操作系统环境(BusyBox&amp;Alpine&amp;Debian/Ubuntu&amp;CentOS/Fedora)</a></li>
</ul>
]]></description>
</item><item>
    <title>Docker 学习笔记</title>
    <link>https://www.xiaobinqt.cn/docker-glance/</link>
    <pubDate>Sun, 18 Mar 2018 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/docker-glance/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/21100b3b2f8b4afb9e6df1a48bee2c33.png" referrerpolicy="no-referrer">
            </div><!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="虚拟化" class="headerLink">
    <a href="#%e8%99%9a%e6%8b%9f%e5%8c%96" class="header-mark"></a>虚拟化</h2><h3 id="硬件虚拟化" class="headerLink">
    <a href="#%e7%a1%ac%e4%bb%b6%e8%99%9a%e6%8b%9f%e5%8c%96" class="header-mark"></a>硬件虚拟化</h3><p>硬件虚拟化，指物理硬件本身就提供虚拟化的支持。</p>
<p>比如，A 平台的 CPU，能够将 B 平台的指令集转换为自身的指令集执行，并给程序完全运行在 B 平台上的感觉。又或者，CPU 能够自身模拟裂变，让程序或者操作系统认为存在多个 CPU，进而能够同时运行多个程序或者操作系统。这些都是硬件虚拟化的体现。</p>
<h3 id="软件虚拟化" class="headerLink">
    <a href="#%e8%bd%af%e4%bb%b6%e8%99%9a%e6%8b%9f%e5%8c%96" class="header-mark"></a>软件虚拟化</h3><p>软件虚拟化指的是通过软件的方式来实现虚拟化中关键的<strong>指令转换部分</strong>。</p>
<p>比如，在软件虚拟化实现中，通过一层夹杂在应用程序和硬件平台上的虚拟化实现软件来进行指令的转换。也就是说，虽然应用程序向操作系统或者物理硬件发出的指令不是当前硬件平台所支持的指令，这个实现虚拟化的软件也会将之转换为当前硬件平台所能识别的。</p>
<h3 id="浅析-docker" class="headerLink">
    <a href="#%e6%b5%85%e6%9e%90-docker" class="header-mark"></a>浅析 Docker</h3><p>可以把容器看作一个简易版的 Linux 系统环境（包括 root 用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的<strong><ruby>沙盒<rt>sandbox</rt></ruby></strong>。</p>
<p>每个容器内运行着一个应用，不同的容器相互隔离，容器之间也可以通过网络互相通信。容器的创建和停止十分快速，几乎跟创建和终止原生应用一致；另外，容器自身对系统资源的额外需求也十分有限，远远低于传统虚拟机。很多时候，甚至直接把容器当作应用本身也没有任何问题。</p>
<p>Docker 并没有和虚拟机一样利用一个独立的 OS 执行环境的隔离，它利用的是目前 Linux 内核本身支持的容器方式，实现了资源和环境的隔离。</p>
<p>支撑 docker 的核心技术有：<code>Namespace</code>，<code>Cgroup</code>，<code>chroot</code>，<code>UnionFS</code>。</p>
<p><code>Namespace</code> 是 2002 年从 Linux 2.4.19 开始出现的，提供了虚拟层面的隔离，比如文件隔离，网络隔离等等。每个命名空间中的应用看到的，都是不同的 IP 地址，用户空间，进程 ID 等。</p>
<p><code>Cgroup</code>是 2008 年从 Linux 2.6.24 开始出现的，它的全称是 Linux Control Group。提供了物理资源的隔离，比如 CPU，内存，磁盘等等。</p>
<p><code>chroot</code>在 1979 年的 UNIX V7 就已经出现了，它可以更改进程的根目录，也就是限制访问文件系统。目前的容器基本不再使用过于古老的<code>chroot</code>了，而是改用<code>pivot_root</code>。</p>
<p><code>UnionFS</code> 给 docker 镜像提供了技术支撑。在 Docker 中，提供了一种对 UnionFS 的改进实现，也就是 <strong><ruby>AUFS<rt>Advanced Union File System</rt></ruby></strong>。 AUFS 将文件的更新挂载到老的文件之上，而不去修改那些不更新的内容，这意味着即使虚拟的文件系统被反复修改，也能保证对真实文件系统的空间占用保持一个较低水平。就像在 Git 中每进行一次提交，Git 并不是将我们所有的内容打包成一个版本，而只是将修改的部分进行记录，这样即使我们提交很多次后，代码库的空间占用也不会倍数增加。 通过 AUFS，Docker
<strong>大幅减少了虚拟文件系统对物理存储空间的占用</strong>。</p>
<h3 id="虚拟机和-docker" class="headerLink">
    <a href="#%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%92%8c-docker" class="header-mark"></a>虚拟机和 Docker</h3><p><strong><ruby>虚拟机<rt>Virtual Machine</rt></ruby></strong>，通常来说就是通过一个<strong><ruby>虚拟机监视器<rt>Virtual Machine Monitor</rt></ruby></strong>
的设施来隔离操作系统与硬件或者应用程序和操作系统，以此达到虚拟化的目的。这个夹在其中的虚拟机监视器，常常被称为
<strong>Hypervisor</strong>。&#x1f447;是虚拟机和 Docker 的对比：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/c869ee3cf8d94b20ae793d98e6022afd.png" title="虚拟机和容器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220506/c869ee3cf8d94b20ae793d98e6022afd.png" data-sub-html="<h2>虚拟机和容器</h2><p>虚拟机和容器</p>">
        
    </a><figcaption class="image-caption">虚拟机和容器</figcaption>
    </figure></p>
<p>传统方式是在硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层。Docker容器是在操作系统层面上实现虚拟化，直接
<strong>复用本地主机的操作系统</strong>，因此更加轻量级。</p>
<p>虚拟机更擅长彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 Docker 通常用于隔离不同的应用，例如前端，后端以及数据库。</p>
<h2 id="常用命令" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>常用命令</h2><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221231/e5053d518f254d20ac99dc5324bdb51f.png" title="官方架构图" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20221231/e5053d518f254d20ac99dc5324bdb51f.png" data-sub-html="<h2>官方架构图</h2><p>官方架构图</p>">
        
    </a><figcaption class="image-caption">官方架构图</figcaption>
    </figure></p>
<table>
<thead>
<tr>
<th>CMD</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sudo docker create --name 容器名称 镜像名称</code></td>
<td>创建容器</td>
</tr>
<tr>
<td><code>docker start 名称</code></td>
<td>启动容器</td>
</tr>
<tr>
<td><code>sudo docker run --name 容器名称 -d 镜像名称</code></td>
<td>创建并启动容器且在后台运行,<code>-d=--detach</code></td>
</tr>
<tr>
<td><code>docker ps </code></td>
<td>列出<strong>运行中</strong>容器</td>
</tr>
<tr>
<td><code>docker ps -a</code></td>
<td>列出所有容器, <code>-a=--all</code></td>
</tr>
<tr>
<td><code>docker stop 容器名称/ID</code></td>
<td>停止容器</td>
</tr>
<tr>
<td><code>docker rm 容器名称/ID</code></td>
<td>删除容器</td>
</tr>
<tr>
<td><code>docker exec -it 容器名称 bash/sh</code></td>
<td>进入容器</td>
</tr>
<tr>
<td><code>docker attach --sig-proxy=false 容器名称</code></td>
<td>将容器转为了前台运行，如果不加<code>--sig-proxy=false</code> <code>Ctrl + C</code> 后会停止容器</td>
</tr>
<tr>
<td><code>docker logs 容器名称</code></td>
<td>查看容器日志</td>
</tr>
<tr>
<td><code>docker network ls/list</code></td>
<td>查看已经存在的网络</td>
</tr>
<tr>
<td><code>docker network create -d 网络驱动 网络名</code></td>
<td>创建新网络</td>
</tr>
<tr>
<td><code>docker volume ls</code></td>
<td>列出当前已创建的数据卷</td>
</tr>
<tr>
<td><code>docker volume create 名称</code></td>
<td>创建数据卷</td>
</tr>
<tr>
<td><code>docker volume rm 名称</code></td>
<td>删除数据卷</td>
</tr>
<tr>
<td><code>docker volume prune</code></td>
<td>删除没有被容器引用的数据卷</td>
</tr>
<tr>
<td><code>docker build</code></td>
<td>构建镜像</td>
</tr>
<tr>
<td><code>docker inspect 容器名/ID</code></td>
<td>查看容器详情</td>
</tr>
<tr>
<td><code>docker run --privileged</code></td>
<td>容器获取宿主机root权限</td>
</tr>
</tbody>
</table>
<p><code>docker exec</code> 命令能帮助我们在正在运行的容器中运行指定的命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> <span class="o">[</span>-i<span class="o">]</span> 容器名 命令
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/0b8a159e61264e45ae982fcfd8418016.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="docker exec" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/0b8a159e61264e45ae982fcfd8418016.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>docker exec</h2><p>docker exec</p>">
        
    </a><figcaption class="image-caption">docker exec</figcaption>
    </figure></p>
<p><code>--rm</code> 选项参数，可以让容器在停止后自动删除，不需要再使用容器删除命令来删除，对临时容器友好&#x1f447;。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run --rm --name mysql2 -e <span class="nv">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="o">=</span>yes  mysql:5.7
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp
</span></span></code></pre></td></tr></table>
</div>
</div><p>&#x261d;&#xfe0f;<code>-t</code> 选项，指定新生成镜像的名称。<code>-f</code> 指定 Dockerfile 文件所在目录，如果不写的话会从 <code>./webapp</code>
目录中去找，<code>./webapp</code> 可以直接写成<code>.</code>
理解成当前目录，也是镜像构建的上下文，比如 <code>COPY</code>指令执行时就是从这个上下文中去找的。</p>
<p>如果需要禁止缓存可以加上<code>--no-cache</code>参数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build --no-cache  .....
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="images-子命令" class="headerLink">
    <a href="#images-%e5%ad%90%e5%91%bd%e4%bb%a4" class="header-mark"></a>images 子命令</h3><p>更多子命令选项还可以通过<code>man docker-images</code>
来查看，或者查看官方文档 <a href="https://docs.docker.com/engine/reference/commandline/images/" target="_blank" rel="noopener noreferrer">docker images</a>
。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a, ‐‐all=true | false</code></td>
<td>列出所有（包括临时文件）镜像文件，默认为否</td>
</tr>
<tr>
<td><code>‐‐digests=true | false </code></td>
<td>列出镜像的数字摘要值，默认为否</td>
</tr>
<tr>
<td><code>-f, --filter=[]</code></td>
<td>过滤列出的镜像，如<code>dangling=true</code>只显示没有被使用的镜像；也可指定带有特定标注的镜像等</td>
</tr>
<tr>
<td><code>--format=&quot;TEMPLATE&quot;</code></td>
<td>控制输出格式，如<code>.ID</code>代表ID信息，<code>.Repository</code>代表仓库信息等</td>
</tr>
<tr>
<td><code>‐‐no-trunc=true | false </code></td>
<td>对输出结果中太长的部分是否进行截断，如镜像的ID信息，默认为是</td>
</tr>
<tr>
<td><code>-q, ‐‐quiet=true | false </code></td>
<td>仅输出ID信息，默认为否</td>
</tr>
</tbody>
</table>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/68e1884199cf428a981afd09c0b2a2dd.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="&amp;ndash;format" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/68e1884199cf428a981afd09c0b2a2dd.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>--format</h2><p>&amp;ndash;format</p>">
        
    </a><figcaption class="image-caption">--format</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/039153bec0674bfea7169d2c4f1325d5.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="&amp;ndash;filter" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220508/039153bec0674bfea7169d2c4f1325d5.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>--filter</h2><p>&amp;ndash;filter</p>">
        
    </a><figcaption class="image-caption">--filter</figcaption>
    </figure></p>
<h3 id="create-子命令" class="headerLink">
    <a href="#create-%e5%ad%90%e5%91%bd%e4%bb%a4" class="header-mark"></a>create 子命令</h3><p>create 命令支持的选项都十分复杂，选项主要包括如下几大类：与容器运行模式相关、与容器环境配置相关、与容器资源限制和安全保护相关。</p>
<ul>
<li>&#x26a0;&#xfe0f;容器运行模式相关的选项</li>
</ul>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/33cd51368fe748cfa3537c318f148f0a.png" title="容器运行模式相关的选项" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/33cd51368fe748cfa3537c318f148f0a.png" data-sub-html="<h2>容器运行模式相关的选项</h2><p>容器运行模式相关的选项</p>">
        
    </a><figcaption class="image-caption">容器运行模式相关的选项</figcaption>
    </figure></p>
<ul>
<li>&#x26a0;&#xfe0f;容器环境和配置相关的选项</li>
</ul>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/fea604964abd42a3a3c26aa84e320b6d.png" title="容器环境和配置相关的选项" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/fea604964abd42a3a3c26aa84e320b6d.png" data-sub-html="<h2>容器环境和配置相关的选项</h2><p>容器环境和配置相关的选项</p>">
        
    </a><figcaption class="image-caption">容器环境和配置相关的选项</figcaption>
    </figure></p>
<ul>
<li>&#x26a0;&#xfe0f;容器资源限制和安全保护相关的选项</li>
</ul>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/e6eb7947b0c44d0cb039e4118a3e03b9.png" title="容器资源限制和安全保护相关的选项" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220507/e6eb7947b0c44d0cb039e4118a3e03b9.png" data-sub-html="<h2>容器资源限制和安全保护相关的选项</h2><p>容器资源限制和安全保护相关的选项</p>">
        
    </a><figcaption class="image-caption">容器资源限制和安全保护相关的选项</figcaption>
    </figure></p>
<h3 id="build-子命令" class="headerLink">
    <a href="#build-%e5%ad%90%e5%91%bd%e4%bb%a4" class="header-mark"></a>build 子命令</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/92e3455beeb546f6b046fb34936f8020.png" title="build 子命令" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/92e3455beeb546f6b046fb34936f8020.png" data-sub-html="<h2>build 子命令</h2><p>build 子命令</p>">
        
    </a><figcaption class="image-caption">build 子命令</figcaption>
    </figure></p>
<h2 id="容器网络" class="headerLink">
    <a href="#%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c" class="header-mark"></a>容器网络</h2><p>在 Docker 网络中，有三个比较核心的概念，就是：<strong><ruby>沙盒<rt>Sandbox</rt></ruby></strong> 、<strong><ruby>网络<rt>Network</rt></ruby></strong>、<strong><ruby>端点<rt>Endpoint</rt></ruby></strong>。</p>
<ul>
<li>沙盒提供了容器的虚拟网络栈，也就是端口套接字、IP 路由表、防火墙等内容。实现隔离容器网络与宿主机网络，形成了完全独立的容器网络环境。</li>
<li>网络可以理解为 Docker 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯。Docker 的这种虚拟网络也是于宿主机网络存在隔离关系的，其目的主要是形成容器间的安全通讯环境。</li>
<li>端点是位于容器或网络隔离墙之上的洞，其主要目的是形成一个可以控制的突破封闭的网络环境的出入口。当容器的端点与网络的端点形成配对后，就如同在这两者之间搭建了桥梁，便能够进行数据传输了。</li>
</ul>
<p>这三者形成了 Docker 网络的核心模型，也就是<strong><ruby>容器网络模型<rt>Container Network Model</rt></ruby></strong>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/de6fe8d93f6144869b7df7e89bfc88b6.png" title="容器网络" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/de6fe8d93f6144869b7df7e89bfc88b6.png" data-sub-html="<h2>容器网络</h2><p>容器网络</p>">
        
    </a><figcaption class="image-caption">容器网络</figcaption>
    </figure></p>
<p>Docker 官方提供了五种 Docker 网络驱动：<code>Bridge Driver</code>、<code>Host Driver</code>、<code>Overlay Driver</code>、<code>MacLan Driver</code>、<code>None Driver</code>。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/2e40239883264b8fa413bcd39eaf701a.png" title="网络驱动" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220426/2e40239883264b8fa413bcd39eaf701a.png" data-sub-html="<h2>网络驱动</h2><p>网络驱动</p>">
        
    </a><figcaption class="image-caption">网络驱动</figcaption>
    </figure></p>
<p><code>Bridge</code> 网络是 Docker 容器的默认网络驱动，通过网桥来实现网络通讯。为容器创建独立的网络命名空间，分配网卡、IP 地址等网络配置，并通过 veth 接口对将容器挂载到一个虚拟网桥（默认为docker0）上。bridge 模式多了虚拟网桥和网卡，通信效率会低一些，但是可以灵活配置应用端口。</p>
<div align="center">  </div>
<p><code>none</code>为容器创建独立的网络命名空间，但不进行网络配置，即容器内没有创建网卡、IP地址等。允许其他的网络插件来自定义网络连接。</p>
<p><code>host</code>不为容器创建独立的网络命名空间，容器内看到的网络配置（网卡信息、路由表、Iptables 规则等）均与主机上的保持一致。注意其他资源还是与主机隔离的。这种模式没有中间层，相当于去掉了容器的网络隔离，自然通信效率高，但缺少了隔离，运行太多的容器也容易
<strong>导致端口冲突</strong>，比如宿主机和容器不能运行端口相同的应用。</p>
<p><code>Overlay</code> 驱动默认采用 VXLAN 协议，在 <strong>IP 地址可以互相访问</strong>的多个主机之间搭建隧道，让容器可以互相访问，并且让这些容器感觉这个网络与其他类型的网络没有区别。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/982405a94bc347559812099a15aabeb2.png" title="Overlay network" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/982405a94bc347559812099a15aabeb2.png" data-sub-html="<h2>Overlay network</h2><p>Overlay network</p>">
        
    </a><figcaption class="image-caption">Overlay network</figcaption>
    </figure></p>
<h3 id="创建网络" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e7%bd%91%e7%bb%9c" class="header-mark"></a>创建网络</h3><p>在 Docker 中，能够创建自定义网络，形成自己定义虚拟子网的目的。创建网络的命令是 <code>docker network create</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create -d bridge individual
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>-d</code> 选项我们可以为新的网络<strong>指定驱动的类型</strong>，其值可以默认的 <code>bridge</code>、<code>host</code>、<code>overlay</code>、<code>maclan</code>、<code>none</code>
，也可以是其他网络驱动插件所定义的类型。 当不指定网络驱动时，Docker 也会默认采用 <code>Bridge Driver</code> 作为网络驱动。</p>
<p>通过 <code>docker network ls</code> 或是 <code>docker network list</code> 可以查看 Docker 中已经存在的网络。</p>
<p>在创建容器时，可以通过 <code>--network</code> 来指定容器所加入的网络，一旦这个参数被指定，容器便不会默认加入到 <code>bridge</code>
这个网络中，但是仍然可以通过 <code>--network bridge</code> 让其加入。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name mysql -e <span class="nv">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="o">=</span>yes --network individual mysql:5.7
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过 <code>docker inspect 容器名/ID</code> 观察此时的容器网络。</p>
<p>Docker 中如果两个容器处于不同的网络，之间是不能相互连接引用的。</p>
<h3 id="容器互联" class="headerLink">
    <a href="#%e5%ae%b9%e5%99%a8%e4%ba%92%e8%81%94" class="header-mark"></a>容器互联</h3><p>要让一个容器连接到另外一个容器，可以在容器通过 <code>docker create</code> 或 <code>docker run</code> 创建时通过 <code>--link</code> 选项进行配置。</p>
<p>例如，创建一个 MySQL 容器，将运行 Web 应用的容器连接到这个 MySQL 容器上，打通两个容器间的网络，实现它们之间的网络互通。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> docker run -d --name mysql -e <span class="nv">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="o">=</span>yes mysql
</span></span><span class="line"><span class="cl"> docker run -d --name webapp --link mysql webapp:latest
</span></span></code></pre></td></tr></table>
</div>
</div><p>容器间的网络已经打通，如何在 Web 应用中连接到 MySQL 数据库&#x2753;</p>
<p>Docker 为容器间连接提供了一种非常友好的方式，只需要将容器的网络命名（容器名）填入到连接地址中，就可以访问需要连接的容器了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mysql:3306
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这里，连接地址中的 mysql（容器名） 好比常见的域名解析，Docker 会将其指向 MySQL 容器的 IP 地址。</p>
<p>Docker 在容器互通中带来的一项便利就是，不再需要真实的知道另外一个容器的 IP 地址就能进行连接。在以往的开发中，每切换一个环境（例如将程序从开发环境提交到测试环境），都需要重新配置程序中的各项连接地址等参数，而在 Docker 里，并不需要关心这个，只需要程序中配置被连接容器的名称，映射 IP 的工作就可以交给 Docker。</p>
<p>在 Docker 里还支持连接时使用<strong>别名</strong>来摆脱容器名的限制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo docker run -d --name webapp --link mysql:database webapp:latest
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这里，使用 <code>--link &lt;name&gt;:&lt;alias&gt;</code> 的形式，连接到 MySQL 容器，并设置它的别名为 <code>database</code>。当我们要在 Web 应用中使用 MySQL 连接时，我们就可以使用 <code>database</code>
来代替连接地址了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">database:3306
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="端口映射" class="headerLink">
    <a href="#%e7%ab%af%e5%8f%a3%e6%98%a0%e5%b0%84" class="header-mark"></a>端口映射</h3><p>容器直接通过 Docker 网络进行的互相访问，在实际使用中，我们需要在容器外通过网络访问容器中的应用。最简单的一个例子，我们提供了 Web 服务，那么我们就需要提供一种方式访问运行在容器中的 Web 应用。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/4b474ffc3f9c468abe6086eb13d43428.png" title="端口映射" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/4b474ffc3f9c468abe6086eb13d43428.png" data-sub-html="<h2>端口映射</h2><p>端口映射</p>">
        
    </a><figcaption class="image-caption">端口映射</figcaption>
    </figure></p>
<p>通过 Docker 端口映射功能，可以把容器的端口映射到宿主操作系统的端口上，当我们从外部访问宿主操作系统的端口时，数据请求就会自动发送给与之关联的容器端口。</p>
<p>要映射端口，可以在创建容器时使用 -p 或者是 &ndash;publish 选项。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name nginx -p 80:80 -p 443:443 nginx:1.12
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用端口映射选项的格式是 <code>-p &lt;ip&gt;:&lt;host-port&gt;:&lt;container-port&gt;</code>，其中 ip 是宿主操作系统的监听 ip，可以用来控制监听的网卡，默认为 <code>0.0.0.0</code>，即是监听所有网卡。<code>host-port</code> 和
<code>container-port</code> 分别表示映射到宿主操作系统的端口和容器的端口，这两者是可以不一样的，比如，可以将容器的 80 端口映射到宿主操作系统的 8080 端口，传入 <code>-p 8080:80</code> 即可。</p>
<h2 id="文件挂载" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e6%8c%82%e8%bd%bd" class="header-mark"></a>文件挂载</h2><h3 id="bind-mount" class="headerLink">
    <a href="#bind-mount" class="header-mark"></a>Bind Mount</h3><p><code>Bind Mount</code>能够直接将宿主操作系统中的目录和文件挂载到容器内的文件系统中，通过指定容器外的路径和容器内的路径，就可以形成挂载映射关系，在容器内外对文件的读写，都是相互可见的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html nginx:1.12
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>-v</code> 或 <code>--volume</code> 来挂载宿主操作系统目录的形式是 <code>-v &lt;host-path&gt;:&lt;container-path&gt;</code>
或 <code>--volume &lt;host-path&gt;:&lt;container-path&gt;</code>，其中<code>host-path</code> 和 <code>container-path</code> 分别代表宿主操作系统中的目录和容器中的目录。这里需要注意的是，Docker 这里强制定义目录时
<strong>必须使用绝对路径，不能使用相对路径</strong>。</p>
<p>Docker 还支持以只读的方式挂载，通过只读方式挂载的目录和文件，只能被容器中的程序读取，但不接受容器中程序修改它们的请求。在挂载选项 <code>-v</code>
后再接上 <code>:ro</code> 就可以只读挂载了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html:ro nginx:1.12
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="volume" class="headerLink">
    <a href="#volume" class="header-mark"></a>Volume</h3><p><strong><ruby>数据卷<rt>Volume</rt></ruby></strong>是从宿主操作系统中挂载目录到容器内，只不过这个挂载的目录由 Docker 进行管理，<strong>只需要指定容器内的目录</strong>
，不需要关心具体挂载到了宿主操作系统中的哪里。</p>
<p>可以使用 <code>-v</code> 或 <code>--volume</code> 选项来定义数据卷的挂载。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name webapp -v /webapp/storage webapp:latest
</span></span></code></pre></td></tr></table>
</div>
</div><p>数据卷挂载到容器后，可以通过 <code>docker inspect 容器名/ID</code> 看到容器中数据卷挂载的信息&#x1f447;。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;Mounts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Type&#34;</span><span class="p">:</span> <span class="s2">&#34;volume&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Name&#34;</span><span class="p">:</span> <span class="s2">&#34;2bbd2719b81fbe030e6f446243386d763ef25879ec82bb60c9be7ef7f3a25336&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Source&#34;</span><span class="p">:</span> <span class="s2">&#34;/var/lib/docker/volumes/2bbd2719b81fbe030e6f446243386d763ef25879ec82bb60c9be7ef7f3a25336/_data&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Destination&#34;</span><span class="p">:</span> <span class="s2">&#34;/webapp/storage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Driver&#34;</span><span class="p">:</span> <span class="s2">&#34;local&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Mode&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;RW&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Propagation&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Source</code> 是 Docker 为我们分配用于挂载的宿主机目录，其位于 Docker 的资源区域，一般默认为 <code>/var/lib/docker</code>
。一般并不需要关心这个目录，一切对它的管理都已经在 Docker 内实现了。</p>
<p>为了方便识别数据卷，可以像命名容器一样为数据卷命名，这里的 <code>Name</code> 是数据卷的命名，在未给出数据卷命名的时候，Docker 会采用数据卷的 ID 命名数据卷。可以通过 <code>-v &lt;name&gt;:&lt;container-path&gt;</code>
这种形式来命名数据卷。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name webapp -v appdata:/webapp/storage webapp:latest
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>-v</code> 在定义<code>Bind Mount</code>时必须使用绝对路径，当不是绝对路径是就是<code>Volume</code> 的定义。</p>
</blockquote>
<h3 id="tmpfs-mount" class="headerLink">
    <a href="#tmpfs-mount" class="header-mark"></a>Tmpfs Mount</h3><p><code>Tmpfs Mount</code>支持挂载系统<strong>内存中</strong>的一部分到容器的文件系统里，不过由于内存和容器的特征，它的存储并不是持久的，其中的内容会随着容器的停止而消失。</p>
<p>挂载临时文件目录要通过 <code>--tmpfs</code> 这个选项来完成。由于内存的具体位置不需要指定，在这个选项里只需要传递挂载到容器内的目录即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d --name webapp --tmpfs /webapp/cache webapp:latest
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="镜像版本管理" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e7%89%88%e6%9c%ac%e7%ae%a1%e7%90%86" class="header-mark"></a>镜像版本管理</h2><p>工作中，当某个镜像不能满足我们的需求时，我们能够将容器内的修改记录下来，保存为一个新的镜像。</p>
<h3 id="提交修改生成新镜像" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e4%bf%ae%e6%94%b9%e7%94%9f%e6%88%90%e6%96%b0%e9%95%9c%e5%83%8f" class="header-mark"></a>提交修改生成新镜像</h3><p>以下以官方的 <a href="https://hub.docker.com/layers/nginx/library/nginx/1.12/images/sha256-4037a5562b030fd80ec889bb885405587a52cfef898ffb7402649005dfda75ff?context=explore" target="_blank" rel="noopener noreferrer">nginx:1.12</a>
镜像示例，修改后生成一个 nginx-v2 镜像。</p>
<p>先下载镜像&#x1f447;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl"><span class="c"># 下载镜像</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>docker pull nginx:1.12<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 运行容器</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>docker run --name mynginx -d nginx:1.12<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/39577e6404624bfeba82a985652b7103.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="下载镜像并启动容器" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/39577e6404624bfeba82a985652b7103.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>下载镜像并启动容器</h2><p>下载镜像并启动容器</p>">
        
    </a><figcaption class="image-caption">下载镜像并启动容器</figcaption>
    </figure></p>
<p>通过 <code>docker exec</code> 进入容器，并在 /root 目录下新增 hw.txt 文件，文件内容为 <code>hello world</code>：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/17f756252ad3482480613efb90087efd.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="添加新文件" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/17f756252ad3482480613efb90087efd.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>添加新文件</h2><p>添加新文件</p>">
        
    </a><figcaption class="image-caption">添加新文件</figcaption>
    </figure></p>
<p>将这个改动后的容器保存为新的镜像，<code>docker commit</code>提交这次修改，提交容器更新后产生的镜像并没 <code>REPOSITORY</code> 和 <code>TAG</code>
的内容，也就是说，这个新的镜像还没有名字。可以使用 <code>docker tag</code>
给新镜像命名。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/ff0c45e23ed1400487138fcc6c290a78.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="提交修改生成新镜像" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/ff0c45e23ed1400487138fcc6c290a78.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>提交修改生成新镜像</h2><p>提交修改生成新镜像</p>">
        
    </a><figcaption class="image-caption">提交修改生成新镜像</figcaption>
    </figure></p>
<h3 id="存出载入镜像" class="headerLink">
    <a href="#%e5%ad%98%e5%87%ba%e8%bd%bd%e5%85%a5%e9%95%9c%e5%83%8f" class="header-mark"></a>存出载入镜像</h3><p>对于某个镜像我们可以导出成一个 tar 包，也可以将一个 tar 镜像导入到系统中。</p>
<p><code>docker save -o</code> 命令可以将一个镜像导出为 tar 包&#x1f447;</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/a28fbe578b704a16b618a051838c19e1.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="导出镜像" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/a28fbe578b704a16b618a051838c19e1.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>导出镜像</h2><p>导出镜像</p>">
        
    </a><figcaption class="image-caption">导出镜像</figcaption>
    </figure></p>
<p>可以通过<code>docker load</code> 导入一个 tar 包为镜像，以下删除了原有的 nginx-v2 镜像，通过 nginx-v2.tar 成功导入了 nginx-v2 镜像。</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/6843de674516449f85ab8186120c96f4.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="导入镜像" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/6843de674516449f85ab8186120c96f4.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>导入镜像</h2><p>导入镜像</p>">
        
    </a><figcaption class="image-caption">导入镜像</figcaption>
    </figure></p>
<p>利用导入的 nginx-v2 镜像启动一个新容器 mynginxv2，在新容器中的 /root 就会有一个 hw.txt 新文件，内容为 <code>hello world</code>：</p>
<p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/29efb46165124cbf9eb9fbb668dad3c8.png?imageView2/0/q/75%7cwatermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" title="新镜像" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220428/29efb46165124cbf9eb9fbb668dad3c8.png?imageView2/0/q/75|watermark/2/text/eGlhb2JpbnF0/font/dmlqYXlh/fontsize/1000/fill/IzVDNUI1Qg==/dissolve/52/gravity/SouthEast/dx/15/dy/15" data-sub-html="<h2>新镜像</h2><p>新镜像</p>">
        
    </a><figcaption class="image-caption">新镜像</figcaption>
    </figure></p>
<h2 id="dockerfile" class="headerLink">
    <a href="#dockerfile" class="header-mark"></a>Dockerfile</h2><p>利用 Dockerfile 文件可以生成镜像，这对于自定义镜像非常优雅，也利于镜像分享，直接分享 Dockerfile 文件就可以了。</p>
<h3 id="常用指令" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e6%8c%87%e4%bb%a4" class="header-mark"></a>常用指令</h3><p><figure><a class="lightgallery" href="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/02c21142855e479a8826db7fcfbd438d.png" title="常用指令" data-thumbnail="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220509/02c21142855e479a8826db7fcfbd438d.png" data-sub-html="<h2>常用指令</h2><p>常用指令</p>">
        
    </a><figcaption class="image-caption">常用指令</figcaption>
    </figure></p>
<blockquote>
<p>Only the instructions <code>RUN</code>, <code>COPY</code>, <code>ADD</code> create layers. Other instructions create temporary intermediate images, and do not increase the size of the build.</p>
</blockquote>
<p>只有 RUN, COPY, ADD 会生成新的镜像层，其它指令只会产生临时层，不影响构建大小。</p>
<ul>
<li>&#x1f3c6;<code>FROM</code></li>
</ul>
<p>通过 <code>FROM</code> 指令指定一个基础镜像，接下来所有的指令都是基于这个镜像所展开的。
<strong>为了保证镜像精简，可以选用体积较小的镜像如<code>Alpine</code>或<code>Debian</code>作为基础镜像</strong>。</p>
<p><code>FROM</code> 指令支持三种形式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">FROM &lt;image&gt; <span class="o">[</span>AS &lt;name&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">FROM &lt;image&gt;<span class="o">[</span>:&lt;tag&gt;<span class="o">]</span> <span class="o">[</span>AS &lt;name&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">FROM &lt;image&gt;<span class="o">[</span>@&lt;digest&gt;<span class="o">]</span> <span class="o">[</span>AS &lt;name&gt;<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Dockerfile 中的第一条指令必须是 <code>FROM</code> 指令，因为没有了基础镜像，一切构建过程都无法开展。</p>
<ul>
<li>&#x1f3c6;<code>RUN</code></li>
</ul>
<p><code>RUN</code> 指令用于向控制台发送命令的指令，在 <code>RUN</code> 指令之后，我们直接拼接上需要执行的命令，在构建时，Docker 就会执行这些命令，并将它们对文件系统的修改记录下来，形成镜像的变化。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">RUN &lt;command&gt;
</span></span><span class="line"><span class="cl">RUN <span class="o">[</span><span class="s2">&#34;executable&#34;</span>, <span class="s2">&#34;param1&#34;</span>, <span class="s2">&#34;param2&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>RUN</code> 指令是支持 <code>\</code>换行的，如果单行的长度过长，建议对内容进行切割，方便阅读。</p>
<ul>
<li>&#x1f3c6;<code>ENTRYPOINT</code> 和 <code>CMD</code></li>
</ul>
<p>在容器启动时会根据镜像所定义的一条命令来启动容器中进程号为 1 的进程。而这个命令的定义，就是通过 Dockerfile 中的 <code>ENTRYPOINT</code> 和 <code>CMD</code> 实现的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;executable&#34;</span>, <span class="s2">&#34;param1&#34;</span>, <span class="s2">&#34;param2&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="nb">command</span> param1 param2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;executable&#34;</span>,<span class="s2">&#34;param1&#34;</span>,<span class="s2">&#34;param2&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;param1&#34;</span>,<span class="s2">&#34;param2&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">CMD <span class="nb">command</span> param1 param2
</span></span></code></pre></td></tr></table>
</div>
</div><p>当 <code>ENTRYPOINT</code> 与 <code>CMD</code> 同时给出时，<code>CMD</code> 中的内容会作为 <code>ENTRYPOINT</code> 定义命令的参数，最终执行容器启动的还是 <code>ENTRYPOINT</code>
中给出的命令。</p>
<ul>
<li>&#x1f3c6;<code>EXPOSE</code></li>
</ul>
<p>通过 EXPOSE 指令就可以为镜像指定要暴露的端口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">EXPOSE &lt;port&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>&#x1f3c6;VOLUME</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">VOLUME <span class="o">[</span><span class="s2">&#34;/data&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>VOLUME</code> 指令中定义的目录，在基于新镜像创建容器时，会自动建立为数据卷，不需要再单独使用 <code>-v</code> 选项来配置。</p>
<ul>
<li>&#x1f3c6;<code>LABEL</code></li>
</ul>
<p><code>LABEL</code>指令可以为生成的镜像添加元数据标签信息。这些信息可以用来辅助过滤出特定镜像。格式为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">LABEL &lt;key&gt;<span class="o">=</span>&lt;value&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LABEL <span class="nv">version</span><span class="o">=</span>1.2
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>&#x1f3c6; COPY 和 ADD</li>
</ul>
<p>在制作新的镜像的时候，可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 <code>COPY</code> 或 <code>ADD</code>
指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;src&gt;... &lt;dest&gt;
</span></span><span class="line"><span class="cl">ADD <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;src&gt;... &lt;dest&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;src&gt;&#34;</span>,... <span class="s2">&#34;&lt;dest&gt;&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">ADD <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;src&gt;&#34;</span>,... <span class="s2">&#34;&lt;dest&gt;&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>COPY</code> 与 <code>ADD</code> 指令的定义方式完全一样，需要注意的仅是当我们的目录中存在空格时，可以使用后两种格式避免空格产生歧义。</p>
<h3 id="arg-参数" class="headerLink">
    <a href="#arg-%e5%8f%82%e6%95%b0" class="header-mark"></a>ARG 参数</h3><p>在 Dockerfile 里，可以用 <code>ARG</code> 指令来建立一个参数变量，可以在构建时通过构建指令传入这个参数变量，并且在 Dockerfile 里使用它。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">FROM debian:stretch-slim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ARG TOMCAT_MAJOR
</span></span><span class="line"><span class="cl">ARG TOMCAT_VERSION
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RUN wget -O tomcat.tar.gz <span class="s2">&#34;https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-</span><span class="nv">$TOMCAT_MAJOR</span><span class="s2">/v</span><span class="nv">$TOMCAT_VERSION</span><span class="s2">/bin/apache-tomcat-</span><span class="nv">$TOMCAT_VERSION</span><span class="s2">.tar.gz&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在&#x261d;&#xfe0f;这个例子里，我们将 Tomcat 的版本号通过 <code>ARG</code> 指令定义为参数变量，在调用下载 Tomcat 包时，使用变量替换掉下载地址中的版本号。通过这样的定义，就可以让我们在不对 Dockerfile 进行大幅修改的前提下，轻松实现对 Tomcat 版本的切换并重新构建镜像了。</p>
<p>如果我们需要通过这个 Dockerfile 文件构建 Tomcat 镜像，我们可以在构建时通过 docker build 的 <code>--build-arg</code> 选项来设置参数变量。</p>
<p>Docker<strong>内置</strong>了一些镜像创建变量，用户可以直接使用而无须声明，包括（不区分大小写）<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>FTP_PROXY</code>
、<code>NO_PROXY</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build --build-arg <span class="nv">TOMCAT_MAJOR</span><span class="o">=</span><span class="m">8</span> --build-arg <span class="nv">TOMCAT_VERSION</span><span class="o">=</span>8.0.53 -t tomcat:8.0 ./tomcat
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="env-参数" class="headerLink">
    <a href="#env-%e5%8f%82%e6%95%b0" class="header-mark"></a>ENV 参数</h3><p>ENV 环境变量设置的实质，其实就是定义操作系统环境变量，所以在运行的容器里，一样拥有这些变量，而容器中运行的程序也能够得到这些变量的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">FROM debian:stretch-slim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ENV TOMCAT_MAJOR <span class="m">8</span>
</span></span><span class="line"><span class="cl">ENV TOMCAT_VERSION 8.0.53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>环境变量的值不是在构建指令中传入的，而是在 Dockerfile 中编写。由于环境变量在容器运行时依然有效，所以运行容器时我们也可以对其进行覆盖，在创建容器时使用 <code>-e</code> 或是 <code>--env</code>
选项，可以对环境变量的值进行修改或定义新的环境变量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>my-secret-pw -d mysql:5.7
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>ENV 指令所定义的变量，永远会覆盖 ARG 所定义的变量</strong>。</p>
<h2 id="faq" class="headerLink">
    <a href="#faq" class="header-mark"></a>FAQ</h2><h3 id="cmd-指令" class="headerLink">
    <a href="#cmd-%e6%8c%87%e4%bb%a4" class="header-mark"></a>CMD 指令</h3><p>CMD指令用来指定启动容器时默认执行的命令。支持三种格式：</p>
<ul>
<li>
<p><code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>：相当于执行 <code>executable param1 param2</code>，推荐方式。</p>
</li>
<li>
<p><code>CMD command param1 param2</code>：在默认的 Shell 中执行，提供给需要交互的应用。</p>
</li>
<li>
<p><code>CMD [&quot;param1&quot;, &quot;param2&quot;]</code>：提供给 ENTRYPOINT 的默认参数。</p>
</li>
</ul>
<p>每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p>
<h3 id="entrypoint-和-cmd-的区别" class="headerLink">
    <a href="#entrypoint-%e5%92%8c-cmd-%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>ENTRYPOINT 和 CMD 的区别</h3><p>这 2 个命令都是用来指定基于此镜像所创建容器里主进程的启动命令。</p>
<p><code>ENTRYPOINT</code> 指令的<strong>优先级高于</strong> <code>CMD</code> 指令。当 <code>ENTRYPOINT</code> 和 <code>CMD</code> 同时在镜像中被指定时，<code>CMD</code>
里的内容会作为 <code>ENTRYPOINT</code> 的参数，两者拼接之后，才是最终执行的命令。</p>
<table>
<thead>
<tr>
<th>ENTRYPOINT</th>
<th>CMD</th>
<th>实际执行</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ENTRYPOINT [&quot;/bin/ep&quot;, &quot;arge&quot;]</code></td>
<td></td>
<td><code>/bin/ep arge</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT /bin/ep arge</code></td>
<td></td>
<td><code>/bin/sh -c /bin/ep arge</code></td>
</tr>
<tr>
<td></td>
<td><code>CMD [&quot;/bin/exec&quot;, &quot;args&quot;]</code></td>
<td><code>/bin/exec args</code></td>
</tr>
<tr>
<td></td>
<td><code>CMD /bin/exec args</code></td>
<td><code>/bin/sh -c /bin/exec args</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT [&quot;/bin/ep&quot;, &quot;arge&quot;]</code></td>
<td><code>CMD [&quot;/bin/exec&quot;, &quot;argc&quot;]</code></td>
<td><code>/bin/ep arge /bin/exec argc</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT [&quot;/bin/ep&quot;, &quot;arge&quot;]</code></td>
<td><code>CMD /bin/exec args</code></td>
<td><code>/bin/ep arge /bin/sh -c /bin/exec args</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT /bin/ep arge</code></td>
<td><code>CMD [&quot;/bin/exec&quot;, &quot;argc&quot;]</code></td>
<td><code>/bin/sh -c /bin/ep arge /bin/exec argc</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT /bin/ep arge</code></td>
<td><code>CMD /bin/exec args</code></td>
<td><code>/bin/sh -c /bin/ep arge /bin/sh -c /bin/exec args</code></td>
</tr>
</tbody>
</table>
<p><code>ENTRYPOINT</code> 指令主要用于对容器进行一些初始化，而 <code>CMD</code> 指令则用于真正定义容器中主程序的启动命令。</p>
<p>创建容器时可以改写容器主程序的启动命令，而这个覆盖只会覆盖 <code>CMD</code> 中定义的内容，不会影响 <code>ENTRYPOINT</code> 中的内容。</p>
<p>每个 Dockerfile 中只能有一个<code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。在运行时，可以被<code>--entrypoint</code>
参数覆盖掉，如<code>docker run --entrypoint</code>。</p>
<blockquote>
<p>使用脚本文件来作为 <code>ENTRYPOINT</code> 的内容是常见的做法，因为对容器运行初始化的命令相对较多，全部直接放置在 <code>ENTRYPOINT</code>
后会特别复杂。</p>
</blockquote>
<h3 id="copy-和-add-的区别" class="headerLink">
    <a href="#copy-%e5%92%8c-add-%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>COPY 和 ADD 的区别</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;src&gt;... &lt;dest&gt;
</span></span><span class="line"><span class="cl">ADD <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;src&gt;... &lt;dest&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;src&gt;&#34;</span>,... <span class="s2">&#34;&lt;dest&gt;&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">ADD <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;src&gt;&#34;</span>,... <span class="s2">&#34;&lt;dest&gt;&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>两者的区别主要在于 <code>ADD</code> 能够支持使用网络端的 URL 地址作为 src 源，并且在源文件被识别为压缩包时，自动进行解压，而 <code>COPY</code>
没有这两个能力。</p>
<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>
<h3 id="写时复制" class="headerLink">
    <a href="#%e5%86%99%e6%97%b6%e5%a4%8d%e5%88%b6" class="header-mark"></a>写时复制</h3><p>在编程里，<strong><ruby>写时复制<rt>Copy on Write</rt></ruby></strong>
常常用于对象或数组的拷贝中，当拷贝对象或数组时，复制的过程并不是马上发生在内存中，而只是先让两个变量同时指向同一个内存空间，并进行一些标记，当要对对象或数组进行修改时，才真正进行内存的拷贝。</p>
<p>Docker 的写时复制与编程中的相类似，在通过镜像运行容器时，并不是马上就把镜像里的所有内容拷贝到容器所运行的沙盒文件系统中，而是利用 UnionFS 将镜像以只读的方式挂载到沙盒文件系统中。只有在容器中发生对文件的修改时，修改才会体现到沙盒环境上。 也就是说，容器在创建和启动的过程中，不需要进行任何的文件系统复制操作，也不需要为容器单独开辟大量的硬盘空间，与其他虚拟化方式对这个过程的操作进行对比，Docker 启动的速度可见一斑。</p>
<p>采用写时复制机制来设计的 Docker，既保证了镜像在生成为容器时，以及容器在运行过程中，不会对自身造成修改。又借助剔除常见虚拟化在初始化时需要从镜像中拷贝整个文件系统的过程，大幅提高了容器的创建和启动速度。可以说，Docker 容器能够实现秒级启动速度，写时复制机制在其中发挥了举足轻重的作用。</p>
<h3 id="docker-saveexport-区别" class="headerLink">
    <a href="#docker-saveexport-%e5%8c%ba%e5%88%ab" class="header-mark"></a>docker save、export 区别</h3><p><code>docker save</code> 和 <code>docker load</code> 是对镜像的操作，导入导出的是镜像文件。</p>
<p><code>docker export</code> 和 <code>docker import</code>是对容器的操作，是导出导入容器，导出一个已经创建的容器到一个文件，不管此时这个容器是否处于运行状态，可以理解为容器快照。</p>
<p>容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态，如标签信息会被丢弃），而镜像存储文件将保存完整记录，体积更大。从容器快照文件导入时可以重新指定标签等元数据信息。</p>
<h3 id="-v-和---mount-的区别" class="headerLink">
    <a href="#-v-%e5%92%8c---mount-%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>-v 和 &ndash;mount 的区别</h3><p>使用<code>-v</code>时，如果宿主机上没有这个文件，也会自动创建，如果使用<code>--mount</code>时，宿主机中没有这个文件会报错找不到这个文件，并创建失败。</p>
<p><code>--mount</code>由多个键-值对组成，以逗号分隔，每个键-值对由一个<code>&lt;key&gt;=&lt;value&gt;</code>元组组成。<code>--mount</code>语法比<code>-v</code>或<code>--volume</code>更冗长，但是键的顺序并不重要，标记的值也更容易理解。 挂载的类型<code>type</code>，可以是<code>bind</code>、<code>volume</code>或者<code>tmpfs</code>。</p>
<h3 id="镜像里的层都是只读不可修改的但容器运行的时候经常会写入数据这个冲突应该怎么解决" class="headerLink">
    <a href="#%e9%95%9c%e5%83%8f%e9%87%8c%e7%9a%84%e5%b1%82%e9%83%bd%e6%98%af%e5%8f%aa%e8%af%bb%e4%b8%8d%e5%8f%af%e4%bf%ae%e6%94%b9%e7%9a%84%e4%bd%86%e5%ae%b9%e5%99%a8%e8%bf%90%e8%a1%8c%e7%9a%84%e6%97%b6%e5%80%99%e7%bb%8f%e5%b8%b8%e4%bc%9a%e5%86%99%e5%85%a5%e6%95%b0%e6%8d%ae%e8%bf%99%e4%b8%aa%e5%86%b2%e7%aa%81%e5%ba%94%e8%af%a5%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3" class="header-mark"></a>镜像里的层都是只读不可修改的，但容器运行的时候经常会写入数据，这个冲突应该怎么解决</h3><div align="center">  </div>
<p>Docker 采用 UNION FS 文件系统，将文件系统分为上层和下层。即上层为容器层，下层为镜像层。如果下层有修改，运行容器时，上层会同步修改。如果上层有数据修改（即容器层数据修改），不会影响到下层（即镜像层）。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://book.douban.com/subject/30329430/" target="_blank" rel="noopener noreferrer">Docker技术入门与实战(第三版)</a></li>
<li><a href="https://www.cnblogs.com/zhangcz/p/15089684.html" target="_blank" rel="noopener noreferrer">对比Docker和虚拟机 </a></li>
<li><a href="https://juejin.cn/book/6844733746462064654" target="_blank" rel="noopener noreferrer">开发者必备的 Docker 实践指南</a></li>
<li><a href="https://www.cnblogs.com/ittranslator/p/13352727.html" target="_blank" rel="noopener noreferrer">Docker 基础知识 - 使用绑定挂载(bind mounts)管理应用程序数据</a></li>
<li><a href="https://www.php.cn/docker/" target="_blank" rel="noopener noreferrer">php 中文网 docker</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">Dockerfile reference</a></li>
</ul>
]]></description>
</item></channel>
</rss>
