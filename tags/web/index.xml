<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Web - 标签 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/tags/web/</link>
        <description>Web - 标签 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 11 Jun 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.xiaobinqt.cn/tags/web/" rel="self" type="application/rss+xml" /><item>
    <title>session cookie token 的区别</title>
    <link>https://www.xiaobinqt.cn/session-cookie-token-difference/</link>
    <pubDate>Sat, 11 Jun 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/session-cookie-token-difference/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.xiaobinqt.cn/xiaobinqt.io/20220824/ee39a9cb19524d918d984db89b1661a5.png" referrerpolicy="no-referrer">
            </div><!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="cookie-和-session" class="headerLink">
    <a href="#cookie-%e5%92%8c-session" class="header-mark"></a>1 Cookie 和 Session</h2><p>HTTP 协议是一种<code>无状态协议</code>，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session 和 Cookie 的主要目的就是为了弥补 HTTP 的无状态特性。</p>]]></description>
</item><item>
    <title>OAuth2.0的理解与应用</title>
    <link>https://www.xiaobinqt.cn/oauth2.0/</link>
    <pubDate>Tue, 22 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/oauth2.0/</guid>
    <description><![CDATA[<h2 id="什么是-oauth20" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af-oauth20" class="header-mark"></a>1 什么是 OAuth2.0</h2><p><strong>OAuth 的核心就是向第三方应用颁发令牌</strong>，比如网站 A 想用 Github 的信息，那么对于 Github 来说，网站 A 就是第三方应用。</p>
<p>第三方应用申请令牌之前，都必须先到系统备案，比如申请 Github 的令牌，得先到<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener noreferrer">github备案登记</a>， 说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p>]]></description>
</item><item>
    <title>JavaScript heap out of memory</title>
    <link>https://www.xiaobinqt.cn/node-oom/</link>
    <pubDate>Wed, 16 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/node-oom/</guid>
    <description><![CDATA[<p>刚在打包项目时执行 <code>yarn run build </code> 时出现了 oom 的情况，具体报错信息如下：</p>
<p><figure><a class="lightgallery" href="/90ed6000706b48e39d4da241245dd9f0_5783146336285632683.png" title="JavaScript heap out of memory" data-thumbnail="/90ed6000706b48e39d4da241245dd9f0_5783146336285632683.png" data-sub-html="<h2> </h2><p>JavaScript heap out of memory</p>"><img  loading="lazy" src='/90ed6000706b48e39d4da241245dd9f0_5783146336285632683.png' srcset="/90ed6000706b48e39d4da241245dd9f0_5783146336285632683_hu_a1912c5a44f593fb.webp 800w, /90ed6000706b48e39d4da241245dd9f0_5783146336285632683_hu_ff223f04dabb624e.webp 1200w, /90ed6000706b48e39d4da241245dd9f0_5783146336285632683_hu_b7230e40aaabfe1f.webp 1600w"  alt="JavaScript heap out of memory" height="867" width="1778"></a><figcaption class="image-caption"> </figcaption>
</figure></p>
<p>我的环境是 win10 专业版 WSL。</p>
<p>解决办法，设置 <code>export NODE_OPTIONS=--max_old_space_size=4096</code>，设置完之后重新执行 <code>yarn run build </code> 即可。</p>]]></description>
</item><item>
    <title>ajax 在请求时携带 cookie 信息</title>
    <link>https://www.xiaobinqt.cn/ajax-req-add-cookie/</link>
    <pubDate>Tue, 01 Mar 2022 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/ajax-req-add-cookie/</guid>
    <description><![CDATA[<p>最近有个需求在使用 $.ajax 时需要把 cookie 信息也带着，google 下发现可以这么写：</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    
    tw-flex 
    tw-flex-row
    tw-flex-1 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        code-block-button
        tw-mx-2 
        tw-flex
        tw-flex-row
        tw-flex-1"
      aria-hidden="true">
          <div class="group-[.is-open]:tw-rotate-90 tw-transition-[transform] tw-duration-500 tw-ease-in-out print:!tw-hidden tw-w-min tw-h-min tw-my-1 tw-mx-1"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></div>
          <p class="tw-select-none !tw-my-1">javascript</p>]]></description>
</item><item>
    <title>跨域问题</title>
    <link>https://www.xiaobinqt.cn/cross-domain/</link>
    <pubDate>Mon, 18 Mar 2019 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/cross-domain/</guid>
    <description><![CDATA[<!-- author： xiaobinqt -->
<!-- email： xiaobinqt@163.com -->
<!-- https://xiaobinqt.github.io -->
<!-- https://www.xiaobinqt.cn -->
<h2 id="同源策略" class="headerLink">
    <a href="#%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5" class="header-mark"></a>1 同源策略</h2><p>同源策略是浏览器的一个安全行为，是指浏览器对不同源的脚本或文本的访问方式进行限制。比如，ajax 在进行请求时，浏览器要求当前网页和请求地址必须同源，也就是协议，域名和端口必须相同。</p>]]></description>
</item></channel>
</rss>
