<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第二部分 破冰 on HTTP 协议学习笔记</title>
    <link>https://example.com/http/docs/part2-break-ice/</link>
    <description>Recent content in 第二部分 破冰 on HTTP 协议学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/http/docs/part2-break-ice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.1 代理</title>
      <link>https://example.com/http/docs/part2-break-ice/2.1-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.1-proxy/</guid>
      <description>&lt;h1 id=&#34;21-代理&#34;&gt;&#xA;  2.1 代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;代理最基本的一个功能是&lt;strong&gt;负载均衡&lt;/strong&gt;。因为在面向客户端时屏蔽了源服务器，客户端看到的只是代理服务器，源服务器究竟有多少台、是哪些&#xA;IP 地址都不知道。于是代理服务器就可以掌握请求分发的 “大权”，决定由后面的哪台服务器来响应请求。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230505/32a9bd32b05f43e59ce0a32d7273ea17.png&#34; width=600  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;在负载均衡的同时，代理服务还可以执行更多的功能，比如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;健康检查：使用“心跳”等机制监控后端服务器，发现有故障就及时“踢出”集群，保证服务高可用；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安全防护：保护被代理的后端服务器，限制 IP 地址或流量，抵御网络攻击和过载；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;加密卸载：对外网使用 SSL/TLS 加密通信认证，而在安全的内网不加密，消除加解密成本；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据过滤：拦截上下行的数据，任意指定策略修改请求或者响应；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;内容缓存：暂存、复用服务器响应。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;211-匿名代理&#34;&gt;&#xA;  2.1.1 匿名代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-%e5%8c%bf%e5%90%8d%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;匿名代理（Anonymous Proxy）用于隐藏客户端的真实 IP 地址，使客户端在互联网上的活动难以被追踪。匿名代理通常是由第三方提供的，客户端需要将网络流量转发给代理服务器，代理服务器会替代客户端向目标服务器发送请求，并将响应返回给客户端。&lt;/p&gt;&#xA;&lt;p&gt;匿名代理的主要功能是隐藏客户端的真实 IP 地址，使客户端在互联网上的活动更加隐秘和安全。因为许多网站和服务都会记录访问者的 IP 地址，如果客户端使用匿名代理进行访问，就可以避免自己的真实 IP 地址被记录和追踪。匿名代理也可以用于访问被封锁的网站和服务，因为代理服务器的 IP 地址通常不会被封锁。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，匿名代理并不能完全保障客户端的隐私和安全，因为代理服务器仍然可以访问客户端的真实 IP 地址和网络流量。此外，一些不良的匿名代理可能会收集客户端的个人信息或恶意篡改网络流量，导致客户端的网络安全受到威胁。因此，使用匿名代理时应该选择可靠的服务提供商，并保持警惕。&lt;/p&gt;&#xA;&lt;h2 id=&#34;212-透明代理&#34;&gt;&#xA;  2.1.2 透明代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#212-%e9%80%8f%e6%98%8e%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;透明代理（Transparent Proxy）在转发客户端请求时不会修改任何请求头信息，目标服务器可以获取到客户端的真实 IP 地址和其他相关信息。透明代理通常是由 ISP（Internet Service Provider，互联网服务提供商）或公司内部网络部署的。&lt;/p&gt;&#xA;&lt;p&gt;与匿名代理和高匿代理不同，透明代理不会对客户端的请求进行任何加密或隐藏，客户端无法隐匿自己的真实身份和位置。这种代理的主要作用是提高访问速度、节约带宽和监控网络流量。例如，ISP 可以通过透明代理实现流量控制、缓存加速、防火墙过滤等功能，公司可以通过透明代理实现员工网络访问的管理和监控。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，透明代理在传输数据时不会加密，因此在使用透明代理时，用户应该注意保护自己的数据安全。另外，一些不良的透明代理可能会篡改用户的网络流量或收集用户的个人信息，因此用户需要选择可靠的代理服务提供商，并保持警惕。&lt;/p&gt;&#xA;&lt;h2 id=&#34;213-正向代理&#34;&gt;&#xA;  2.1.3 正向代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#213-%e6%ad%a3%e5%90%91%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正向代理的代理服务器是部署在客户端，而对服务端来说，它以为对它发起请求的是代理服务器，而真正请求的客户端对服务端来说是不可见的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;214-反向代理&#34;&gt;&#xA;  2.1.4 反向代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#214-%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;反向代理的代理服务器是部署在服务端，而对客户端来说，它以为对它做出响应的是代理服务器，而真正响应的服务端对客户端来说是不可见的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;215-头字段&#34;&gt;&#xA;  2.1.5 头字段&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#215-%e5%a4%b4%e5%ad%97%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;via&#34;&gt;&#xA;  Via&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#via&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Via 是一个通用字段，请求头或响应头里都可以出现。每当报文经过一个代理节点，代理服务器就会把自身的信息追加到字段的末尾，就像是经手人盖了一个章。如果通信链路中有很多中间代理，就会在 Via 里形成一个链表，这样就可以知道报文究竟走过了多少个环节才到达了目的地。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.2 网络分层模型</title>
      <link>https://example.com/http/docs/part2-break-ice/2.2-network-layer-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.2-network-layer-model/</guid>
      <description>&lt;h1 id=&#34;22-网络分层模型&#34;&gt;&#xA;  2.2 网络分层模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%bd%91%e7%bb%9c%e5%88%86%e5%b1%82%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;221-tcpip-网络分层模型&#34;&gt;&#xA;  2.2.1 TCP/IP 网络分层模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#221-tcpip-%e7%bd%91%e7%bb%9c%e5%88%86%e5%b1%82%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230417/55686e4e27f548ef9cf4eb040f3deddf.png&#34; width=800  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;TCP/IP 协议总共有四层，每一层需要下层的支撑，同时又支撑着上层，任何一层被抽掉都可能会导致整个协议栈坍塌。&lt;/p&gt;&#xA;&lt;p&gt;第一层叫 “链接层”（link layer），负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。&lt;/p&gt;&#xA;&lt;p&gt;第二层叫 “网际层 ”或者 “网络互连层”（internet layer），IP 协议就处在这一层。因为 IP 协议定义了 “IP 地址” 的概念，所以就可以在 “链接层” 的基础上，用 IP 地址取代 MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再 “翻译” 成 MAC 地址就可以了。&lt;/p&gt;&#xA;&lt;p&gt;第三层叫 “传输层”（transport layer），这个层次协议的职责是保证数据在 IP 地址标记的两点之间“可靠”地传输，是 TCP/UDP 协议工作的层次。TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的 “字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。&lt;/p&gt;&#xA;&lt;p&gt;协议栈的第四层叫 “应用层”（application layer），由于有了下面的三层的基础，在这一层有各种面向具体应用的协议。例如 Telnet、SSH、FTP、SMTP 等等，当然还有 HTTP。&lt;/p&gt;&#xA;&lt;p&gt;MAC 层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。&lt;/p&gt;&#xA;&lt;h2 id=&#34;222-osi-网络分层模型&#34;&gt;&#xA;  2.2.2 OSI 网络分层模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#222-osi-%e7%bd%91%e7%bb%9c%e5%88%86%e5%b1%82%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;OSI，全称是“开放式系统互联通信参考模型”（Open System Interconnection Reference Model）。由于 TCP/IP 诞生于 1970 年代，当时除了它还有很多其他的网络协议，整个网络世界比较混乱。这个时候国际标准组织（ISO）注意到了这种现象，感觉 “野路子” 太多，就想要来个 “大一统”。于是设计出了一个新的网络分层模型，想用这个新框架来统一既存的各种网络协议，这就是 OSI 模型的来历。OSI 模型分成了七层，部分层次与 TCP/IP 很像，从下到上分别是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.3 实体数据</title>
      <link>https://example.com/http/docs/part2-break-ice/2.3-entity-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.3-entity-data/</guid>
      <description>&lt;h1 id=&#34;23-实体数据&#34;&gt;&#xA;  2.3 实体数据&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%ae%9e%e4%bd%93%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;231-mime&#34;&gt;&#xA;  2.3.1 MIME&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#231-mime&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;“多用途互联网邮件扩展”（Multipurpose Internet Mail Extensions），简称为 MIME。&lt;/p&gt;&#xA;&lt;p&gt;HTTP 用 MIME 标准规范来标记 body 的数据类型，这就是 “MIME type”。MIME 把数据分成了八大类，每个大类下再细分出多个子类，形式是“type/subtype” 的字符串。&lt;/p&gt;&#xA;&lt;p&gt;简单列举一下在 HTTP 里经常遇到的几个类别：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;text：文本格式的可读数据，最熟悉的应该就是 text/html 了，表示超文本文档，此外还有纯文本 text/plain、样式表 text/css 等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;image：图像文件，有 image/gif、image/jpeg、image/png 等。audio/video：音频和视频数据，例如 audio/mpeg、video/mp4 等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;application：数据格式不固定，可能是文本也可能是二进制，必须由上层应用程序来解释。常见的有 application/json，application/javascript、application/pdf 等，另外，如果实在是不知道数据是什么类型，像刚才说的 “黑盒”，就会是 application/octet-stream，即不透明的二进制数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;HTTP 在传输时为了节约带宽，有时候还会压缩数据，为了不要让浏览器 “猜”，还需要有一个 “Encoding type”，告诉数据是用的什么编码格式，这样对方才能正确解压缩，还原出原始的数据。比起 MIME type 来说，Encoding type 就少了很多，常用的只有下面三种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;gzip：GNU zip 压缩格式，也是互联网上最流行的压缩格式；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;deflate：zlib（deflate）压缩格式，流行程度仅次于 gzip；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;br：一种专门为 HTTP 优化的新压缩算法（Brotli）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230504/d821efc789304039a01b0ca1e22885b1.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;Accept 字段标记的是客户端可理解的 MIME type，可以用 “,” 做分隔符列出多个类型，让服务器有更多的选择余地，例如下面的这个头：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Accept: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html,application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xml,image&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;webp,image&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是告诉服务器：“我能够看懂 HTML、XML 的文本，还有 webp 和 png 的图片，请给我这四类格式的数据”。相应的，服务器会在响应报文里用头字段 Content-Type 告诉实体数据的真实类型：&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.4 连接管理</title>
      <link>https://example.com/http/docs/part2-break-ice/2.4-connection-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.4-connection-management/</guid>
      <description>&lt;h1 id=&#34;24-连接管理&#34;&gt;&#xA;  2.4 连接管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-%e8%bf%9e%e6%8e%a5%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;241-短连接与长连接&#34;&gt;&#xA;  2.4.1 短连接与长连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#241-%e7%9f%ad%e8%bf%9e%e6%8e%a5%e4%b8%8e%e9%95%bf%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;HTTP 协议最初（0.9/1.0）是个非常简单的协议，通信过程也采用了简单的 “请求 - 应答” 方式。它底层的数据传输基于 TCP/IP，每次发送请求前需要先与服务器建立连接，收到响应报文后会立即关闭连接。因为客户端与服务器的整个连接过程很短暂，不会与服务器保持长时间的连接状态，所以就被称为 “短连接”（short-lived connections）。&lt;/p&gt;&#xA;&lt;p&gt;早期的 HTTP 协议也被称为是 “无连接” 的协议。短连接的缺点相当严重，因为在 TCP 协议里，建立连接和关闭连接都是非常 “昂贵” 的操作&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230504/caa7ecae49c84f708aa2f2759c771e7c.png&#34; width=800  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;针对短连接暴露出的缺点，HTTP 协议就提出了 “长连接” 的通信方式，也叫 “持久连接”（persistent connections）、“连接保活”（keep alive）、“连接复用”（connection reuse）。&lt;/p&gt;&#xA;&lt;p&gt;长连接使用的 “成本均摊” 的思路，既然 TCP 的连接和关闭非常耗时间，那么就把这个时间成本由原来的一个 “请求 - 应答” 均摊到多个 “请求 - 应答” 上。这样虽然不能改善 TCP 的连接效率，但基于 “分母效应”，每个 “请求 - 应答” 的无效时间就会降低不少，整体传输效率也就提高了。&lt;/p&gt;&#xA;&lt;p&gt;由于长连接对性能的改善效果非常显著，所以&lt;strong&gt;在 HTTP/1.1 中的连接都会默认启用长连接&lt;/strong&gt;。不需要用什么特殊的头字段指定，只要向服务器发送了第一次请求，后续的请求都会重复利用第一次打开的 TCP 连接，也就是长连接，在这个连接上收发数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;242-关闭连接&#34;&gt;&#xA;  2.4.2 关闭连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#242-%e5%85%b3%e9%97%ad%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;因为 TCP 连接长时间不关闭，服务器必须在内存里保存它的状态，这就占用了服务器的资源。如果有大量的空闲长连接只连不发，就会很快耗尽服务器的资源，导致服务器无法为真正有需要的用户提供服务。所以，长连接也需要在恰当的时间关闭，不能永远保持与服务器的连接，这在客户端或者服务器都可以做到。&lt;/p&gt;&#xA;&lt;p&gt;在客户端，可以在请求头里加上 “Connection: close” 字段，告诉服务器：“这次通信后就关闭连接”。服务器看到这个字段，就知道客户端要主动关闭连接，于是在响应报文里也加上这个字段，发送之后就调用 Socket API 关闭 TCP 连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.5 Cookie</title>
      <link>https://example.com/http/docs/part2-break-ice/2.5-cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.5-cookie/</guid>
      <description>&lt;h1 id=&#34;25-cookie&#34;&gt;&#xA;  2.5 Cookie&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#25-cookie&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;251-什么是-cookie&#34;&gt;&#xA;  2.5.1 什么是 Cookie&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#251-%e4%bb%80%e4%b9%88%e6%98%af-cookie&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当用户通过浏览器第一次访问服务器的时候，服务器肯定是不知道他的身份的。所以，就要创建一个独特的身份标识数据，格式是 “key=value”，然后放进 Set-Cookie 字段里，随着响应报文一同发给浏览器。&lt;/p&gt;&#xA;&lt;p&gt;浏览器收到响应报文，看到里面有 Set-Cookie，知道这是服务器给的身份标识，于是就保存起来，下次再请求的时候就自动把这个值放进 Cookie 字段里发给服务器。因为第二次请求里面有了 Cookie 字段，服务器就知道这个用户不是新人，之前来过，就可以拿出 Cookie 里的值，识别出用户的身份，然后提供个性化的服务。服务器有时会在响应头里添加多个 Set-Cookie，存储多个 “key=value”。但浏览器这边发送时不需要用多个 Cookie 字段，只要在一行里用 “;” 隔开就行。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230505/b5ae951715fe4c2a834b9fe063ec5308.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;252-cookie-的属性&#34;&gt;&#xA;  2.5.2 Cookie 的属性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#252-cookie-%e7%9a%84%e5%b1%9e%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;生存周期&#34;&gt;&#xA;  生存周期&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%9f%e5%ad%98%e5%91%a8%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Cookie 的生存周期，也就是它的有效期，让它只能在一段时间内可用，一旦超过这个期限浏览器就认为是 Cookie 失效，在存储里删除，也不会发送给服务器。&lt;/p&gt;&#xA;&lt;p&gt;Cookie 的有效期可以使用 Expires 和 Max-Age 两个属性来设置。Expires 俗称过期时间，用的是&lt;strong&gt;绝对时间点&lt;/strong&gt;，可以理解为截止日期（deadline）。Max-Age 用的是相对时间，单位是秒，浏览器用收到报文的时间点再加上 Max-Age，就可以得到失效的绝对时间。&lt;/p&gt;&#xA;&lt;p&gt;Expires 和 Max-Age 可以同时出现，两者的失效时间可以一致，也可以不一致，但浏览器会优先采用 Max-Age 计算失效期。&lt;/p&gt;&#xA;&lt;p&gt;如果不指定 Expires 或 Max-Age 属性，那么 Cookie 仅在浏览器运行时有效，一旦浏览器关闭就会失效，这被称为会话 Cookie (session cookie) 或内存 Cookie (in-memory cookie), 在 Chrome 浏览器里过期时间会显示为 “Session” 或 “N/A”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.6 Cache</title>
      <link>https://example.com/http/docs/part2-break-ice/2.6-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.6-cache/</guid>
      <description>&lt;h1 id=&#34;26-cache&#34;&gt;&#xA;  2.6 Cache&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#26-cache&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;261-服务端缓存控制&#34;&gt;&#xA;  2.6.1 服务端缓存控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#261-%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bc%93%e5%ad%98%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;服务器标记资源有效期使用的头字段是 “Cache-Control”，里面的值 “max-age=30” 就是资源的有效时间，相当于告诉浏览器，“这个页面只能缓存&#xA;30 秒，之后就算是过期，不能用。”&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;除了 “Cache-Control&amp;rsquo;”，服务器也可以用 “Expires” 字段来标记资源的有效期，它的形式和 Cookie 的差不多，同样属于 “过时”&#xA;的属性，优先级低于 “Cache-Control&amp;rsquo;”。&lt;br/&gt;&lt;br/&gt; 还有一个历史遗留字段 “Pragma:no-cache”，它相当于 “Cache-Control:&#xA;no-cache”，除非为了兼容HTTP/1.0 否则不建议使用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这里的 max-age 是 “生存时间”（又叫“新鲜度” “缓存寿命”，类似 TTL，Time-To-Live），时间的计算起点是响应报文的创建时刻（即 Date&#xA;字段，也就是离开服务器的时刻），而不是客户端收到报文的时刻，也就是说包含了在链路传输过程中所有节点所停留的时间。&lt;/p&gt;&#xA;&lt;p&gt;“max-age” 是 HTTP 缓存控制最常用的属性，此外在响应报文里还可以用其他的属性来更精确地指示浏览器应该如何使用缓存：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;no-store：不允许缓存，用于某些变化非常频繁的数据，例如秒杀页面；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;no-cache：它的字面含义容易与 no-store 搞混，实际的意思并不是不允许缓存，而是可以缓存，但在使用之前必须要去服务器验证是否过期，是否有最新的版本；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;must-revalidate：又是一个和 no-cache 相似的词，它的意思是如果缓存不过期就可以继续使用，但过期了如果还想用就必须去服务器验证。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;可以拿生鲜速递来举例说明一下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;no-store：买来的西瓜不允许放进冰箱，要么立刻吃，要么立刻扔掉；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;no-cache：可以放进冰箱，但吃之前必须问超市有没有更新鲜的，有就吃超市里的；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;must-revalidate：可以放进冰箱，保鲜期内可以吃，过期了就要问超市让不让吃。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230505/25b53036a57240c49c6f42f2eb945886.png&#34; width=600  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;262-客户端缓存控制&#34;&gt;&#xA;  2.6.2 客户端缓存控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#262-%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bc%93%e5%ad%98%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;其实不止服务器可以发 “Cache-Control” 头，浏览器也可以发 “Cache-Control”，也就是说请求 - 应答的双方都可以用这个字段进行缓存控制，互相协商缓存的使用策略。&lt;/p&gt;&#xA;&lt;p&gt;当点 “刷新” 按钮的时候，浏览器会在请求头里加一个 “Cache-Control: max-age=0”。因为 max-age 是 “生存时间”，max-age=0&#xA;的意思就是拿到最新的数据，而本地缓存里的数据至少保存了几秒钟，所以浏览器就不会使用缓存，而是向服务器发请求。服务器看到&#xA;max-age=0，也就会用一个最新生成的报文回应浏览器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.7 HTTPS</title>
      <link>https://example.com/http/docs/part2-break-ice/2.7-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.7-https/</guid>
      <description>&lt;h1 id=&#34;27-https&#34;&gt;&#xA;  2.7 HTTPS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#27-https&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;271-什么是-https&#34;&gt;&#xA;  2.7.1 什么是 https&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#271-%e4%bb%80%e4%b9%88%e6%98%af-https&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果通信过程具备了四个特性，就可以认为是 “安全” 的，这四个特性是：机密性、完整性，身份认证和不可否认。HTTPS 为 HTTP 增加了这四大安全特性。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;机密性由对称加密 AES 保证，完整性由 SHA384 摘要算法保证，身份认证和不可否认由RSA非对称加密保证&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;HTTPS 规定了新的协议名 “https”，默认端口号 443，至于其他的什么请求 - 应答模式、报文结构、请求方法、URI、头字段、连接管理等等都完全沿用 HTTP，没有任何新的东西。也就是说，除了协议名 “http” 和端口号 80 这两点不同，HTTPS 协议在语法、语义上和 HTTP 完全一样，优缺点也 “照单全收”（当然要除去 “明文” 和 “不安全”）。&lt;/p&gt;&#xA;&lt;p&gt;HTTPS 把 HTTP 下层的传输协议由 TCP/IP 换成了 SSL/TLS，由 “HTTP over TCP/IP” 变成了 “HTTP over SSL/TLS”，让 HTTP 运行在了安全的 SSL/TLS 协议上，收发报文不再使用 Socket API，而是调用专门的安全接口。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230506/55981510622840d58db55ca55f8cb973.png&#34; width=800  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;272-ssltls&#34;&gt;&#xA;  2.7.2 SSL/TLS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#272-ssltls&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SSL 即安全套接层（Secure Sockets Layer），在 OSI 模型中处于第 5 层（会话层），由网景公司于 1994 年发明，有 v2 和 v3 两个版本，而 v1 因为有严重的缺陷从未公开过。SSL 发展到 v3 时已经证明了它自身是一个非常好的安全通信协议，于是互联网工程组 IETF 在 1999 年把它改名为 TLS（传输层安全，Transport Layer Security），正式标准化，版本号从 1.0 重新算起，所以 TLS1.0 实际上就是 SSLv3.1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.8 TLS 连接</title>
      <link>https://example.com/http/docs/part2-break-ice/2.8-tls-connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part2-break-ice/2.8-tls-connect/</guid>
      <description>&lt;h1 id=&#34;28-tls-连接&#34;&gt;&#xA;  2.8 TLS 连接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#28-tls-%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;在 HTTP 协议里，建立连接后，浏览器会立即发送请求报文，但在 HTTPS 协议中，它需要再用另外一个 “握手” 过程，在 TCP 上建立安全连接，之后才是收发 HTTP 报文。&lt;/p&gt;&#xA;&lt;h2 id=&#34;281-tls-协议组成&#34;&gt;&#xA;  2.8.1 TLS 协议组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#281-tls-%e5%8d%8f%e8%ae%ae%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;TLS 包含几个子协议，可以理解为是由几个不同职责的模块组成，比较常用的有记录协议、警报协议、握手协议、变更密码规范协议等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;记录协议&#34;&gt;&#xA;  记录协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%b0%e5%bd%95%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;记录协议（Record Protocol）规定了 TLS 收发数据的基本单位：记录（record）。它有点像是 TCP 里的 segment，所有的其他子协议都需要通过记录协议发出。但多个记录数据可以在一个 TCP 包里一次性发出，也并不需要像 TCP 那样返回 ACK。&lt;/p&gt;&#xA;&lt;h3 id=&#34;警报协议&#34;&gt;&#xA;  警报协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ad%a6%e6%8a%a5%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;警报协议（Alert Protocol）的职责是向对方发出警报信息，有点像是 HTTP 协议里的状态码。比如，protocol_version 就是不支持旧版本，bad_certificate 就是证书有问题，收到警报后另一方可以选择继续，也可以立即终止连接。&lt;/p&gt;&#xA;&lt;h3 id=&#34;握手协议&#34;&gt;&#xA;  握手协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%a1%e6%89%8b%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;握手协议（Handshake Protocol）是 TLS 里最复杂的子协议，要比 TCP 的 SYN/ACK 复杂的多，浏览器和服务器会在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。&lt;/p&gt;&#xA;&lt;h3 id=&#34;变更密码规范协议&#34;&gt;&#xA;  变更密码规范协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e6%9b%b4%e5%af%86%e7%a0%81%e8%a7%84%e8%8c%83%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;变更密码规范协议（Change Cipher Spec Protocol），就是一个 “通知”，告诉对方，后续的数据都将使用加密保护。那么反过来，在它之前，数据都是明文的。&lt;/p&gt;&#xA;&lt;p&gt;下面的这张图简要地描述了 TLS 的握手过程，其中每一个 “框” 都是一个记录，多个记录组合成一个 TCP 包发送。所以，最多经过两次消息往返（4 个消息）就可以完成握手，然后就可以在安全的通信环境里发送 HTTP 报文，实现 HTTPS 协议。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
