<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一部分 总览 on HTTP 协议学习笔记</title>
    <link>https://example.com/http/docs/part1-overview/</link>
    <description>Recent content in 第一部分 总览 on HTTP 协议学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/http/docs/part1-overview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 基础概念</title>
      <link>https://example.com/http/docs/part1-overview/1.1-basic-concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.1-basic-concept/</guid>
      <description>&lt;h1 id=&#34;11-基础概念&#34;&gt;&#xA;  1.1 基础概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;111-请求和响应报文&#34;&gt;&#xA;  1.1.1 请求和响应报文&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e8%af%b7%e6%b1%82%e5%92%8c%e5%93%8d%e5%ba%94%e6%8a%a5%e6%96%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。&lt;/p&gt;&#xA;&lt;p&gt;请求报文结构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一行是包含了请求方法、URL、协议版本；&lt;/li&gt;&#xA;&lt;li&gt;接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。&lt;/li&gt;&#xA;&lt;li&gt;一个空行用来分隔首部和内容主体 Body&lt;/li&gt;&#xA;&lt;li&gt;最后是请求的内容主体&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET http:&lt;span style=&#34;color:#75715e&#34;&gt;//www.example.com/ HTTP/1.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Accept: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html,application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xhtml&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;xml,application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xml;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;,image&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;webp,image&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;apng,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;,application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exchange;v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b3;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Accept&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Encoding: gzip, deflate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Accept&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Language: zh&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CN,zh;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;,en;q&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cache&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Control: max&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host: www.example.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Modified&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Since: Thu, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Match: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3147526947+gzip&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Proxy&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Connection: keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Upgrade&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Insecure&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Requests: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Agent: Mozilla&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt; xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;param1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;param2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应报文结构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了&lt;/li&gt;&#xA;&lt;li&gt;接下来多行也是首部内容&lt;/li&gt;&#xA;&lt;li&gt;一个空行分隔首部和内容主体&lt;/li&gt;&#xA;&lt;li&gt;最后是响应的内容主体&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Age: &lt;span style=&#34;color:#ae81ff&#34;&gt;529651&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cache&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Control: max&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;604800&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection: keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Encoding: gzip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;648&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;UTF&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date: Mon, &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Etag: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3147526947+ident+gzip&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Expires: Mon, &lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Alive: timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Modified: Thu, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Proxy&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Connection: keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Server: &lt;span style=&#34;color:#a6e22e&#34;&gt;ECS&lt;/span&gt; (sjc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;DF)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vary: Accept&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Encoding&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Cache: HIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Example Domain&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 省略... &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;112-url&#34;&gt;&#xA;  1.1.2 URL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-url&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;HTTP 使用 URL（ U niform Resource Locator，统一资源定位符）来定位资源，它是 URI（Uniform Resource Identifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.2 概述</title>
      <link>https://example.com/http/docs/part1-overview/1.2-net-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.2-net-overview/</guid>
      <description>&lt;h1 id=&#34;12-概述&#34;&gt;&#xA;  1.2 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;网络把主机连接起来，而互连网（internet）是把多种不同的网络连接起来，因此互连网是网络的网络。而互联网（Internet）是全球范围的互连网。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/c6e4e5ab60634da49ebd982df8372706.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;121-isp&#34;&gt;&#xA;  1.2.1 ISP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#121-isp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;互联网服务提供商 ISP（Internet Service Provider） 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等联网设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/cd45b18ae3bf4d2ebb149cff2ceead6b.png&#34; alt=&#34;ISP&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;目前的互联网是一种多层次 ISP 结构，ISP 根据覆盖面积的大小分为第一层 ISP、区域 ISP 和接入 ISP。互联网交换点 IXP（Internet Exchange Point） 允许两个 ISP 直接相连而不用经过第三个 ISP。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/2d51d56777b2465da286d9c65f8df01a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;122-主机之间的通信方式&#34;&gt;&#xA;  1.2.2 主机之间的通信方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#122-%e4%b8%bb%e6%9c%ba%e4%b9%8b%e9%97%b4%e7%9a%84%e9%80%9a%e4%bf%a1%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户-服务器（C/S）：客户是服务的请求方，服务器是服务的提供方。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/ca404b51ac3148329dd3236eebbb15b3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对等（P2P）：不区分客户和服务器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/a3a25588f44b459997e8be8a47bab7c3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;123-电路交换与分组交换&#34;&gt;&#xA;  1.2.3 电路交换与分组交换&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e7%94%b5%e8%b7%af%e4%ba%a4%e6%8d%a2%e4%b8%8e%e5%88%86%e7%bb%84%e4%ba%a4%e6%8d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;电路交换&#34;&gt;&#xA;  电路交换&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%b5%e8%b7%af%e4%ba%a4%e6%8d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。&lt;/p&gt;&#xA;&lt;h3 id=&#34;分组交换&#34;&gt;&#xA;  分组交换&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%bb%84%e4%ba%a4%e6%8d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换不需要占用传输线路。&lt;/p&gt;&#xA;&lt;p&gt;在一个邮局通信系统中，邮局收到一份邮件之后，先存储下来，然后把相同目的地的邮件一起转发到下一个目的地，这个过程就是存储转发过程，分组交换也使用了存储转发过程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;124-时延&#34;&gt;&#xA;  1.2.4 时延&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#124-%e6%97%b6%e5%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;总时延 = 排队时延 + 处理时延 + 传输时延 + 传播时延&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.3 物理层</title>
      <link>https://example.com/http/docs/part1-overview/1.3-physical-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.3-physical-layer/</guid>
      <description>&lt;h1 id=&#34;13-物理层&#34;&gt;&#xA;  1.3 物理层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e7%89%a9%e7%90%86%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;通信方式&#34;&gt;&#xA;  通信方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e4%bf%a1%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;根据信息在传输线上的传送方向，分为以下三种通信方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单工通信：单向传输&lt;/li&gt;&#xA;&lt;li&gt;半双工通信：双向交替传输&lt;/li&gt;&#xA;&lt;li&gt;全双工通信：双向同时传输&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;带通调制&#34;&gt;&#xA;  带通调制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%a6%e9%80%9a%e8%b0%83%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/4bc02805507f4b6fb0f84b24e310e80b.png&#34; width=&#34;500&#34;/&gt; &lt;/div&gt;&lt;br&gt;</description>
    </item>
    <item>
      <title>1.4 链路层</title>
      <link>https://example.com/http/docs/part1-overview/1.4-link-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.4-link-layer/</guid>
      <description>&lt;h1 id=&#34;14-链路层&#34;&gt;&#xA;  1.4 链路层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-%e9%93%be%e8%b7%af%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;141-基本问题&#34;&gt;&#xA;  1.4.1 基本问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e5%9f%ba%e6%9c%ac%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-封装成帧&#34;&gt;&#xA;  1. 封装成帧&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%b0%81%e8%a3%85%e6%88%90%e5%b8%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/62419d99822840d4983ee7ddbd63199a.png&#34; width=&#34;300&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;2-透明传输&#34;&gt;&#xA;  2. 透明传输&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%80%8f%e6%98%8e%e4%bc%a0%e8%be%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;透明表示一个实际存在的事物看起来好像不存在一样。&lt;/p&gt;&#xA;&lt;p&gt;帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/e021b13c5a7c41a0a30a143bfb4db8be.png&#34; width=&#34;500&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;3-差错检测&#34;&gt;&#xA;  3. 差错检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%b7%ae%e9%94%99%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。&lt;/p&gt;&#xA;&lt;h2 id=&#34;142-信道分类&#34;&gt;&#xA;  1.4.2 信道分类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#142-%e4%bf%a1%e9%81%93%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-广播信道&#34;&gt;&#xA;  1. 广播信道&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%b9%bf%e6%92%ad%e4%bf%a1%e9%81%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一对多通信，一个节点发送的数据能够被广播信道上所有的节点接收到。&lt;/p&gt;&#xA;&lt;p&gt;所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。&lt;/p&gt;&#xA;&lt;p&gt;主要有两种控制方法进行协调，一个是使用信道复用技术，一是使用 CSMA/CD 协议。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-点对点信道&#34;&gt;&#xA;  2. 点对点信道&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%82%b9%e5%af%b9%e7%82%b9%e4%bf%a1%e9%81%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一对一通信。&lt;/p&gt;&#xA;&lt;p&gt;因为不会发生碰撞，因此也比较简单，使用 PPP 协议进行控制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;143-信道复用技术&#34;&gt;&#xA;  1.4.3 信道复用技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#143-%e4%bf%a1%e9%81%93%e5%a4%8d%e7%94%a8%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-频分复用&#34;&gt;&#xA;  1. 频分复用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%a2%91%e5%88%86%e5%a4%8d%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;频分复用的所有主机在相同的时间占用不同的频率带宽资源。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/1b64fcbe6858474796702bbc0ad39aa3.png&#34; width=&#34;350&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;2-时分复用&#34;&gt;&#xA;  2. 时分复用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%97%b6%e5%88%86%e5%a4%8d%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;时分复用的所有主机在不同的时间占用相同的频率带宽资源。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/7f060be356fd44ea8f02edbb7926b820.png&#34; width=&#34;350&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-统计时分复用&#34;&gt;&#xA;  3. 统计时分复用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e7%bb%9f%e8%ae%a1%e6%97%b6%e5%88%86%e5%a4%8d%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/0f768074405448899e5b481d8ead88e9.png&#34; width=&#34;350&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;4-波分复用&#34;&gt;&#xA;  4. 波分复用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%b3%a2%e5%88%86%e5%a4%8d%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.5 网络层</title>
      <link>https://example.com/http/docs/part1-overview/1.5-network-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.5-network-layer/</guid>
      <description>&lt;h1 id=&#34;15-网络层&#34;&gt;&#xA;  1.5 网络层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e7%bd%91%e7%bb%9c%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;151-概述&#34;&gt;&#xA;  1.5.1 概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。&lt;/p&gt;&#xA;&lt;p&gt;使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/e0886c573f13411c91e099a4c7bc8e0a.png&#34; width=&#34;800&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;与 IP 协议配套使用的还有三个协议：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址解析协议 ARP（Address Resolution Protocol）&lt;/li&gt;&#xA;&lt;li&gt;网际控制报文协议 ICMP（Internet Control Message Protocol）&lt;/li&gt;&#xA;&lt;li&gt;网际组管理协议 IGMP（Internet Group Management Protocol）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;152-ip-数据报格式&#34;&gt;&#xA;  1.5.2 IP 数据报格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-ip-%e6%95%b0%e6%8d%ae%e6%8a%a5%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/494323cd5f84479aa5a09e05f2ea5e1d.png&#34; width=&#34;700&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;版本&lt;/strong&gt;   : 有 4（IPv4）和 6（IPv6）两个值；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;&lt;strong&gt;首部长度&lt;/strong&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;区分服务&lt;/strong&gt;   : 用来获得更好的服务，一般情况下不使用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;总长度&lt;/strong&gt;   : 包括首部长度和数据部分长度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;生存时间&lt;/strong&gt;   ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.6 传输层</title>
      <link>https://example.com/http/docs/part1-overview/1.6-transport-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.6-transport-layer/</guid>
      <description>&lt;h1 id=&#34;16-传输层&#34;&gt;&#xA;  1.6 传输层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-%e4%bc%a0%e8%be%93%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。&lt;/p&gt;&#xA;&lt;h2 id=&#34;161-udp-和-tcp-的特点&#34;&gt;&#xA;  1.6.1 UDP 和 TCP 的特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#161-udp-%e5%92%8c-tcp-%e7%9a%84%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;162-udp-首部格式&#34;&gt;&#xA;  1.6.2 UDP 首部格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#162-udp-%e9%a6%96%e9%83%a8%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/9f27554c73b24ea6a29cf86c2f49a286.png&#34; width=&#34;600&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;163-tcp-首部格式&#34;&gt;&#xA;  1.6.3 TCP 首部格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#163-tcp-%e9%a6%96%e9%83%a8%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/3676ae03cf684e25bf4237f87b2f8c80.png&#34; width=&#34;700&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;序号&lt;/strong&gt;&#xA;：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;确认号&lt;/strong&gt;&#xA;：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;确认 ACK&lt;/strong&gt;   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.7 应用层</title>
      <link>https://example.com/http/docs/part1-overview/1.7-application-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.7-application-layer/</guid>
      <description>&lt;h1 id=&#34;17-应用层&#34;&gt;&#xA;  1.7 应用层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#17-%e5%ba%94%e7%94%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;171-域名系统&#34;&gt;&#xA;  1.7.1 域名系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#171-%e5%9f%9f%e5%90%8d%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。&lt;/p&gt;&#xA;&lt;p&gt;域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/854a213eef904d29aff6dffc8d26b869.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。&lt;/li&gt;&#xA;&lt;li&gt;区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;172-文件传送协议&#34;&gt;&#xA;  1.7.2 文件传送协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#172-%e6%96%87%e4%bb%b6%e4%bc%a0%e9%80%81%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。&lt;/li&gt;&#xA;&lt;li&gt;数据连接：用来传送一个文件数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/61fc107098454077b47eab5dc8d90f5c.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221224/ca515f480fdf4ce391170bc9a2fa25c8.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;p&gt;主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。&lt;/p&gt;&#xA;&lt;h2 id=&#34;173-动态主机配置协议&#34;&gt;&#xA;  1.7.3 动态主机配置协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#173-%e5%8a%a8%e6%80%81%e4%b8%bb%e6%9c%ba%e9%85%8d%e7%bd%ae%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。&lt;/p&gt;&#xA;&lt;p&gt;DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.8 Socket</title>
      <link>https://example.com/http/docs/part1-overview/1.8-socket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/http/docs/part1-overview/1.8-socket/</guid>
      <description>&lt;h1 id=&#34;18-socket&#34;&gt;&#xA;  1.8 Socket&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#18-socket&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;181-io-模型&#34;&gt;&#xA;  1.8.1 I/O 模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#181-io-%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一个输入操作通常包括两个阶段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;等待数据准备好&lt;/li&gt;&#xA;&lt;li&gt;从内核向进程复制数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。&lt;/p&gt;&#xA;&lt;p&gt;Unix 有五种 I/O 模型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阻塞式 I/O&lt;/li&gt;&#xA;&lt;li&gt;非阻塞式 I/O&lt;/li&gt;&#xA;&lt;li&gt;I/O 复用（select 和 poll）&lt;/li&gt;&#xA;&lt;li&gt;信号驱动式 I/O（SIGIO）&lt;/li&gt;&#xA;&lt;li&gt;异步 I/O（AIO）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;阻塞式-io&#34;&gt;&#xA;  阻塞式 I/O&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%bb%e5%a1%9e%e5%bc%8f-io&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;请求数据时，若没有数据准备好，应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。&lt;/p&gt;&#xA;&lt;p&gt;应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率会比较高。&lt;/p&gt;&#xA;&lt;p&gt;下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ssize_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; len, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;socklen_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;addrlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/ff94438f086543b4a38be1a93964e8a4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;非阻塞式-io&#34;&gt;&#xA;  非阻塞式 I/O&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9e%e9%98%bb%e5%a1%9e%e5%bc%8f-io&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。&lt;/p&gt;&#xA;&lt;p&gt;由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/2b99cd2f1b2d4b7298b04da504b8afce.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;io-复用&#34;&gt;&#xA;  I/O 复用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#io-%e5%a4%8d%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
