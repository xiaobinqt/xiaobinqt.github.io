<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>转载 on xiaobinqt 博客 - 技术改变生活</title>
    <link>https://www.xiaobinqt.cn/series/reproduce/</link>
    <description>Recent content in 转载 on xiaobinqt 博客 - 技术改变生活</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
    <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <atom:link href="https://www.xiaobinqt.cn/series/reproduce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 容器网络分析</title>
      <link>https://www.xiaobinqt.cn/docker-network/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/docker-network/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;概述&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;p&gt;一个 Linux 容器能看见的“网络栈”，实际上是被隔离在它自己的 Network Namespace 当中的。&lt;/p&gt;&#xA;&lt;p&gt;而所谓“网络栈”其实包括了：网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table）和 iptables 规则。对于一个进程来说，这些要素，其实就构成了它发起和响应网络请求的基本环境。&lt;/p&gt;</description>
    </item>
    <item>
      <title>高并发分布式架构演进</title>
      <link>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/highly-concurrent-architecture-evolution/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;p&gt;系统中的多个模块在不同服务器上部署，即可称为分布式系统，如 Tomcat 和数据库分别部署在不同的服务器上，或两个相同功能的 Tomcat 分别部署在不同服务器上，系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>session cookie token 的区别</title>
      <link>https://www.xiaobinqt.cn/session-cookie-token-difference/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/session-cookie-token-difference/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;cookie-和-session&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#cookie-%e5%92%8c-session&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;16 Cookie 和 Session&lt;/h2&gt;&lt;p&gt;HTTP 协议是一种&lt;code&gt;无状态协议&lt;/code&gt;，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session 和 Cookie 的主要目的就是为了弥补 HTTP 的无状态特性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL 常见问题（二）</title>
      <link>https://www.xiaobinqt.cn/mysql-faq-2/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/mysql-faq-2/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;索引数据结构为什么不使用红黑树或b树&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e7%b4%a2%e5%bc%95%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e4%bd%bf%e7%94%a8%e7%ba%a2%e9%bb%91%e6%a0%91%e6%88%96b%e6%a0%91&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 索引数据结构为什么不使用红黑树或B树&lt;/h2&gt;&lt;p&gt;在 InnoDB 引擎中，索引的底层数据结构是 B+ 树。MySQL 的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中。红黑树是「二叉查找树」的变种，一个 Node 节点只能存储一个&lt;code&gt;Key&lt;/code&gt;和一个&lt;code&gt;Value&lt;/code&gt;。B 和 B+ 树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个 Node 节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL 为什么使用 B&#43; 树索引</title>
      <link>https://www.xiaobinqt.cn/why-mysql-index-use-btree/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/why-mysql-index-use-btree/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;前言&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;16 前言&lt;/h2&gt;&lt;p&gt;为什么 MySQL 采用 B+ 树作为索引？&lt;/p&gt;&#xA;&lt;p&gt;如果纯粹的猜测 MySQL 数据库索引为什么使用 B+ 树？那么围绕这个问题的回答通常一定是围绕 B+ 树本身是什么，有什么优势这两点去解释这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis 缓存击穿、缓存穿透、缓存雪崩</title>
      <link>https://www.xiaobinqt.cn/redis-break-pierce-avalanche/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/redis-break-pierce-avalanche/</guid>
      <description>&lt;h2 id=&#34;缓存击穿&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e7%bc%93%e5%ad%98%e5%87%bb%e7%a9%bf&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 缓存击穿&lt;/h2&gt;&lt;p&gt;高并发流量，访问的这个数据是热点数据，请求的数据在 DB 中存在，但是 Redis 存的那一份已经过期，后端需要从 DB 从加载数据并写到 Redis。&lt;/p&gt;&#xA;&lt;p&gt;总结起来就是：单一热点数据、高并发、数据失效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go GC 垃圾回收</title>
      <link>https://www.xiaobinqt.cn/go-gc/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/go-gc/</guid>
      <description>&lt;p&gt;垃圾回收（Garbage Collection，GC）是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC 过程中无需程序员手动执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>互联网协议简述</title>
      <link>https://www.xiaobinqt.cn/net-protocol-glance/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/net-protocol-glance/</guid>
      <description>&lt;h2 id=&#34;概述&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;h3 id=&#34;五层模型&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e4%ba%94%e5%b1%82%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1.1 五层模型&lt;/h3&gt;&lt;p&gt;互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。&lt;/p&gt;&#xA;&lt;p&gt;用户接触到的，只是最上面的一层，根本没有感觉到下面的层。理解互联网，需要从最下层开始，自下而上理解每一层的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2.0的理解与应用</title>
      <link>https://www.xiaobinqt.cn/oauth2/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/oauth2/</guid>
      <description>&lt;h2 id=&#34;什么是-oauth20&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-oauth20&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;22 什么是 OAuth2.0&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;OAuth 的核心就是向第三方应用颁发令牌&lt;/strong&gt;，比如网站 A 想用 Github 的信息，那么对于 Github 来说，网站 A 就是第三方应用。&lt;/p&gt;&#xA;&lt;p&gt;第三方应用申请令牌之前，都必须先到系统备案，比如申请 Github 的令牌，得先到&lt;a href=&#34;https://github.com/settings/applications/new&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;github备案登记&lt;/a&gt;， 说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>http入门笔记</title>
      <link>https://www.xiaobinqt.cn/http-glance/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/http-glance/</guid>
      <description>&lt;p&gt;该笔记是在学习《透视 HTTP 协议》时整理，还参考了网上的其他资料。鄙人只是网络世界的搬运整理工&amp;#x1f602;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go GMP 调度模型</title>
      <link>https://www.xiaobinqt.cn/gmp-model/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/gmp-model/</guid>
      <description>&lt;h2 id=&#34;进程线程协程的区别&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e8%bf%9b%e7%a8%8b%e7%ba%bf%e7%a8%8b%e5%8d%8f%e7%a8%8b%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;37 进程、线程、协程的区别&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;：进程是操作系统为应用程序分配资源的最小单元。每个进程有独立的内存空间和状态。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;：线程是进程中的一个独立执行单元。在 Go 中，一个进程可以启动多个线程，以并行执行任务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一致性哈希算法</title>
      <link>https://www.xiaobinqt.cn/consistent-hash/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/consistent-hash/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;如何分配请求&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%88%86%e9%85%8d%e8%af%b7%e6%b1%82&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1 如何分配请求&lt;/h2&gt;&lt;p&gt;大多数网站背后肯定不是只有一台服务器提供服务，因为单机的并发量和数据量都是有限的，所以都会用多台服务器构成集群来对外提供服务。但是这样的话，问题就来了，现在有那么多个节点（后文统称服务器为节点），要如何分配客户端的请求呢&amp;#x2753;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx 笔记，体系化带你全面认识 Nginx</title>
      <link>https://www.xiaobinqt.cn/nginx-glance/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/nginx-glance/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;nginx-概述&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#nginx-%e6%a6%82%e8%bf%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;43 Nginx 概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;  是开源、高性能、高可靠的 &lt;code&gt;Web&lt;/code&gt;  和反向代理服务器，而且支持热部署，几乎可以做到 &lt;code&gt;7 * 24&lt;/code&gt; 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 &lt;code&gt;Nginx&lt;/code&gt;&#xA;最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是， &lt;code&gt;Nginx&lt;/code&gt;  是免费的并可以商业化，配置使用也比较简单。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis 为什么快</title>
      <link>https://www.xiaobinqt.cn/redis-single-thread-why-so-fast/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/redis-single-thread-why-so-fast/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;阻塞io&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e9%98%bb%e5%a1%9eio&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;19 阻塞IO&lt;/h2&gt;&lt;p&gt;服务端为了处理客户端的连接和请求的数据，写了如下代码。&lt;/p&gt;&#xA;&lt;div class=&#34;code-block highlight is-open show-line-numbers  tw-group tw-my-2&#34;&gt;&#xA;  &lt;div class=&#34;&#xA;    &#xA;    tw-flex &#xA;    tw-flex-row&#xA;    tw-flex-1 &#xA;    tw-justify-between &#xA;    tw-w-full tw-bg-bgColor-secondary&#xA;    &#34;&gt;      &#xA;    &lt;button &#xA;      class=&#34;&#xA;        code-block-button&#xA;        tw-mx-2 &#xA;        tw-flex&#xA;        tw-flex-row&#xA;        tw-flex-1&#34;&#xA;      aria-hidden=&#34;true&#34;&gt;&#xA;          &lt;div class=&#34;group-[.is-open]:tw-rotate-90 tw-transition-[transform] tw-duration-500 tw-ease-in-out print:!tw-hidden tw-w-min tw-h-min tw-my-1 tw-mx-1&#34;&gt;&lt;svg class=&#34;icon&#34;&#xA;    xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 320 512&#34;&gt;&lt;!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --&gt;&lt;path d=&#34;M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z&#34;/&gt;&lt;/svg&gt;&lt;/div&gt;&#xA;          &lt;p class=&#34;tw-select-none !tw-my-1&#34;&gt;text&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
