<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang Notes on xiaobinqt 博客 - 技术改变生活</title>
    <link>https://www.xiaobinqt.cn/series/go-lang/</link>
    <description>Recent content in Golang Notes on xiaobinqt 博客 - 技术改变生活</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
    <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <atom:link href="https://www.xiaobinqt.cn/series/go-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go channel 使用分析</title>
      <link>https://www.xiaobinqt.cn/go-channel-principle/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/go-channel-principle/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;概念&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e6%a6%82%e5%bf%b5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;16 概念&lt;/h2&gt;&lt;p&gt;Go 中的 channel 是一个队列，遵循先进先出的原则，负责协程之间的通信。Go 语言提倡不要通过共享内存来通信，而要通过通信来实现内存共享，CSP（Communicating Sequential Process）并发模型，就是通过 goroutine 和 channel 来实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Slice 实现原理</title>
      <link>https://www.xiaobinqt.cn/go-slice-principle/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/go-slice-principle/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;h2 id=&#34;什么是-slice&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-slice&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;16 什么是 slice&lt;/h2&gt;&lt;p&gt;切片是基于数组实现的，它的底层是数组，可以理解为对底层数组的抽象。&lt;/p&gt;&#xA;&lt;p&gt;源码包中 src/runtime/slice.go 定义了 slice 的数据结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 内存逃逸</title>
      <link>https://www.xiaobinqt.cn/escape-heap/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/escape-heap/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;p&gt;在 C/C++ 开发中，动态分配内存（new/malloc）需要开发者手动释放资源。这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。但是这有个缺点，如果忘记释放内存，则会导致内存泄漏。在很多高级语言中（python/Go/java）都加上了垃圾回收机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 方法值接收者和指针接收者的区别</title>
      <link>https://www.xiaobinqt.cn/func-receive-value-pointer/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><author>xiaobinqt@163.com (xiaobinqt)</author>
      <guid>https://www.xiaobinqt.cn/func-receive-value-pointer/</guid>
      <description>&lt;!-- author： xiaobinqt --&gt;&#xA;&lt;!-- email： xiaobinqt@163.com --&gt;&#xA;&lt;!-- https://xiaobinqt.github.io --&gt;&#xA;&lt;!-- https://www.xiaobinqt.cn --&gt;&#xA;&lt;p&gt;如果方法的接收者是指针类型，无论调用者是对象还是对象指针，修改的都是对象本身，&lt;strong&gt;会影响&lt;/strong&gt;调用者；&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
