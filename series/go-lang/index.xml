<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang Notes - 系列 - xiaobinqt 博客 - 技术改变生活</title>
        <link>https://www.xiaobinqt.cn/series/go-lang/</link>
        <description>Golang Notes - 系列 - xiaobinqt 博客 - 技术改变生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaobinqt@163.com (xiaobinqt)</managingEditor>
            <webMaster>xiaobinqt@163.com (xiaobinqt)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://www.xiaobinqt.cn/series/go-lang/" rel="self" type="application/rss+xml" /><item>
    <title>Go channel 使用分析</title>
    <link>https://www.xiaobinqt.cn/go-channel-principle/</link>
    <pubDate>Wed, 11 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-channel-principle/</guid>
    <description><![CDATA[1 概念Go 中的 channel 是一个队列，遵循先进先出的原则，负责协程之间的通信。Go 语言提倡不要通过共享内存来通信，而要通过通信来实现内存共享，CSP（]]></description>
</item><item>
    <title>Go Slice 实现原理</title>
    <link>https://www.xiaobinqt.cn/go-slice-principle/</link>
    <pubDate>Tue, 10 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/go-slice-principle/</guid>
    <description><![CDATA[1 什么是 slice切片是基于数组实现的，它的底层是数组，可以理解为对底层数组的抽象。 源码包中 src/runtime/slice.go 定义了 slice 的数据结构： text type slice struct { array unsafe.Pointer // ArbitraryType int len int cap]]></description>
</item><item>
    <title>Golang 内存逃逸</title>
    <link>https://www.xiaobinqt.cn/escape-heap/</link>
    <pubDate>Tue, 10 Oct 2023 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/escape-heap/</guid>
    <description><![CDATA[在 C/C++ 开发中，动态分配内存（new/malloc）需要开发者手动释放资源。这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。但是这有]]></description>
</item><item>
    <title>Go 方法值接收者和指针接收者的区别</title>
    <link>https://www.xiaobinqt.cn/func-receive-value-pointer/</link>
    <pubDate>Sat, 15 Aug 2020 00:00:00 &#43;0000</pubDate><author>
        <name>xiaobinqt</name>
    </author><guid>https://www.xiaobinqt.cn/func-receive-value-pointer/</guid>
    <description><![CDATA[如果方法的接收者是指针类型，无论调用者是对象还是对象指针，修改的都是对象本身，会影响调用者； 如果方法的接收者是值类型，无论调用者是对象还是对]]></description>
</item></channel>
</rss>
