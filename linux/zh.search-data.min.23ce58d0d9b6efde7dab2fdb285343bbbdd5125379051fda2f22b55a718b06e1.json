[{"id":0,"href":"/linux/docs/part1-primary/1/","title":"1.1 操作系统","section":"第一部分 基础知识","content":" 1.1 操作系统 # 1.1.1 基本特征 # 1. 并发 # 并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。\n并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。\n操作系统通过引入进程和线程，使得程序能够并发运行。\n2. 共享 # 共享是指系统中的资源可以被多个并发进程共同使用。\n有两种共享方式：互斥共享和同时共享。\n互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。\n3. 虚拟 # 虚拟技术把一个物理实体转换为多个逻辑实体。\n主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。\n多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。\n虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。\n4. 异步 # 异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。\n1.1.2 基本功能 # 1. 进程管理 # 进程控制、进程同步、进程通信、死锁处理、处理机调度等。\n2. 内存管理 # 内存分配、地址映射、内存保护与共享、虚拟内存等。\n3. 文件管理 # 文件存储空间的管理、目录管理、文件读写管理和保护等。\n4. 设备管理 # 完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。\n主要包括缓冲管理、设备分配、设备处理、虛拟设备等。\n1.2.3 系统调用 # 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。\nLinux 的系统调用主要有以下这些：\nTask Commands 进程控制 fork(); exit(); wait(); 进程通信 pipe(); shmget(); mmap(); 文件操作 open(); read(); write(); 设备操作 ioctl(); read(); write(); 信息维护 getpid(); alarm(); sleep(); 安全 chmod(); umask(); chown(); 1.1.4 宏内核和微内核 # 1. 宏内核 # 宏内核是将操作系统功能作为一个紧密结合的整体放到内核。\n由于各模块共享信息，因此有很高的性能。\n2. 微内核 # 由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。\n在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。\n因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。\n1.1.5 中断分类 # 1. 外中断 # 由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。\n2. 异常 # 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。\n3. 陷入 # 在用户程序中使用系统调用。\n"},{"id":1,"href":"/linux/docs/part3-sys-manage/3/","title":"3.1 网络","section":"第三部分 系统管理","content":" 3.1 网络 # 3.1.1 网络状态 # net-tools \u0026amp; iproute # Centos 7 之前一般使用 net-tools，Centos 7 之后主推 iproute / iproute2。\nifconfig # eth0 第一块网卡（网络接口)。很多时候，第一个网络接口也可能叫做下面的名字：\neno1 板载网卡 ens33 PCI-E网卡 enp0s3 无法获取物理信息的PCI-E网卡 CentOS 7 使用了一致性网络设备命名，以上都不匹配则使用 eth0。\n网关/路由 # route -n 使用-n参数不解析主机名，因为默认每个 ip 都会反解成域名，如果解析耗时会一直等待。\n网卡物理连接情况 # 在 Centos 6 上可以直接输入mii-tool回车，但是 Centos 7 上必须要加上网络接口名。\n因为用的是虚拟机，所以会有 SIOCGMIIPHY on \u0026rsquo;eth0\u0026rsquo; failed: Operation not supported 错误\n网络接口/网卡名称修改 # 网卡命名规则受 biosdevname 和 net.ifnames 两个参数影响。\nbiosdevname net.ifnames 网卡名 默认 0 1 ens33 组合1 1 0 em1 组合2 0 0 eth0 编辑/etc/default/grub文件，在 GRUB_CMDLINE_LINUX 中增加biosdevname=0 net.ifnames=0 GRUB_CMDLINE_LINUX=\u0026#34;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet biosdevname=0 net.ifnames=0\u0026#34; 更新 grub grub2-mkconfig -o /boot/grub2/grub.cfg reboot 重启之后，网卡名的修改就成功了。 3.1.2 网络配置 # 修改 ip # ifconfig eth0 192.168.120.56 # 给eth0网卡配置IP地：192.168.120.56 ifconfig eth0 192.168.120.56 netmask 255.255.255.0 #给eth0网卡配置IP地址：192.168.120.56 ，并加上子掩码：255.255.255.0 ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255 # 给eth0网卡配置IP地址：192.168.120.56，加上子掩码：255.255.255.0，加上个广播地址： 192.168.120.255 启动关闭网卡 # ifconfig eth0 up ifup eth0 ifconfig eth0 down ifdown eth0 删除/添加网关 # route del default gw 192.168.48.2 # 删除网关 route add default gw 192.168.48.3 # 添加网关 明细路由 # route add -host 10.0.0.1 gw 192.168.48.4 # 通过设置主机 route add -net 192.168.0.0 netmask 255.255.255.0 gw 192.168.48.5 # 通过设置网段 3.1.3 路由命令 # 3.1.4 网络故障排除 # 3.1.5 网络服务管理 # 3.1.6 常用网络配置文件 # 参考 # 每天一个linux命令（52）：ifconfig命令 "},{"id":2,"href":"/linux/docs/part4-shell/4/","title":"4.1 Shell 简介","section":"第四部分 Shell","content":" 4.1 Shell 简介 # Shell 是命令解释器，用于解释用户对操作系统的操作。CentOS7 默认使用的 Shell 是 bash。\nShell 有很多可以再 /etc/shells 文件中查看：\n4.1.1 脚本格式 # UNIX 的哲学：一条命令只做一件事。为了组合命令和多次执行，使用脚本文件来保存需要执行的命令，并赋予该文件执行权限（chmod u+rx filename）。如果是二进制文件只需要一个可执性权限，如果是脚本文件需要可读和可执行权限。\nSha-Bang # 在 shell 脚本中，Sha-Bang（也称为 Shebang 或 Hashbang）是指位于脚本文件的第一行的特殊注释。它的形式是以井号 # 开头，紧随其后是一个叹号 !，再加上一个可执行程序的路径。\n下面是一个典型的 Sha-Bang 行示例：\n#!/bin/bash 在上述示例中，#!/bin/bash 是一个 Sha-Bang 行。其中 #!/bin/ 是固定的前缀，用于告诉系统该文件是一个可执行文件，接下来的 bash 是解释器的路径，表示使用 Bash 解释器来执行该脚本。\nSha-Bang 行的作用是指定脚本所需的解释器。当在命令行中运行脚本文件时，操作系统会读取脚本文件的第一行，根据其中的 Sha-Bang 行来确定要使用的解释器，并将该解释器用于执行该脚本。\n除了 #!/bin/bash，还可以使用其他解释器路径，如 /bin/sh、/usr/bin/env python 等，根据脚本的需求选择适当的解释器。\n需要注意的是，Sha-Bang 行必须位于脚本文件的第一行，否则它将不会被正确解析。同时，脚本文件需要具有执行权限才能被执行。\n4.1.2 不同执行方式 # 脚本的执行方式大致有以下几种：\n# bash 执行不需要赋予执行权限 bash ./filename.sh # 需要有执行权限 ./filename.sh source ./filename.sh . filename.sh bash 和 ./ 在执行时会产生一个新的子进程，对当前的环境不会产生影响。\n4.1.3 重定向符号 # 一个进程默认会打开标准输入、标准输出、错误输出三个文件描述符。\n输入重定向符号 \u0026lt;\nread var \u0026lt;/path/to/a/file 2\u0026gt; 表示将标准错误输出（stderr）重定向到指定的文件或设备。例如，command 2\u0026gt; error.log 将命令的错误输出重定向到名为 error.log 的文件。\n\u0026amp;\u0026gt; 表示将标准输出（stdout）和标准错误输出（stderr）均重定向到指定的文件或设备。例如，command \u0026amp;\u0026gt; output.log 将命令的输出（包括标准输出和错误输出）都重定向到名为 output.log 的文件。\n2\u0026gt; 只会重定向标准错误输出（stderr），而标准输出（stdout）仍然会输出到终端。\n\u0026amp;\u0026gt; 会同时重定向标准输出和标准错误输出，将它们都输出到指定的文件或设备。\necho 123 \u0026gt; /path/to/a/file 输入和输出重定向组合使用：\ncat \u0026gt; /path/to/a/file \u0026lt;\u0026lt;EOF 4.1.4 变量 # 定义 # 字母、数字、下划线 不以数字开头 赋值 # 变量名=变量值 a=123 等号 = 左右两边不能有空格。\n使用 let 为变量赋值 let a=10+20 将命令赋值给变量 l=ls 将命令结果赋值给变量，使用 $() 或者使用反引号 `` c=$(ls -l /etc) 变量值有空格等特殊字符可以包含在双引号 \u0026quot;\u0026quot; 或单引号 \u0026rsquo;\u0026rsquo; 中 引用 # ${变量名} 称作对变量的引用。\necho ${变量名} 查看变量的值。\n${变量名} 在部分情况下可以省略为 $变量名\n作用范围 # 变量的作用范围只在自己的 shell 中，子进程或平行 shell 都是不能使用的。\n如果想让变量的作用范围 “全局” 生效，可以用 source 或 . 的方式执行：\nexport 导出也可以让变量 “全局” 生效：\nunset 可以删除变量：\na=1 unset a "},{"id":3,"href":"/linux/docs/part5-text-operate/5/","title":"5.1 正则表达式","section":"第五部分 文本操作","content":" 5.1 正则表达式 # 5.1.1 元字符 # 元字符是正则表达式中具有特殊含义的字符。它们用于表示模式的不同部分或进行模式匹配的控制。常见的元字符包括：\n. 匹配除换行符外的任意单个字符 * 匹配前面的元素零次或多次 [] 匹配方括号中的字符类中的任意一个 ^ 匹配开头 $ 匹配结尾 \\ 转义后面的特殊字符 + 匹配前面的元素一次或多次 ? 匹配前面的元素零次或一次 | 匹配它前面或后面的正则表达式 5.1.2 通配符 # 通配符是在文件系统中使用的一种模式匹配机制。它用于匹配文件名或路径的模式。常见的通配符包括：\n* 匹配任意长度的任意字符。 ? 匹配单个字符。 [\u0026hellip;]（方括号）：定义一个字符集，匹配括号内的任意一个字符。 通配符主要用于文件名的模式匹配，例如在命令行中使用 ls 或 find 命令时，可以使用通配符来筛选文件名。\n5.1.3 find 命令 # find 主要是在目录中查找指定文件，可以结合正则表达式实现复杂的查找功能。\nfind 支持正则可以使用 -regex：\nfind /etc/ -regex .*wd$ -type d 查找目录，-type f 查找文件：\n"},{"id":4,"href":"/linux/docs/part6-service-manage/6/","title":"6.1 防火墙","section":"第六部分 服务管理","content":" 6.1 防火墙 # 6.1.1 分类 # 软件防火墙和硬件防火墙是两种常见的网络安全设备或软件，用于保护计算机系统和网络免受未授权访问、恶意攻击和网络威胁等。\n软件防火墙（Software Firewall）： 软件防火墙是一种安装在计算机系统上的软件应用程序，用于监控和控制网络流量。它可以通过检查网络数据包的来源、目的地、协议和端口等信息，来判断是否允许或阻止数据包的传输。软件防火墙通常运行在操作系统的网络协议栈之上，能够保护单个计算机系统或网络中的特定主机。常见的软件防火墙包括Windows防火墙、IPTables、NetFilter等。\n硬件防火墙（Hardware Firewall）： 硬件防火墙是一种独立的物理设备，专门用于网络安全防护。它通常部署在网络的边界位置，作为网络流量的第一道防线。硬件防火墙通过硬件和专用的嵌入式软件来执行数据包过滤和访问控制。它可以监控和检测网络流量，并根据预先定义的规则和策略来允许或阻止数据包的传输。硬件防火墙通常具有更高的性能和吞吐量，并且对于整个网络中的所有主机都提供保护。常见的硬件防火墙包括 Cisco ASA、Palo Alto Networks、Fortinet 等。\n包过滤防火墙（Packet Filtering Firewall）和应用层防火墙（Application Layer Firewall）是防火墙的两种不同类型：\n包过滤防火墙： 包过滤防火墙是一种基于网络数据包的源地址、目的地址、端口号和协议等信息进行过滤和控制的防火墙。它工作在网络协议栈的较低层，可以根据预定义的规则，对数据包进行简单的检查和处理。包过滤防火墙通常比较高效，并且适用于处理大量数据包的情况。但它的检查范围相对较窄，仅能检查和过滤网络层（IP层）和传输层（TCP/UDP层）的信息。\n应用层防火墙： 应用层防火墙是一种工作在网络协议栈较高层的防火墙，它能够检查和过滤网络流量中的应用层数据，如 HTTP、FTP、SMTP 等协议的内容。应用层防火墙能够深入检查数据包的有效载荷，根据应用层协议的特征和规则来判断和阻止恶意行为。它提供了更高级的安全功能，如访问控制、应用程序识别、反病毒扫描、入侵检测等。然而，相对于包过滤防火墙，应用层防火墙的处理开销较大，对性能有一定的影响。\n综上，软件防火墙和硬件防火墙是不同类型的防火墙设备或软件，而包过滤防火墙和应用层防火墙是防火墙的两种不同功能和层次的分类。它们的选择和使用取决于网络环境、安全需求和性能要求。\niptables # iptables 是一个软件防火墙，而不是硬件防火墙，提供了对 Linux 内核网络层的访问控制和数据包过滤的功能。\niptables 可以通过定义规则集来控制传入、传出和转发的网络流量。这些规则可以基于源 IP 地址、目标 IP 地址、协议、端口号等条件进行过滤和操作。使用 iptables 可以实现诸如网络地址转换（NAT）、端口转发、数据包屏蔽、阻止 DoS（拒绝服务）攻击等功能。\niptables 的工作方式是通过配置 iptables 规则表来匹配和处理网络数据包。常见的 iptables 规则表包括 filter 表（用于过滤数据包）、nat 表（用于网络地址转换）和 mangle 表（用于特殊处理数据包）。管理员可以使用命令行界面（CLI）或脚本来配置和管理 iptables。\n尽管 iptables 是一个软件防火墙，但它在 Linux 系统中可以与硬件防火墙配合使用。在网络架构中，可以将 Linux 服务器作为边界设备放置在硬件防火墙之后，并使用 iptables 来增强安全性和网络流量控制。这种组合的优势是，硬件防火墙负责网络的第一道防线，而 iptables 在服务器本身提供了更细粒度的流量控制和策略定制能力。\nCentOS 6 默认的防火墙是 iptables。CentOS 7 默认的防火墙是 firewallD（底层使用 netfilter）。\n6.1.2 iptables 表和链 # 规则表有 filter，nat，mangle，raw。\n规则链：\nINPUT OUTPUT FORWARD PREROUTING（路由前转换） POSTROUTING（路由后转换） filter # iptables -t filter 命令 规则链 规则 常见的命令有：\n命令 说明 -L 用于列出当前 iptables 规则集的信息，包括不同表中的规则和链的状态 -A 用于向指定链（如 INPUT、OUTPUT、FORWARD）添加规则，插入到最后。-A 后面通常跟着链名和规则的具体内容 -I 用于在指定链中插入规则，在最开始插入。-I 后面通常跟着链名、位置和规则的具体内容。 -D 用于删除指定链中的规则。-D 后面通常跟着链名和要删除的规则的具体内容。 -F 用于清除指定链中的所有规则，将链重置为空。-F 后面通常跟着链名，如果不加链名就是清楚所有自定义规则。 -P 用于设置指定链的默认策略。-P 后面通常跟着链名和策略（ACCEPT、DROP、REJECT 等）。 -N 用于创建一个新的用户定义链，以便将规则归类和组织。-N 后面通常跟着链名。 -X 用于删除一个用户定义链，如果该链不再需要。-X 后面通常跟着链名。 -E 用于对用户定义链进行重命名。-E 后面通常跟着原始链名和新链名。 iptables -vnL 命令是省略了 filter 表的命令。命令将显示所有表的规则列表，包括详细信息和禁用反向解析。\n具体选项的含义如下：\n-v：显示详细信息，包括规则的计数器和数据包/字节的计数。 -n：禁止对 IP 地址和端口进行反向解析，以避免 DNS 查询延迟。 -L：显示所有表（filter、nat、mangle、raw、security）的规则列表。 对于只显示 filter 表规则列表的命令，应使用 iptables -vnx -L。其中的 -x 选项用于显示精确的数据包/字节计数，而不使用单位扩展。\n-A -I 区别\n可以看到 -A 和 -I 唯一的区别就是添加的顺序，-I 插入到第一条。\n-P 修改默认规则\n默认规则（Default Policy）用于定义当数据包不匹配任何规则时应采取的动作。默认规则通常应用于各个链（如 INPUT、OUTPUT、FORWARD 等），并在规则列表的末尾指定。\n以下是 iptables 中默认规则的常见取值：\nACCEPT：接受数据包。如果数据包不匹配任何规则，则允许数据包通过。\nDROP：丢弃数据包。如果数据包不匹配任何规则，则直接丢弃数据包，不给予任何响应。\nREJECT：拒绝数据包，并发送拒绝消息给发送者。如果数据包不匹配任何规则，则向发送者发送拒绝响应。\nRETURN：返回到调用链中的上一级。用于在子链中执行完操作后，将控制权返回给上级链。\n默认情况下，iptables 中的默认规则通常设置为 ACCEPT。这意味着如果数据包不匹配任何规则，它将被默认接受。\n要更改默认规则，可以使用 -P 选项。以下是一个更改默认规则的示例命令：\niptables -P INPUT DROP 上述命令将更改 INPUT 链的默认规则为 DROP，即数据包不匹配任何规则时将被丢弃。\n# 运行某个 ip 通过某个网络接口(网卡)访问指定协议的指定端口 iptables -t filter -A INPUT -i eth0 -s 10.0.0.2 -p tcp --dport 80 -j ACCEPT nat # iptables -t nat 命令 规则链 规则 PREROUTING 目的地址转换 POSTROUTING 源地址转换 # 目录地址转换 iptables -t nat -A POEROUTING -i eth0 114.115.116.117 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1 # 内网所有 10.0.0.0/24 都会伪装成 111.112.113.114 与外网通信 iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth1 -j SNAT --to-source 111.112.113.114 6.1.3 iptables 配置文件 # iptables 配置文件在 /etc/sysconfig/iptables。\nCentOS 6 在保存时可以执行：\nservice iptables save|start|stop|restart 在 CentOS 7 中需要先安装：\nyum install iptables-services 6.1.4 firewallD 服务 # FirewallD 是 CentOS 7 及其衍生发行版中使用的动态防火墙管理工具。它提供了一种简单的方式来配置和管理防火墙规则，以保护服务器免受未授权访问和恶意网络活动的威胁。\nFirewallD 的主要特点包括：\n动态更新：FirewallD 允许在运行时动态添加、删除和修改防火墙规则，而无需重启防火墙服务。 区域（Zone）概念：FirewallD 使用区域来定义网络环境，并为每个区域指定不同的防火墙策略。 简化的规则管理：FirewallD 通过提供简单的命令和工具，使规则管理更易于操作和维护。 以下是一些常用的 FirewallD 服务管理命令：\n启动 FirewallD 服务：\nsystemctl start firewalld 停止 FirewallD 服务：\nsystemctl stop firewalld 设置 FirewallD 服务在系统启动时自动启动：\nsystemctl enable firewalld 禁止 FirewallD 服务在系统启动时自动启动：\nsystemctl disable firewalld 查看 FirewallD 服务状态：\nsystemctl status firewalld 查看所有可用的防火墙区域：\nfirewall-cmd --get-zones 查看当前活动的防火墙区域：\nfirewall-cmd --get-active-zones 查看指定区域的详细信息：\nfirewall-cmd --zone=\u0026lt;zone_name\u0026gt; --list-all 添加端口到指定区域：\nfirewall-cmd --zone=\u0026lt;zone_name\u0026gt; --add-port=\u0026lt;port_number\u0026gt;/tcp 重新加载防火墙配置：\nfirewall-cmd --reload 要添加服务和端口到 FirewallD 的配置中，可以使用 firewall-cmd 命令。下面是一些常见的命令示例：\n添加一个端口到指定的防火墙区域： firewall-cmd --zone=\u0026lt;zone_name\u0026gt; --add-port=\u0026lt;port_number\u0026gt;/tcp 其中，\u0026lt;zone_name\u0026gt; 是要添加端口的防火墙区域的名称，\u0026lt;port_number\u0026gt; 是要添加的端口号。例如，要将端口 8080 添加到 public 区域，可以执行以下命令：\nfirewall-cmd --zone=public --add-port=8080/tcp 这将允许 TCP 流量通过端口 8080。\n添加一个预定义的服务到指定的防火墙区域： firewall-cmd --zone=\u0026lt;zone_name\u0026gt; --add-service=\u0026lt;service_name\u0026gt; 其中，\u0026lt;zone_name\u0026gt; 是要添加服务的防火墙区域的名称，\u0026lt;service_name\u0026gt; 是要添加的预定义服务的名称。例如，要将 SSH 服务添加到 public 区域，可以执行以下命令：\nfirewall-cmd --zone=public --add-service=ssh 这将允许 SSH 连接通过防火墙。\n永久保存更改： 上述命令添加的规则在系统重启后会失效。要使更改永久生效，可以添加 --permanent 选项，并重新加载防火墙配置：\nfirewall-cmd --zone=\u0026lt;zone_name\u0026gt; --add-port=\u0026lt;port_number\u0026gt;/tcp --permanent firewall-cmd --reload 例如：\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent firewall-cmd --reload 这将在系统重启后仍然允许通过端口 8080 的 TCP 流量，并将更改永久保存。\n"},{"id":5,"href":"/linux/docs/part7-faq/7/","title":"7.1 命令相关","section":"第七部分 常见问题","content":" 7.1 命令相关 # 7.1.1 du ls 对于查看文件大小的区别 # ls -lh 和 du 命令都可以查看文件，但是 du 查看的实际文件大小，ls 查看的文件大小可能包含空洞。\nafile 文件没有空洞，ls 和 du 显示的文件大小都是 40M。\nbfile 在写入的时候由于跳过了 20*4=80M，所以这 80M 是空洞文件，那么 ls 和 du 最后显示的结果就会不一样。\n"},{"id":6,"href":"/linux/docs/part2-sys-operate/2/","title":"2.1 帮助命令","section":"第二部分 系统操作","content":" 2.1 帮助命令 # 2.1.1 man # man 命令有很多 section，可以通过man man 查看，如下：\nman 1 可以省略 1 表示查看可执行程序或 shell 命令，如man ls。\n如果想要通过 man 查看文件的说明，可以使用man 5，比如 passwd 可以是一个系统命令也可以是一个配置文件/etc/passwd，那么man passwd 就是查看这个系统命令的说明，man 5 passwd就是查看/etc/passwd这个配置文件的说明。\n当不知道查看的是命令还是文件时可以使用man -a 关键字，比如man -a passwd，这样就会把所有的说明都列出来。\n2.1.2 help # shell（命令解释器）自带的命令称为内部命令，其他的是外部命令。可以用type 命令知道这个命令是内部命令还是外部命令。\n内部命令使用 help 帮助：help 命令\n外部命令使用 help 帮助：命令 --help\n2.1.3 info # info 帮助比 help 更详细，可以作为 help 的补充。\n"}]