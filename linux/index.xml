<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简介 on Linux 学习笔记</title>
    <link>https://example.com/linux/</link>
    <description>Recent content in 简介 on Linux 学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 操作系统</title>
      <link>https://example.com/linux/docs/part1-primary/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1/</guid>
      <description>&lt;h1 id=&#34;11-操作系统&#34;&gt;&#xA;  1.1 操作系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;111-基本特征&#34;&gt;&#xA;  1.1.1 基本特征&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e5%9f%ba%e6%9c%ac%e7%89%b9%e5%be%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-并发&#34;&gt;&#xA;  1. 并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。&lt;/p&gt;&#xA;&lt;p&gt;并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。&lt;/p&gt;&#xA;&lt;p&gt;操作系统通过引入进程和线程，使得程序能够并发运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-共享&#34;&gt;&#xA;  2. 共享&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%85%b1%e4%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;共享是指系统中的资源可以被多个并发进程共同使用。&lt;/p&gt;&#xA;&lt;p&gt;有两种共享方式：互斥共享和同时共享。&lt;/p&gt;&#xA;&lt;p&gt;互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-虚拟&#34;&gt;&#xA;  3. 虚拟&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e8%99%9a%e6%8b%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;虚拟技术把一个物理实体转换为多个逻辑实体。&lt;/p&gt;&#xA;&lt;p&gt;主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。&lt;/p&gt;&#xA;&lt;p&gt;多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。&lt;/p&gt;&#xA;&lt;p&gt;虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-异步&#34;&gt;&#xA;  4. 异步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%bc%82%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。&lt;/p&gt;&#xA;&lt;h2 id=&#34;112-基本功能&#34;&gt;&#xA;  1.1.2 基本功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-%e5%9f%ba%e6%9c%ac%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-进程管理&#34;&gt;&#xA;  1. 进程管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;进程控制、进程同步、进程通信、死锁处理、处理机调度等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-内存管理&#34;&gt;&#xA;  2. 内存管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;内存分配、地址映射、内存保护与共享、虚拟内存等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-文件管理&#34;&gt;&#xA;  3. 文件管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%96%87%e4%bb%b6%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;文件存储空间的管理、目录管理、文件读写管理和保护等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-设备管理&#34;&gt;&#xA;  4. 设备管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e8%ae%be%e5%a4%87%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。&lt;/p&gt;&#xA;&lt;p&gt;主要包括缓冲管理、设备分配、设备处理、虛拟设备等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;123-系统调用&#34;&gt;&#xA;  1.2.3 系统调用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/a31b70c3a2a04481b3e3849408cc4393.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux 的系统调用主要有以下这些：&lt;/p&gt;</description>
    </item>
    <item>
      <title>3.1 网络</title>
      <link>https://example.com/linux/docs/part3-sys-manage/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part3-sys-manage/3/</guid>
      <description>&lt;h1 id=&#34;31-网络&#34;&gt;&#xA;  3.1 网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;311-网络状态&#34;&gt;&#xA;  3.1.1 网络状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#311-%e7%bd%91%e7%bb%9c%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;net-tools--iproute&#34;&gt;&#xA;  net-tools &amp;amp; iproute&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#net-tools--iproute&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Centos 7 之前一般使用 net-tools，Centos 7 之后主推 iproute / iproute2。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ifconfig&#34;&gt;&#xA;  ifconfig&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ifconfig&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;eth0 第一块网卡（网络接口)。很多时候，第一个网络接口也可能叫做下面的名字：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;eno1 板载网卡&lt;/li&gt;&#xA;&lt;li&gt;ens33 PCI-E网卡&lt;/li&gt;&#xA;&lt;li&gt;enp0s3 无法获取物理信息的PCI-E网卡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;CentOS 7 使用了一致性网络设备命名，以上都不匹配则使用 eth0。&lt;/p&gt;&#xA;&lt;h3 id=&#34;网关路由&#34;&gt;&#xA;  网关/路由&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e5%85%b3%e8%b7%af%e7%94%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route -n&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;-n&lt;/code&gt;参数不解析主机名，因为默认每个 ip 都会反解成域名，如果解析耗时会一直等待。&lt;/p&gt;&#xA;&lt;h3 id=&#34;网卡物理连接情况&#34;&gt;&#xA;  网卡物理连接情况&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e5%8d%a1%e7%89%a9%e7%90%86%e8%bf%9e%e6%8e%a5%e6%83%85%e5%86%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在 Centos 6 上可以直接输入&lt;code&gt;mii-tool&lt;/code&gt;回车，但是 Centos 7 上必须要加上网络接口名。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230203/e180058f83f5483c87e58339415feb6a.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;因为用的是虚拟机，所以会有 SIOCGMIIPHY on &amp;rsquo;eth0&amp;rsquo; failed: Operation not supported 错误&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;网络接口网卡名称修改&#34;&gt;&#xA;  网络接口/网卡名称修改&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e6%8e%a5%e5%8f%a3%e7%bd%91%e5%8d%a1%e5%90%8d%e7%a7%b0%e4%bf%ae%e6%94%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网卡命名规则受 biosdevname 和 net.ifnames 两个参数影响。&lt;/p&gt;</description>
    </item>
    <item>
      <title>4.1 Shell 简介</title>
      <link>https://example.com/linux/docs/part4-shell/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part4-shell/4/</guid>
      <description>&lt;h1 id=&#34;41-shell-简介&#34;&gt;&#xA;  4.1 Shell 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-shell-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Shell 是命令解释器，用于解释用户对操作系统的操作。CentOS7 默认使用的 Shell 是 bash。&lt;/p&gt;&#xA;&lt;p&gt;Shell 有很多可以再 /etc/shells 文件中查看：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230628/1ff1ac3c90164b56b212d53fea91ca85.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;411-脚本格式&#34;&gt;&#xA;  4.1.1 脚本格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#411-%e8%84%9a%e6%9c%ac%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;UNIX 的哲学：一条命令只做一件事。为了组合命令和多次执行，使用脚本文件来保存需要执行的命令，并赋予该文件执行权限（chmod u+rx filename）。如果是二进制文件只需要一个可执性权限，如果是脚本文件需要可读和可执行权限。&lt;/p&gt;&#xA;&lt;h3 id=&#34;sha-bang&#34;&gt;&#xA;  Sha-Bang&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sha-bang&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在 shell 脚本中，Sha-Bang（也称为 Shebang 或 Hashbang）是指位于脚本文件的第一行的特殊注释。它的形式是以井号 &lt;code&gt;#&lt;/code&gt; 开头，紧随其后是一个叹号 &lt;code&gt;!&lt;/code&gt;，再加上一个可执行程序的路径。&lt;/p&gt;&#xA;&lt;p&gt;下面是一个典型的 Sha-Bang 行示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述示例中，&lt;code&gt;#!/bin/bash&lt;/code&gt; 是一个 Sha-Bang 行。其中 &lt;code&gt;#!/bin/&lt;/code&gt; 是固定的前缀，用于告诉系统该文件是一个可执行文件，接下来的 bash 是解释器的路径，表示使用 Bash 解释器来执行该脚本。&lt;/p&gt;&#xA;&lt;p&gt;Sha-Bang 行的作用是指定脚本所需的解释器。当在命令行中运行脚本文件时，操作系统会读取脚本文件的第一行，根据其中的 Sha-Bang 行来确定要使用的解释器，并将该解释器用于执行该脚本。&lt;/p&gt;&#xA;&lt;p&gt;除了 &lt;code&gt;#!/bin/bash&lt;/code&gt;，还可以使用其他解释器路径，如 &lt;code&gt;/bin/sh&lt;/code&gt;、&lt;code&gt;/usr/bin/env python&lt;/code&gt; 等，根据脚本的需求选择适当的解释器。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，Sha-Bang 行必须位于脚本文件的第一行，否则它将不会被正确解析。同时，脚本文件需要具有执行权限才能被执行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;412-不同执行方式&#34;&gt;&#xA;  4.1.2 不同执行方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#412-%e4%b8%8d%e5%90%8c%e6%89%a7%e8%a1%8c%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;脚本的执行方式大致有以下几种：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# bash 执行不需要赋予执行权限&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash ./filename.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 需要有执行权限&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./filename.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ./filename.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. filename.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bash 和 ./ 在执行时会产生一个新的子进程，对当前的环境不会产生影响。&lt;/p&gt;</description>
    </item>
    <item>
      <title>5.1 正则表达式</title>
      <link>https://example.com/linux/docs/part5-text-operate/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part5-text-operate/5/</guid>
      <description>&lt;h1 id=&#34;51-正则表达式&#34;&gt;&#xA;  5.1 正则表达式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#51-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;511-元字符&#34;&gt;&#xA;  5.1.1 元字符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#511-%e5%85%83%e5%ad%97%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;元字符是正则表达式中具有特殊含义的字符。它们用于表示模式的不同部分或进行模式匹配的控制。常见的元字符包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;. 匹配除换行符外的任意单个字符&lt;/li&gt;&#xA;&lt;li&gt;* 匹配前面的元素零次或多次&lt;/li&gt;&#xA;&lt;li&gt;[] 匹配方括号中的字符类中的任意一个&lt;/li&gt;&#xA;&lt;li&gt;^ 匹配开头&lt;/li&gt;&#xA;&lt;li&gt;$ 匹配结尾&lt;/li&gt;&#xA;&lt;li&gt;\ 转义后面的特殊字符&lt;/li&gt;&#xA;&lt;li&gt;+ 匹配前面的元素一次或多次&lt;/li&gt;&#xA;&lt;li&gt;? 匹配前面的元素零次或一次&lt;/li&gt;&#xA;&lt;li&gt;| 匹配它前面或后面的正则表达式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;512-通配符&#34;&gt;&#xA;  5.1.2 通配符&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#512-%e9%80%9a%e9%85%8d%e7%ac%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;通配符是在文件系统中使用的一种模式匹配机制。它用于匹配文件名或路径的模式。常见的通配符包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;* 匹配任意长度的任意字符。&lt;/li&gt;&#xA;&lt;li&gt;? 匹配单个字符。&lt;/li&gt;&#xA;&lt;li&gt;[&amp;hellip;]（方括号）：定义一个字符集，匹配括号内的任意一个字符。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通配符主要用于文件名的模式匹配，例如在命令行中使用 ls 或 find 命令时，可以使用通配符来筛选文件名。&lt;/p&gt;&#xA;&lt;h2 id=&#34;513-find-命令&#34;&gt;&#xA;  5.1.3 find 命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#513-find-%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;find 主要是在目录中查找指定文件，可以结合正则表达式实现复杂的查找功能。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/b5d150c1dd99493a81f6955a9ea81083.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;find 支持正则可以使用 -regex：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find /etc/ -regex .*wd$&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-type d 查找目录，-type f 查找文件：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230705/896cc2fface144e19fa1823eb5d959b9.png&#34; width=  /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>6.1 防火墙</title>
      <link>https://example.com/linux/docs/part6-service-manage/6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6/</guid>
      <description>&lt;h1 id=&#34;61-防火墙&#34;&gt;&#xA;  6.1 防火墙&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e9%98%b2%e7%81%ab%e5%a2%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;611-分类&#34;&gt;&#xA;  6.1.1 分类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#611-%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;软件防火墙和硬件防火墙是两种常见的网络安全设备或软件，用于保护计算机系统和网络免受未授权访问、恶意攻击和网络威胁等。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;软件防火墙（Software Firewall）：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;软件防火墙是一种安装在计算机系统上的软件应用程序，用于监控和控制网络流量。它可以通过检查网络数据包的来源、目的地、协议和端口等信息，来判断是否允许或阻止数据包的传输。软件防火墙通常运行在操作系统的网络协议栈之上，能够保护单个计算机系统或网络中的特定主机。常见的软件防火墙包括Windows防火墙、IPTables、NetFilter等。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;硬件防火墙（Hardware Firewall）：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;硬件防火墙是一种独立的物理设备，专门用于网络安全防护。它通常部署在网络的边界位置，作为网络流量的第一道防线。硬件防火墙通过硬件和专用的嵌入式软件来执行数据包过滤和访问控制。它可以监控和检测网络流量，并根据预先定义的规则和策略来允许或阻止数据包的传输。硬件防火墙通常具有更高的性能和吞吐量，并且对于整个网络中的所有主机都提供保护。常见的硬件防火墙包括 Cisco ASA、Palo Alto Networks、Fortinet 等。&lt;/p&gt;&#xA;&lt;p&gt;包过滤防火墙（Packet Filtering Firewall）和应用层防火墙（Application Layer Firewall）是防火墙的两种不同类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;包过滤防火墙：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;包过滤防火墙是一种基于网络数据包的源地址、目的地址、端口号和协议等信息进行过滤和控制的防火墙。它工作在网络协议栈的较低层，可以根据预定义的规则，对数据包进行简单的检查和处理。包过滤防火墙通常比较高效，并且适用于处理大量数据包的情况。但它的检查范围相对较窄，仅能检查和过滤网络层（IP层）和传输层（TCP/UDP层）的信息。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;应用层防火墙：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;应用层防火墙是一种工作在网络协议栈较高层的防火墙，它能够检查和过滤网络流量中的应用层数据，如 HTTP、FTP、SMTP 等协议的内容。应用层防火墙能够深入检查数据包的有效载荷，根据应用层协议的特征和规则来判断和阻止恶意行为。它提供了更高级的安全功能，如访问控制、应用程序识别、反病毒扫描、入侵检测等。然而，相对于包过滤防火墙，应用层防火墙的处理开销较大，对性能有一定的影响。&lt;/p&gt;&#xA;&lt;p&gt;综上，软件防火墙和硬件防火墙是不同类型的防火墙设备或软件，而包过滤防火墙和应用层防火墙是防火墙的两种不同功能和层次的分类。它们的选择和使用取决于网络环境、安全需求和性能要求。&lt;/p&gt;&#xA;&lt;h3 id=&#34;iptables&#34;&gt;&#xA;  iptables&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#iptables&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 是一个软件防火墙，而不是硬件防火墙，提供了对 Linux 内核网络层的访问控制和数据包过滤的功能。&lt;/p&gt;&#xA;&lt;p&gt;iptables 可以通过定义规则集来控制传入、传出和转发的网络流量。这些规则可以基于源 IP 地址、目标 IP 地址、协议、端口号等条件进行过滤和操作。使用 iptables 可以实现诸如网络地址转换（NAT）、端口转发、数据包屏蔽、阻止 DoS（拒绝服务）攻击等功能。&lt;/p&gt;&#xA;&lt;p&gt;iptables 的工作方式是通过配置 iptables 规则表来匹配和处理网络数据包。常见的 iptables 规则表包括 filter 表（用于过滤数据包）、nat 表（用于网络地址转换）和 mangle 表（用于特殊处理数据包）。管理员可以使用命令行界面（CLI）或脚本来配置和管理 iptables。&lt;/p&gt;&#xA;&lt;p&gt;尽管 iptables 是一个软件防火墙，但它在 Linux 系统中可以与硬件防火墙配合使用。在网络架构中，可以将 Linux 服务器作为边界设备放置在硬件防火墙之后，并使用 iptables 来增强安全性和网络流量控制。这种组合的优势是，硬件防火墙负责网络的第一道防线，而 iptables 在服务器本身提供了更细粒度的流量控制和策略定制能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>7.1 命令相关</title>
      <link>https://example.com/linux/docs/part7-faq/7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part7-faq/7/</guid>
      <description>&lt;h1 id=&#34;71-命令相关&#34;&gt;&#xA;  7.1 命令相关&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#71-%e5%91%bd%e4%bb%a4%e7%9b%b8%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;711-du-ls-对于查看文件大小的区别&#34;&gt;&#xA;  7.1.1 du ls 对于查看文件大小的区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#711-du-ls-%e5%af%b9%e4%ba%8e%e6%9f%a5%e7%9c%8b%e6%96%87%e4%bb%b6%e5%a4%a7%e5%b0%8f%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ls -lh&lt;/code&gt; 和 du 命令都可以查看文件，但是 du 查看的实际文件大小，ls 查看的文件大小可能包含空洞。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230222/5f091dbeb41a47949348b2e38cbc1514.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;afile 文件没有空洞，ls 和 du 显示的文件大小都是 40M。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230222/6f57ad3fd33747d7a2870e33e7cfc52c.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;bfile 在写入的时候由于跳过了 20*4=80M，所以这 80M 是空洞文件，那么 ls 和 du 最后显示的结果就会不一样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.1 帮助命令</title>
      <link>https://example.com/linux/docs/part2-sys-operate/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part2-sys-operate/2/</guid>
      <description>&lt;h1 id=&#34;21-帮助命令&#34;&gt;&#xA;  2.1 帮助命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%b8%ae%e5%8a%a9%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;211-man&#34;&gt;&#xA;  2.1.1 man&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-man&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;man 命令有很多 section，可以通过&lt;code&gt;man man&lt;/code&gt; 查看，如下：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230201/eeea2f8f03ea41229238016e3817ee11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;man 1&lt;/code&gt; 可以省略 1 表示查看可执行程序或 shell 命令，如&lt;code&gt;man ls&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;如果想要通过 man 查看文件的说明，可以使用&lt;code&gt;man 5&lt;/code&gt;，比如 passwd 可以是一个系统命令也可以是一个配置文件&lt;code&gt;/etc/passwd&lt;/code&gt;，那么&lt;code&gt;man passwd&lt;/code&gt; 就是查看这个系统命令的说明，&lt;code&gt;man 5 passwd&lt;/code&gt;就是查看&lt;code&gt;/etc/passwd&lt;/code&gt;这个配置文件的说明。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230201/c0eae59975f44265bc1109930d63ba88.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;当不知道查看的是命令还是文件时可以使用&lt;code&gt;man -a 关键字&lt;/code&gt;，比如&lt;code&gt;man -a passwd&lt;/code&gt;，这样就会把所有的说明都列出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;212-help&#34;&gt;&#xA;  2.1.2 help&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#212-help&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;shell（命令解释器）自带的命令称为内部命令，其他的是外部命令。可以用&lt;code&gt;type 命令&lt;/code&gt;知道这个命令是内部命令还是外部命令。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230201/b1d70e51663a4fcea62828892481e16b.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;内部命令使用 help 帮助：&lt;code&gt;help 命令&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;外部命令使用 help 帮助：&lt;code&gt;命令 --help&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;213-info&#34;&gt;&#xA;  2.1.3 info&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#213-info&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;info 帮助比 help 更详细，可以作为 help 的补充。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
