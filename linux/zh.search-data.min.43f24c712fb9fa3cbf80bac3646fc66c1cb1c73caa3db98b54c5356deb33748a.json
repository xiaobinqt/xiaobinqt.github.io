[{"id":0,"href":"/linux/docs/part3-sys-manage/3.1-network/","title":"3.1 网络","section":"第三部分 系统管理","content":" 3.1 网络 # 3.1.1 网络状态 # net-tools \u0026amp; iproute # Centos 7 之前一般使用 net-tools，Centos 7 之后主推 iproute / iproute2。\nifconfig # eth0 第一块网卡（网络接口)。很多时候，第一个网络接口也可能叫做下面的名字：\neno1 板载网卡 ens33 PCI-E网卡 enp0s3 无法获取物理信息的PCI-E网卡 CentOS 7 使用了一致性网络设备命名，以上都不匹配则使用 eth0。\n网关/路由 # route -n 使用-n参数不解析主机名，因为默认每个 ip 都会反解成域名，如果解析耗时会一直等待。\n网卡物理连接情况 # 在 Centos 6 上可以直接输入mii-tool回车，但是 Centos 7 上必须要加上网络接口名。\n因为用的是虚拟机，所以会有 SIOCGMIIPHY on \u0026rsquo;eth0\u0026rsquo; failed: Operation not supported 错误\n网络接口/网卡名称修改 # 网卡命名规则受 biosdevname 和 net.ifnames 两个参数影响。\nbiosdevname net.ifnames 网卡名 默认 0 1 ens33 组合1 1 0 em1 组合2 0 0 eth0 编辑/etc/default/grub文件，在 GRUB_CMDLINE_LINUX 中增加biosdevname=0 net.ifnames=0 GRUB_CMDLINE_LINUX=\u0026#34;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet biosdevname=0 net.ifnames=0\u0026#34; 更新 grub grub2-mkconfig -o /boot/grub2/grub.cfg reboot 重启之后，网卡名的修改就成功了。 3.1.2 网络配置 # 修改 ip # ifconfig eth0 192.168.120.56 # 给eth0网卡配置IP地：192.168.120.56 ifconfig eth0 192.168.120.56 netmask 255.255.255.0 #给eth0网卡配置IP地址：192.168.120.56 ，并加上子掩码：255.255.255.0 ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255 # 给eth0网卡配置IP地址：192.168.120.56，加上子掩码：255.255.255.0，加上个广播地址： 192.168.120.255 启动关闭网卡 # ifconfig eth0 up ifup eth0 ifconfig eth0 down ifdown eth0 删除/添加网关 # route del default gw 192.168.48.2 # 删除网关 route add default gw 192.168.48.3 # 添加网关 明细路由 # route add -host 10.0.0.1 gw 192.168.48.4 # 通过设置主机 route add -net 192.168.0.0 netmask 255.255.255.0 gw 192.168.48.5 # 通过设置网段 3.1.3 路由命令 # 3.1.4 网络故障排除 # 3.1.5 网络服务管理 # 3.1.6 常用网络配置文件 # 参考 # 每天一个linux命令（52）：ifconfig命令 "},{"id":1,"href":"/linux/docs/part1-primary/1.1-linux-release/","title":"1.1 简介和常见发行版","section":"第一部分 基础知识","content":" 1.1 简介和常见发行版 # 1.1.1 快捷键 # Tab：命令和文件名补全； Ctrl+C：中断正在运行的程序； Ctrl+D：结束键盘输入（End Of File，EOF） "},{"id":2,"href":"/linux/docs/part2-sys-operate/2.1-help/","title":"2.1 帮助命令","section":"第二部分 系统操作","content":" 2.1 帮助命令 # 2.1.1 man # man 命令有很多 section，可以通过man man 查看，如下：\nman 1 可以省略 1 表示查看可执行程序或 shell 命令，如man ls。\n如果想要通过 man 查看文件的说明，可以使用man 5，比如 passwd 可以是一个系统命令也可以是一个配置文件/etc/passwd，那么man passwd 就是查看这个系统命令的说明，man 5 passwd就是查看/etc/passwd这个配置文件的说明。\n当不知道查看的是命令还是文件时可以使用man -a 关键字，比如man -a passwd，这样就会把所有的说明都列出来。\n2.1.2 help # shell（命令解释器）自带的命令称为内部命令，其他的是外部命令。可以用type 命令知道这个命令是内部命令还是外部命令。\n内部命令使用 help 帮助：help 命令\n外部命令使用 help 帮助：命令 --help\n2.1.3 info # info 帮助比 help 更详细，可以作为 help 的补充。\n"},{"id":3,"href":"/linux/docs/part2-sys-operate/2.2-ls/","title":"2.2 ls 命令","section":"第二部分 系统操作","content":" 2.2 ls 命令 # ls 可以查看多个目录，如\nls /root / 查看/root目录和/目录内容。\n2.2.1 常用选项 # -l 选项 # 单列输出。\n-a 选项 # 查看所有\n-r 选项 # 逆序排序，默认按文件名逆序。\n-t 选项 # 按时间信息排序。比如按时间逆序可以使用ls -lrt。\n-R 选项 # 递归列出全部目录的内容。\n-h 选项 # -h参数是更加人性化打印文件的尺寸大小，单位是G，M，K，否则显示文件的字节大小。\n如果只用ls -h是看不见文件或者目录大小的，必须加上ls -lh。\ndu 命令同样可以显示文件大小，但是 du 命令显示的实际文件大小，ls 显示的文件大小可能包含空洞。\n-d 选项 # 将目录名像其它文件一样列出，而不是列出它们的内容。\n"},{"id":4,"href":"/linux/docs/part3-sys-manage/3.2-net-trouble-removal/","title":"3.2 网络故障排除","section":"第三部分 系统管理","content":" 3.2 网络故障排除 # 3.2.1 ping # 测试主机之间网络的连通性。\n-c 参数 # 设置完成要求回应的次数。\n3.2.2 traceroute # 3.2.3 mtr # 3.2.4 nslookup # 3.2.4 telnet # 端口是否畅通 # telnet www.baidu.com 80 # 我当前主机到对方主机的 80 端口是否畅通 3.2.5 tcpdump # tcpdump -i any -n port 80 -i 选线 # 指定网卡，可以用 -i any 表示所有网卡或是-i eth0指定网络接口/网卡的数据包。\n-n 选项 # 不要使用域名的形式进行显示。\nport # 指定端口。\n指定主机和端口 # tcpdump -i any -n host 10.0.0.1 and port 80 tcpdump -i any -n host 10.0.0.1 保存抓取信息 # -w 选线可以把捕获信息保存为文件。\ntcpdump -i any -n host 10.0.0.1 -w /tmp/filename.txt 3.2.6 netstat # 查看服务的监听地址和端口。\nnetstat -ntpl -n 选线 # 直接使用 ip 地址，而不通过域名服务器。\n-c 选线 # 显示 TCP 传输协议的连线状况。\n-p 选线 # 显示对应进程。\n-l 选线 # 显示监控中的服务器的 Socket。\n3.2.7 ss # 比 netstat 好用的 socket 统计信息，iproute2 包附带的另一个工具，允许查询 socket 的有关统计信息。用法跟 netstat 基本相同。\n"},{"id":5,"href":"/linux/docs/part1-primary/1.2-common-dir/","title":"1.2 常见目录","section":"第一部分 基础知识","content":" 常见目录 # / # 根目录 ├── /root # root 用户家目录 ├── /home/username # 普通用户家目录 ├── /etc # 配置文件目录 ├── /bin # 命令目录 ├── /sbib # 管理命令目录 ├── /usr/bin # 系统预装的其他命令 └── /usr/sbin # 系统预装的其他命令 "},{"id":6,"href":"/linux/docs/part2-sys-operate/2.3-shutdown/","title":"2.3 关机","section":"第二部分 系统操作","content":" 2.3 关机 # 1. who # 在关机前需要先使用 who 命令查看有没有其它用户在线。\n2. sync # 为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘，因此关机之前需要先进行 sync 同步操作。\n3. shutdown # ## shutdown [-krhc] 时间 [信息] -k ： 不会关机，只是发送警告信息，通知所有在线的用户 -r ： 将系统的服务停掉后就重新启动 -h ： 将系统的服务停掉后就立即关机 -c ： 取消已经在进行的 shutdown 参考 # Linux命令之关机shutdown "},{"id":7,"href":"/linux/docs/part3-sys-manage/3.3-net-manage/","title":"3.3 网络服务管理","section":"第三部分 系统管理","content":" 3.3 网络服务管理 # 网络管理工具常用的有 2 套，一个是 network，另一个是 networkManger。在 Centos 6 中只有 network，在某些 Centos 7 机器中可能 2 套都存在，不要把 2 套工具都 enable，在工作中，一般只用一个禁用另外一个。\nsystemctl disable NetworkManager systemctl enable NetworkManager service network status service network restart 一般在服务器上常用 network 工具。networkManager 常用在个人电脑上。\n3.3.1 设置主机名 # 临时修改主机名：hostname 临时主机名 系统重启后会被重置。\n永久修改主机名：hostnamectl 永久主机名 是对 /etc/hostname 文件的内容进行修改。\n3.3.1 service # 参考 # linux下/etc/hosts 和hostname文件的区别 "},{"id":8,"href":"/linux/docs/part2-sys-operate/2.4-cp/","title":"2.4 cp 命令","section":"第二部分 系统操作","content":" 2.4 cp 命令 # 将源文件或目录复制到目标文件或目录中。\n2.4.1 常用选项 # -p 选项 # 在复制文件后，文件的时间会发生变化，属主也有可能会发生变化。-p可以保留源文件或目录的属性。\n-a 选项 # 在复制文件后，权限，属主和时间都不发生变化。\n-f 选项 # 强行复制文件或目录，不论目标文件或目录是否已存在。\n-r 选项 # 递归处理，将指定目录下的所有文件与子目录一并处理。\n"},{"id":9,"href":"/linux/docs/part3-sys-manage/3.4-soft-install/","title":"3.4 软件安装","section":"第三部分 系统管理","content":" 3.4 软件安装 # 3.4.1 软件包管理器 # 包管理器是方便软件安装、卸载，解决软件依赖关系的重要工具。\nCentOS、RedHat 使用 yum 包管理器，软件安装包格式为 rpm。 Debian、Ubuntu 使用 apt 包管理器，软件安装包格式为 deb。 3.4.2 rpm 包和 rpm 命令 # 包格式 # 命令常用参数 # -q 查询软件包，-qa 查看所有。 rpm -qa -i 安装软件包\n-e 卸载软件包\n问题 # 使用 rpm 时需要手动解决依赖关系，在实际应用中用的不多，常用 yum 命令安装。软件包来源不可靠。\n3.4.3 yum 仓库 # 修改 yum 源 # 阿里巴巴官方镜像站 https://developer.aliyun.com/mirror/\n经常需要安装 epel 来扩展 yum 仓库源，不常见的一些软件可以通过 epel 仓库来安装：\nyum install epel-release -y 常用选项 # install 安装软件包 remove 卸载软件包 list | grouplist 查看软件包 update 升级软件包 yum update 如果加上软件包名会去升级指定的软件，如果什么都不加会去升级所有的软件包。\n3.4.4 源代码编译安装 # 有时 yum 源中没有最新的软件包，这时可以通过源代码编译安装的方式。\n以下通过编译安装 openresty 示例：\nwget https://openresty.org/download/openresty-1.15.8.1.tar.gz ## 下载 tar -zxf openresty-1.15.8.1.tar.gz cd openresty-1.15.8.1/ ./configure --prefix=/usr/local/openresty ## prefix 指定安装目录 make -j2 # -j2 使用 2 个逻辑 CPU 进行编译,如果代码之间没有一定的依赖关系一般会加快编译速度 make install 安装过程中可能需要 gcc 和 c++，需要提前安装下：\nyum install gcc gcc-c++ 如果遇到以下错误：\n./configure: error: the HTTP rewrite module requires the PCRE library 需要安装下 pcre\nyum install pcre-devel 如果遇到以下错误\nerror: SSL modules require the OpenSSL library 需要安装下 openssl\nyum -y install openssl openssl-devel 通过安装 openresty 可知，在安装过程中需要手动去解决依赖关系，而且经常不能一次性的去解决，往往需要通过经验和 google 才能解决问题，这也是源代码编译安装不太流行的原因。\n3.4.5 内核升级 # 查看内核版本可以使用 uname -r。\nyum 方式 # uname -r yum update # 升级已安装的其他软件包和补丁 yum install kernel-3.10.0 # 升级内核版本 源代码方式 # 源代码方式并不推荐，因为不会自动解决依赖关系，需要手动去解决。编译内核根分区至少要有 10G 的空间，如果小于 10G 可能会出现安装失败的情况。\n# 1. 安装依赖包 yum install gcc gcc-c++ make ncurses-devel openssl-devel elfutils-libelf-devel -y # 2. 去官方网站下载并解压缩内核 https://www.kernel.org # 可以在 https://mirrors.edge.kernel.org/pub/linux/kernel/ 这里找到需要的版本 wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.1.10.tar.xz tar xvf linux-5.1.10.tar.xz -C /usr/src/kernels # 3. 配置内核编译参数（可选），可以直接使用当前系统的配置，参看 4 cd /usr/src/kernels/linux-5.1.10/ make menuconfig | allyesconfig | allnoconfig # make menuconfig allyesconfig 所有我都选 yes.. # 4. 使用当前系统内核配置 cp /boot/config-kernelversion.platform /usr/src/kernels/linux-5.1.10/.config # kernelversion 内核版本 platform 平台，比如 config-3.10.0-957.el7.x86_64 # 5. 查看CPU lscpu # 6. 编译 make -j2 all # 7. 安装内核 make modules_install make install 安装成功后 reboot 重启引导使用新内核启动即可。\n3.4.6 grub 配置文件 # grub 全称 “Grand unified bootloader”，是 GNU 项目的一个启动加载包。grub 的作用就是负责加载所选择的内核，当有多个系统内核时，可以手动选择要启动的系统，在 grub 图形界面上有多系统选项菜单。\n/etc/default/grub 模板的一些配置 /etc/grub.d/ 在这个文件夹下有写高级配置 /boot/grub2/grub.cfg 不直接编辑，通过命令生成 grub2-mkconfig -o /boot/grub2/grub.cfg 常见配置项 # 引导内核 grub2-editenv list # 查看当前引导内核 grep ^menu /boot/grub2/grub.cfg # 查看有几个内核版本 grub2-set-default X # 设置引导内核，X 从 0 开始 查看错误信息 当内核引导出现问题时，可以把 GRUB_CMDLINE_LINUX 配置中的rhgb quiet参数去掉，让打印出更详细的信息。\n参考 # the HTTP rewrite module requires the PCRE library configure: error: SSL modules require the OpenSSL library. "},{"id":10,"href":"/linux/docs/part2-sys-operate/2.5-file-view/","title":"2.5 文件查看命令","section":"第二部分 系统操作","content":" 2.5 文件查看命令 # 2.5.1 cat # 参看文件打印到标准输出。\n2.5.1 head # 查看文件开头，比如前 5 行head -5 文件名。\n2.5.1 tail # 查看文件结尾，查看最后 3 行tail -3 文件名。\n可以使用-f跟踪文件变化。\n2.5.1 wc # 统计文件的字节数、字数、行数。\n-l 参数 # 统计行数。\n"},{"id":11,"href":"/linux/docs/part3-sys-manage/3.5-process/","title":"3.5 进程管理","section":"第三部分 系统管理","content":" 3.5 进程管理 # 进程是运行中的程序，从程序开始运行到终止的整个生命周期是可管理的。\n以 C 程序为例，程序的启动是从 main 函数开始的：\nint main(int agrc,char *argv[]) 程序终止的方式并不唯一，可以分为正常终止和异常终止。正常终止也分为从 main 返回、调用 exit 等方式。异常终止分为调用 abort、接收信号等。\n3.5.1 进程查看 # ps # ps 可以查看当前系统的进程状态。\n-e 选项 显示所有程序。\n-f 选项 常搭配 -e 选项使用。显示 UID（有效用户ID），PPID（父进程）等信息，进程由哪个用户启动的，有时启动用户和运行用户可能不一样，比如 Nginx 由 root 启动，但是实际的运行身份是 nobody。\n-L 选线 进程中的线程，LWP 轻量级进程也就是线程。\npstree # 如果没有 pstree 命令可以自行安装。\nyum install psmisc -y top # top 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。\ntop 界面主要分为两个部分，前 5 行展示的是系统的整体性能，光标下面部分是系统中每个进程的具体信息。光标所在处是用来输入操作命令的。\n系统的整体性能 # 第一行：\ntop - 14:39:05 up 36 days, 21:26, 3 users, load average: 56.31, 55.92, 56.03 top：名称 14:39:05：系统当前时间 up 36 days, 21:26：系统以及运行的时间，和 uptime 命令相等 3 users：当前有 3 个用户在线 load average: 56.31, 55.92, 56.03：系统一定时间内的平均负载，分别是 1 分钟、5 分钟、15 分钟。 主要关注load average这个值，所谓系统负载就是：在一段时间内，CPU 正在处理以及等待 CPU 处理的进程数之和。系统在同一时间运行的进程数和系统 CPU 核数相关，一般来说 Load Average 的数值别超过这台机器的总核数，就没什么问题。\n第二行：\nTasks: 265 total, 2 running, 263 sleeping, 0 stopped, 0 zombie Tasks：任务，也就是进程 265 total：当前总共有 265 个任务，也就是 265 个进程 2 running：2 个进程正在运行 263 sleeping：263 个进程正在休眠 0 stopped：0 个停止的进程 0 zombie：1 个僵尸进程 第三行：\n%Cpu(s): 88.9 us, 7.9 sy, 0.0 ni, 1.7 id, 0.0 wa, 1.4 hi, 0.0 si, 0.0 st %Cpu(s)：CPU 使用率 88.9 us：用户空间占用 CPU 时间的百分比（大部分进程都运行在用户态，通常都是希望用户空间 CPU 越高越好） 7.9 sy：内核空间占用 CPU 时间的百分比（Linux 内核态占用的 CPU 时间，系统 CPU 占用越高，表明系统某部分存在瓶颈。通常这个值越低越好） 0.0 ni：占用 CPU 时间的百分比（ni 是 nice 的缩写，进程用户态的优先级，如果调整过优先级，那么展示的就是调整过 nice 值的进程消耗掉的CPU 时间，如果系统中没有进程被调整过 nice 值，那么 ni 就显示为 0） 1.7 id：空闲 CPU 占用率，等待进程运行 0.0 wa：等待输入输出的 CPU 时间百分比（CPU 的处理速度是很快的，磁盘 IO 操作是非常慢的。wa 表示 CPU 在等待 IO 操作完成所花费的时间。系统不应该花费大量的时间来等待 IO 操作，否则就说明 IO 存在瓶颈） 1.4 hi：CPU 硬中断时间百分比（硬中断是硬盘、网卡等硬件设备发送给 CPU 的中断消息） 0.0 si：CPU 软中断时间百分比（软中断是由程序发出的中断 ） 0.0 st：被强制等待（involuntary wait）虚拟 CPU 的时间，此时 Hypervisor 在为另一个虚拟处理器服务。 第四行：\nMiB Mem : 15508.4 total, 3858.4 free, 3369.3 used, 828.07 buff/cache MiB Mem：内存 15508.4 total：物理内存总量 3858.4 free：空闲内存量 3369.3 used：已使用的内存量 828.07 buff/cache：用作内核缓存的内存量 第五行：\nMiB Swap: 4096.0 total, 3855.1 free, 240.9 used. 10823.7 avail Mem MiB Swap：交换空间（虚拟内存，当内存不足的时候，把一部分硬盘空间虚拟城内存使用） 4096.0 total：交换区总量 3855.1 free：空闲交换区总量 240.9 used：使用的交换区总量 10823.7 avail Mem：可用于启动一个新应用的内存（物理内存），和 free 不同，它计算的是可回收的 page cache 和 memory slab 第四行和第五行输出信息，等同于使用 free -m 命令。\n进程信息 # PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND PID：进程 id USER：进程所有者 PR：进程的优先级，越小优先级越高 NI：nice 值，负值表示高优先级，正值表示低优先级 VIRT：进程使用的虚拟内存，单位是 kb RES：进程使用的物理内存，单位 kb SHR：进程使用的共享内存，单位 kb S：进程状态（S 表示休眠，R 表示正在运行，Z 表示僵死状态，N 表示该进程优先值为负数，I 表示空闲状态） %CPU：进程占用的 CPU 使用率 %MEM：进程使用的物理内存和总内存的百分比 TIME+：进程使用的 CPU 时间总计，单位 1/100 秒 COMMAND：命令行 上述列是 top 命令的默认显示，还有一些参数可以使用 top 的交互命令选择显示，按 f 键，选择需要展示的部分。\n命令行选项 # 格式：top [选项]\n选项 功能 -p 只显示某个进程的信息 -d 设置刷新时间，默认是5s -c 显示产生进程的完整命令，默认是进程名 -o 指定要排序的字段，比如 top -o PID 按照 PID 从大到小，top -o -PID 按照 PID 从小到大 -n 指定刷新次数，比如 top -n 3，刷新输出3次后退出 -b 以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如 top -b -n 3 \u0026gt; /tmp/top.tmp -i 不显示任何闲置 (idle) 或无用 (zombie) 的进程 -u 查找特定用户启动的进程 交互命令 # top命令在执行过程中可以使用一些交互功能：\n按键 功能 h 键 按下h键，会显示帮助画面 c 键 按下c键，会显示产生进程的完整命令，等同于-c参数，再次按下c键，变为默认显示 f 键 按下f键，可以选择需要展示的项目 M 键 按下M键，根据驻留内存大小（RES）排序 P 键 按下P键，根据CPU使用百分比大小进行排序 T 键 按下T键，根据时间/累计时间进行排序 E 键 按下E键，切换顶部内存显示单位 e 键 按下e键，切换进程内存显示单位 l 键 按下l键，切换显示平均负载和启动时间信息。 t 键 按下t键，切换显示CPU状态信息 m 键 按下m键，切换显示内存信息 VIRT、RES、SHR含义 # VIRT:\n进程 “需要的” 虚拟内存大小，包括进程使用的库、代码、数据，以及 malloc、new 分配的堆空间和分配的栈空间等； 假如进程新申请 10MB 的内存，但实际只使用了 1MB，那么它会增长 10MB，而不是实际的 1MB 使用量。 RES:\n进程当前使用的内存大小，包括使用中的 malloc、new 分配的堆空间和分配的栈空间，但不包括 swap out 量； 包含其他进程的共享； 如果申请 10MB 的内存，实际使用 1MB，它只增长 1MB； SHR:\n进程当前使用的内存大小，包括使用中的 malloc、new 分配的堆空间和分配的栈空间，但不包括 swap out 量； 包含其他进程的共享； 如果申请 10MB 的内存，实际使用 1MB，它只增长 1MB； 上述三个值是从 /proc/pid/statm 文件中格式化读出来的，前三个值分别是 VIRT、RES、SHR，单位是页，常见的是 4kb。\n3.5.2 进程的控制命令 # 调整优先级 # nice 范围从 -20 到 19，值越小优先级越高，抢占资源就越多 renice 重新设置优先级 当服务在运行的时候想调整优先级，可以用 renice 设置。\n作业控制 # 作业控制是一个命令行功能，也叫后台运行。\ngoreground（fg）：前台进程，是在终端中运行的命令，占领终端。\nbackground（bg）：后台进程，没有控制终端，他不需要终端的交互，看不到，但是在运行。可以使用 \u0026amp; 符号让服务在后台运行。\n如果想要挂起程序，可以使用 ctrl+z。如下，这是用top -p 89781 就可以看到是 stopped 的状态。如果想让再恢复运行，可以使用 fg 或 bg 唤醒。\njobs # 如何想让后台运行的程序调回前台，可以用 jobs。\n3.5.3 进程的通信方式 # 信号 # 信号是进程间通信方式之一，典型用法是：终端用户输入中断命令，通过信号机制停止一个程序的运行。\nkill -l可以查看所有的信号。\nSIGINT 通知前台进程组终止进程 ctrl+C SIGKILL立即结束程序，不能被阻塞和处理 kil -9 pid 3.5.5 守护进程和系统日志 # nohup 和 daemon 都是 Linux/Unix 系统中的概念，它们都可以让程序在后台运行，但它们的实现方式和作用有所不同。\nnohup 更适合运行一次性任务，而 daemon 更适合长期运行的系统服务。nohup 通常将输出信息重定向到文件中，而 daemon 通常将输出信息写入到系统日志中。\nnohup # nohup 命令使进程忽路 hangup（挂起）信号，即使终端关闭服务也不会停止，一般配置 \u0026amp; 使用。\n/proc/ 目录在硬盘上是不存在，是操作系统读取内存的信息以文件的方式进行呈现，用户可以像操作文件一样操作这些，大多数的操作都是查看。 daemon # daemon是守护进程的一种实现方式。守护进程是指在后台运行的一类长期运行的进程，通常不与任何终端关联。它们通常在系统启动时启动，并且在系统关闭时停止。守护进程通常用于提供一些系统服务，如网络服务、系统日志、计划任务等。\n与 nohup 不同的是，守护进程通常会将自己的进程号（PID）写入到一个文件中，以便于其他程序查询和控制它。同时，守护进程通常会把自己从父进程中分离出来，以避免与其他进程产生关联。\n另外，守护进程通常会将输出信息写入到系统日志中，而不是输出到控制台。这可以让系统管理员更方便地查看守护进程的状态和运行日志。\nscreen # screen 可以规避因网络问题导致的异常，比如正在操作终端，突然终端断开了，再次连接时就不能回到上次的执行环境了。\n如果没有 screen 命令可以进行安装。\nyum install screen -y 输入 screen 进入 screen 环境 ctrl+a 再按 d 退出（detached） screen 环境，当按 ctrl+a 时是没有反应的要注意。 screen -ls 查看 screen 的会话 screen -r sessionid 恢复会话 常见系统日志 # /var/log/messages：是一个系统日志文件，包含系统进程和服务的日志信息，包括系统启动、关机、登录和注销信息，以及用户和系统进程发出的警告和错误信息。这些日志信息对于排除系统问题和调试应用程序非常有用。\n/var/log/dmesg：提供了关于硬件设备、驱动程序和内核模块的详细信息，以及任何可能会影响系统操作的错误或警告消息，可以帮助诊断与硬件相关的问题，例如设备驱动程序或文件系统错误等。\n/var/log/secure： 包含系统认证和安全相关的消息，如登录和注销信息，sudo 命令的使用，以及系统和应用程序的安全事件。这些日志信息对于跟踪和分析安全事件非常有用。\n3.5.5 systemctl # service 对于服务的启动和停止的控制好坏完全决定与写脚本的同学，systemctl 是对 service 功能的强化。\nservice 的启动脚本放在 /etc/init.d 目录。systemctl 的脚本放在 /usr/lib/systemd/system 目录。一般 service 的脚本行数和复杂程度远大于 systemctl。\nsystemctl 的运行级别在目录 /lib/systemd/system 下，.service 文件表示服务，.target 文件表示运行级别。\n常见操作 # systemctl start|stop|restart|reload enable disable 服务名称 查看当前系统的运行级别\nsystemctl get-default # 设置默认的启动级别 systemctl set-default multi-user.target 3.5.1 SELinux 简介 # SELinux 是 Security Enhanced Linux 缩写，采用委任式存取控制，是在进行程序、文件等细节权限设置依据的一个核心模块。\n自主式（DAC） # 当程序要操作文件时，系统根据程序的 Owner/Group，对比文件的权限，若通过权限检查，则可操作文件，但可能造成问题：\nroot 具有最高权限，若某程序属于 root，则该程序可操作系统的任何文件； 使用者可利用程序来变更文件的权限。 委任式（MAC） # 也即是 SELinux 所采用的方式，可针对特定程序与特定文件来进行权限的控制。\n即使是 root，在使用不同程序时所取到的权限也不一定是 root，而是根据该程序的设定； 程序也不能任意使用系统文件，因为每个文件也有针对该程序可用的权限设定。 常见命令 # selinux 配置文件在 /etc/selinux/config 里，可以直接修改配置文件让其生效，修改后需要重启系统。\n临时修改可以使用 setenforce 命令\n参考 # top命令详细解读 Linux基础——SELinux "},{"id":12,"href":"/linux/docs/part2-sys-operate/2.6-backup-compression/","title":"2.6 压缩和打包","section":"第二部分 系统操作","content":" 2.6 压缩和打包 # 2.6.1 压缩文件名 # Linux 下有很多压缩文件名，常见的如下：\n扩展名 压缩程序 *.Z compress *.zip zip *.gz gzip *.bz2 bzip2 *.xz xz *.tar tar 程序打包的数据，没有经过压缩 *.tar.gz tar 程序打包的文件，经过 gzip 的压缩 *.tar.bz2 tar 程序打包的文件，经过 bzip2 的压缩 *.tar.xz tar 程序打包的文件，经过 xz 的压缩 *.tbz2 *.tar.bz2 的缩写 *.tgz *.tar.gz 的缩写 2.6.2 压缩指令 # 1. gzip # gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。\n经过 gzip 压缩过，源文件就不存在了。gzip 命令只能用来压缩文件，不能压缩目录，即便指定了目录，也只能压缩目录内的所有文件。gzip 命令不需要指定压缩包名。\n有 9 个不同的压缩等级可以使用。\n可以使用 zcat、zmore、zless 来读取压缩文件的内容。\n$ gzip [-cdtv#] filename -c ：将压缩的数据输出到屏幕上 -d ：解压缩 -t ：检验压缩文件是否出错 -v ：显示压缩比等信息 -# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6 2. bzip2 # 提供比 gzip 更高的压缩比。\n查看命令：bzcat、bzmore、bzless、bzgrep。\n$ bzip2 [-cdkzv#] filename -k ：保留源文件 -z ：-d 选项的补充，强制进行压缩操作，而不管执行的是哪个程序 3. xz # 提供比 bzip2 更佳的压缩比。\n可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意的是，压缩比越高，压缩的时间也越长。\n查看命令：xzcat、xzmore、xzless、xzgrep。\n$ xz [-dtlkc#] filename -l ：列出有关.xz文件的信息 2.6.3 打包 # 压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gzip、bzip2、xz 将打包文件进行压缩。\n$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename... ==打包压缩 $ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件] ==查看 $ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录] ==解压缩 -z ：使用 zip； -j ：使用 bzip2； -J ：使用 xz； -c ：新建打包文件； -t ：查看打包文件里面有哪些文件； -x ：解打包或解压缩的功能； -v ：在压缩/解压缩的过程中，显示正在处理的文件名； -f : filename：要处理的文件； -C 目录 ： 在特定目录解压缩。 使用方式 命令 打包压缩 tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称 查 看 tar -jtv -f filename.tar.bz2 解压缩 tar -jxv -f filename.tar.bz2 -C 要解压缩的目录 参考 # Linux命令之压缩gzip "},{"id":13,"href":"/linux/docs/part3-sys-manage/3.6-memory-disk/","title":"3.6 内存和磁盘管理","section":"第三部分 系统管理","content":" 3.6 内存和磁盘管理 # "},{"id":14,"href":"/linux/docs/part2-sys-operate/2.7-vim/","title":"2.7 vim","section":"第二部分 系统操作","content":" 2.7 vim # 2.7.1 vim 三种模式 # 一般指令模式（Command mode）：vim 的默认模式，可以用于移动游标查看内容； 编辑模式（Insert mode）：按下i等按键之后进入，可以对文本进行编辑； 指令列模式（Bottom-line mode）：按下:按键之后进入，用于保存退出等操作。 在指令列模式下，有以下命令用于离开或者保存文件。\n命令 作用 :w 写入磁盘，也可以加上保存路径，如 :w /tmp/test.txt :w! 当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关 :q 离开 :q! 强制离开不保存 :wq 写入磁盘后离开 :wq! 强制写入磁盘后离开 2.7.2 正常模式 # 按键 作用 I 进入插入模式，光标会移到当前行的开头位置 a 进入插入模式，光标会移动到下一个字符位置 A 进入插入模式，光标会移动到当前行末尾位置 o 进入插入模式，会向下新开一行，光标会移动到新行开头位置 O 进入插入模式，会向上新开一行，光标会移动到新行开头位置 h 前移 l 后移 j 下移 k 上移 u 撤销操作，可以多次撤销 x 单个字符删除 r 替换字符 ^ 回到当前行首 $ 回到当前行尾 ctrl+r 重做，恢复撤销 yy 和 p yy 复制一行，p 粘贴 复制多行 # 比如复制 3 行，光标移到要复制的开头位置，先按 3，再按 yy，就复制了 3 行。\n复制光标到行结尾 # 在光标位置，先按 y 再按 $。\n跳到指定行 # 先输入行号，比如 11，再按 ctrl+g 或是 G。\n按 2 下 g（小写的 g），gg 会直接跳到第一行。GG 会跳到文本最后一行。\n2.7.3 命令模式 # 临时执行命令 # :! 命令可以在命令模式临时执行命令。比如临时执行ifconfig命令。\n查找替换 # :/要查找的字符串，按 n 往下继续查找。shift+n 定位到上一个查找到的结果。\n:s/old/new 只在光标所在行进行替换。\n:3,5s/old/new 对 3-5 行指定行进行替换。\n:%s/old/new 全文替换。可以加上 g，:%s/old/new/g进行全局替换。\n2.7.4 可视模式 # 按键 作用 v 字符可视模式 V（shift+v） 行可视模式 ctrl+v 块可视模式，配合 d 和I命令可以进行块的便利操作 2.7.5 常见问题 # 1. E388: Couldn\u0026rsquo;t find definition # 这个问题会导致 vim 的上下左右方向键不能使用。解决方法如下：\nvim ~/.vimrc 如果家目录没有 .vimrc 文件可以 touch 新建一个。在 .vimrc 文件中添加\n:set term=builtin_ansi 2. WARNING: terminal is not fully functional # 修改环境变量 TERM\nexport TERM=xterm "},{"id":15,"href":"/linux/docs/part2-sys-operate/2.8-user-manage/","title":"2.8 用户管理","section":"第二部分 系统操作","content":" 2.8 用户管理 # 命令 作用 useradd 新建用户 userdel 删除用户 passwd 修改用户密码 usermod 修改用户属性 chage 修改帐号和密码的有效期限 groupadd 新建用户组 groupdel 删除用户组 2.8.1 useradd # useradd 用户名 useradd -g 用户组 用户名 当不指定用户组时，会创建一个同名的用户组。\n2.8.2 passwd # passwd wislon 当修改自己的密码时，直接输入 passwd 回车。\n2.8.3 userdel # userdel 用户名 当加上-r选项时，会删除用户的家目录。\n2.8.4 usermod # 用于修改用户的基本信息。\n常用选项 # -d 选项 # 修改用户登入时的目录，只是修改/etc/passwd中用户的家目录配置信息，不会自动创建新的家目录，通常和-m一起使用。\n-m 选项 # 移动用户家目录到新的位置，不能单独使用，一般与-d一起使用。\n-g 选项 # 修改用户所属的用户组。\nusermod -g 用户组 用户名 2.8.5 groupadd # 创建一个新的用户组。\n2.8.6 passwd 配置文件 # /etc/passwd 文件中，各个字段以:分隔，如下\nntp:x:38:38::/etc/ntp:/sbin/nologin user1:x:1004:1004::/home/user1:/bin/bash 值1：表示用户名 值2：是否需要密码验证，x需要，空为不需要。 值3：用户 ID 值4：用户组 ID 值5：注释 值6：家目录 值7：用户登录后的命令解释器，当值为/sbin/nologin时不能登录终端。 2.8.6 shadow 配置文件 # /etc/shadow 文件跟用户密码相关。各个字段以:分隔，如下\nwilson:$6$OlPoziO9$SvSfAjR4yHWkUpAYIEHL6jUxF7FypoiOWRhVTftR3CZJUIwpWZcSguhVHfc1xVj9A9tr8ArZxvH.G//tyR0Qm/:19390:0:99999:7::: w:!!:19390:0:99999:7::: user1:!!:19390:0:99999:7::: 值1：用户名 值2：加密后的密码 2.8.7 group 配置文件 # /etc/group 文件跟用户组相关。各个字段以:分隔，如下\nstapsys:x:157: mail:x:12:postfix wilson:x:1002: w:x:1003: group1:x:1004: user1:x:1005: 值1：用户组名 值2：是否需要密码验证 值3：用户组 GID 值4：其他组设置 "},{"id":16,"href":"/linux/docs/part2-sys-operate/2.9-switch-user/","title":"2.9 切换用户","section":"第二部分 系统操作","content":" 2.9 切换用户 # su用于切换用户，如果普通用户切换成管理员需要输入密码，那么就需要把密码告诉普通用户，有暴露 root 密码的风险。\nsudo可以避免暴露 root 密码，可以直接把某些命令授权给普通用户执行，普通用户在执行时不需要 root 用户密码。\n2.9.1 su # 用于切换当前用户身份到其他用户身份。\n- 参数在变更账号后并改变工作目录到该账号的家目录。\n2.9.1 sudo # 以其他身份来执行命令。\nvisudo 设置需要使用 sudo 的用户（组）。\nwilson ALL=/usr/sbin/shutdown # wilson 用户被授予 shutdown 执行权限，多个命令以 , 分隔。 wilson ALL=/usr/sbin/shutdown NOPASSWD # wilson 用户被授予 shutdown 执行权限，不需要输入密码 "},{"id":17,"href":"/linux/docs/part2-sys-operate/2.10-file-dir/","title":"2.10 文件和文件夹","section":"第二部分 系统操作","content":" 2.10 文件和文件夹 # 2.10.1 文件类型 # - 普通文件 d 目录文件 b 块特殊文件 c 字符特殊文件 l 符号链接 f 命名管道 s 套接字文件 创建新文件有默认权限，根据 umask 值计算，属主和属组根据当前进程的用户来设定。\n在 linux 中创建文件默认是 (0)666 权限，需要减去 umask 的值。如：\n2.10.2 权限表示 # 普通文件 # r=4 读 w=2 写 x=1 执行 目录 # x 进入目录 rx 显示目录内的文件名 wx 修改目录内的文件名 x 权限只能进入目录\nrx 权限能进入并目录，显示目录内容，也可以读取文件，但是不能对文件进行操作\nwx 权限能进入目录，但是不能显示目录内容，可以读取/修改/删除文件\n2.10.3 修改权限 # chmod # chmod 可以修改文件和目录权限。\nu 表示用户，g 表示用户组，o 表示其他用户，a 表示所有。\nchmod u+x /tmp/testfile chmod u-wx /tmp/testfile chmod u=rwx /tmp/testfile chmod 755 /tmp/testfile chown # 更改文件或目录的所属用户和用户组。\nchown 用户 文件 chown :用户组 文件 chown 用户:用户组 文件 chgrp # 可以单独更新用户组，不常用。\nchgrp 用户组 文件 2.10.4 特殊权限 # SUID 用于二进制可执行文件，执行命令时取得文件属主权限，如/usr/bin/passwd SGID 用于目录，在该目录下创建新的文件和目录，权限自动更改为该目录的属组 SBIT 用于目录，该目录下新建的文件和目录，仅 root 和自己可以删除，如/tmp SUID # 说明 # 可以看到/etc/passwd除了 root 用户其实没有其他可以修改的，但是其他人也可以修改自己的密码，所以/usr/bin/passwd的权限就是 SUID，也就是任何人在执行 passwd 命令时自动获取到属主权限也就是 root 权限。\n添加方式 # 以 chmod 在原始权限加 4，比如原始权限是 744，那么就修改后的就是 4744，示例如下\nSBIT # 以 chmod 在原始权限加 1，比如原始权限是 744，那么就修改后的就是 1744，示例如下\n"},{"id":18,"href":"/linux/docs/part2-sys-operate/2.11-awk/","title":"2.11 awk 命令","section":"第二部分 系统操作","content":" 2.11 awk 命令 # awk 是一种处理文本文件的语言，是一个强大的文件分析工具。\nawk 比较倾向于将一行分成多个 “字段” 进行处理。awk 信息的读入是逐行读取的，执行结果可以通过 print 将字段数据打印显示。在使用 awk 命令的过程中，可以使用逻辑操作符，\u0026amp;\u0026amp;、|| 、!，还可以进行简单的数学运算，如+、-、*、/、%、^分别表示加、减、乘、除、取余和乘方。\n2.11.1 使用格式 # awk 「选项」 \u0026#39;模式或条件{操作}\u0026#39; 文件名 # 格式1 awk -f 脚本文件 文件名 # 格式2 2.11.2 内置变量 # 内置变量 功能 NF 当前处理的行的字段个数（就是：有多少列） NR 当前处理的行的行号（就是：有多少行） FNR 读取文件的记录数（行号），从1开始，新的文件重新从1开始计数 $0 当前处理的行的整行内容（就是：表示一行的内容） $n 当前处理行的第n个字段（就是：第n列） FILENAME 被处理的文件名 FS 指定每行的字段分隔符，默认为空格或制表位（相当于选项 -F ） OFS 输出字段的分隔符，默认也是空格 RS 行分割符。awk 从文件上读取资料时，将根据 RS 的定义把资料切割成许多条记录，而 awk 一次仅读取一条记录，预设值是\\n ORS 输出分割符，默认也是换行符 $n 用法 # n 为数字，数字为几就表示第几列。\n直接输入全部内容。 要求输出的是第 1 列。但是没有指定分隔符，awk 默认是以空格位分割。所有它认为这整个一行都是一列。 设定分割符号:，输出第 5 列。 设定分割符号x，输出第 1 列。 输出时，显示列的空格。 设置多个分割符。 $0 用法 # $0 表示整行。\nNF 和 NR 用法 # NF 表示该处理的行序号是多少，表示多少列。NR 表示该处理的行，有多少行。\n打印每一行的列数。 显示行号。 显示行号，并显示每一行的内容。 打印第 2 行，不加 print 也一样，默认就是打印。 打印第 2 行的第 1 列。 打印最后一列。 打印总行数。 打印文件最后一行。 加上文字描述行数和列数。 FNR 用法 # 可以看到当有多个文件时，序号会分别标好每一个文件内容的行号，不同文件会从头开始。（NR会连续在一起）。\nRS 用法 # 指定以什么为换行符，这里指定是冒号，指定的必须是原文里存在的字符。\n2.11.3 BEGIN 和 END 用法 # 逐行执行开始之前执行什么任务，结束之后再执行什么任务，用 BEGIN、END。\nBEGIN：一般用来做初始化操作，仅在读取数据记录之前执行一次。 END：一般用来做汇总操作，仅在读取完数据记录之后执行一次。 常见用法 # 在打印之前定义字段分割符为冒号:。 OFS 定义了输出时以什么分隔，$1$2 中间要用逗号分隔，因为逗号默认被映射为 OFS 变量，而这个变量默认是空格。 把多行合并成一行输出，输出的时候自定义以空格分隔每行，本来默认的是回车键。 2.11.4 包含与不包含 # 用~表示包含，用!~表示不包含。\n2.11.5 数值与字符串比较 # 逻辑运算 # 2.11.6 常见问题 # 获取本机 ip 地址 # 查看本机流量有多少字节 # 查看根分区的可用量 # 2.11.7 总结 # awk 常用操作是提取转换文本文件内容，awk 功能十分强大，几乎其它文本处理命令能做的，awk 都能做。\n$n ：表示截取哪一列，通常和print一起使用 $0 ：表示整行内容 NF ：表示该行有多少列 NR ：表示该行的行号 FNR ：表示读取两个文件时，序号会分别从0开始标 FS ：表示读取文件的分隔符（默认空格） OFS ：表示输入的内容以什么为分割符（默认空格） RS ：表示读取文件的以什么为换行符（默认\\n） ORS ：表示输出的内容以什么为换行符（默认\\n） ~ ：表示包含 !~ ：表示不包含 参考 # shell之三剑客awk（基础用法） "},{"id":19,"href":"/linux/docs/part2-sys-operate/2.12-sed/","title":"2.12 sed 命令","section":"第二部分 系统操作","content":" 2.12 sed 命令 # 2.12.1 简介 # sed（stream EDitor）是一个强大而简单的文本解析转换工具，可以读取文本，并根据指定的条件对文本内容进行编辑（删除、替换，添加、移动等），最后输出所有行或仅输出处理的某些行。\nsed 也可以在无交互的情况下实现相当复杂的文本处理操作，被广泛应用于 shell 脚本中，用以完成各种自动化处理任务。\nsed 的工作流程主要包括读取、执行和显示三个过程：\n读取： sed 从输入流（文件、管道、标准输入）中读取一行内容并存储到临时的缓冲区（又称模式空间）。 执行： 默认情况下，所有的 sed 命令都在模式空间中顺序地执行，除非指定了行的地址，否则 sed 命令将会在所有行上一次执行。 显示： 发送修改后的内容到输出流，在发送数据后，模式空间将会被清空。 在所有的文件内容都被处理完成之前，上述过程将重复执行，直至所有内容被处理完。\n默认情况下所有的 sed 命令，都是在模式空间内执行的，因此输入的文件并不会发生变化。\n2.12.2 选项操作 # 通常情况下调用 sed 命令有两种格式。\n“参数” 是指操作的目标文件，当存在多个操作对象时，文件之间用逗号分隔。 sed [选项] \u0026#39;操作\u0026#39; 参数 scriptfile 表示脚本文件，需要用-f选项指定，当脚本文件出现在目标文件之前时，表示通过指定的脚本文件来处理输入的目标文件。 sed [选项] -f scriptfile 参数 常见选项 # 选项 功能 -e 表示用指定命令或者脚本来处理输入的文本文件 -f 表示用指定的脚本文件来处理输入的文本文件 -h 显示帮助 -n 表示仅显示处理后的结果 -i 直接编辑文本文件 -r或-E 使用扩展正则表达式 -s 将多个文件视为独立文件，而不是单个连续的长文件流 操作指令 # 「操作」用于指定文件对操作的动作行为，也就是 sed 的命令。\n通常情况下是采用的[n1[,n2]]操作参数的格式。n1、n2 是可选的，代表选择进行操作的行数，如操作需要在 5~20 行之间进行，则表示为「5,20 动作行为」。\n选项 功能 a 增加，在当前行下面增加一行指定内容 i 插入，在选定行上面插入一行指定内容 c 替换，将选定行替换为指定内容 s 替换，替换指定的字符串 y 字符替换（字符一一替换） p 打印，如果同时指定行，表示打印指定行，如果不指定行，则表示打印所有内容，如果有非打印字符，则以 ASCII 码输出。其通常与-n选项一起使用。 d 删除，删除选定的行 2.12.3 选项案例 # -n 仅显示处理后的结果 # sed 在处理文件时，会将处理的内容放入到缓冲区（模式空间）中进行处理，然后在模式空间中对内容进行（增删改查）最后以标准输出的形式将内容输出出来。\nsed 从标准输入中读取 hahah.txt 文件的内容到缓冲区中，然后再在缓冲区中对 3p 进行打印，最后不仅将第 3 行打印，也将源文件打印。\n如果加上 -n 选项，-n 选项的意思就是，仅显示处理后的结果。文件内容被标准输入到缓冲空间后，sed 通过设定的选项知道了，需要输出哪些内容，仅输出处理的行。所以 -n 选项通常和 p 动作放在一起使用。\n-e 设置多个命令 # sed 命令可以不只包含一个命令。如果要包含多个命令，只需要每个命令前加上一个 -e 选项即可。\n注意：-e 选项的后面要接命令内容，不允许再夹杂其它选项\n-f 文件编辑 # 使用sed脚本将多个编辑指令存放到文件中（每行一条编辑指定），然后通过 -f 选项来调用。\n例如：执行一下命令即将第 1~5 行内容转移至第 15 行后。\n-i 进行修改文件 # 可以使用 -i 选项直接修改到文件中的内容，对源文件进行生效。\n2.12.4 操作案例 # p 输出指定行 # sed -n \u0026#39;3p\u0026#39; test.txt # 输出第 3 行 sed -n \u0026#39;3,5p\u0026#39; test.txt # 输出 3~5 行 sed -n \u0026#39;p;n\u0026#39; test.txt # 输出所有奇数行,n 表示读入下一行资料 sed -n \u0026#39;n;p\u0026#39; test.txt # 输出所有偶数行,n 表示读入下一行资料 sed -n \u0026#39;1,5{p;n}\u0026#39; test.txt # 输出第 1~5 行之间的奇数行(第 1、3、5 行) sed -n \u0026#39;10,${n;p}\u0026#39; test.txt # 输出第 10 行至文件尾之间的偶数行 sed -n p test.txt # 输出所有行 sed -n \u0026#39;3,$p\u0026#39; test.txt # 输出第 3 行至文件尾之间的行 结合正则表达式 # sed 命令结合正则表达式，格式略有不同，正则表达式以/包围。\nsed -n \u0026#39;/the/p\u0026#39; test.txt # 输出包含 the 的行 sed -n \u0026#39;4,/the/p\u0026#39; test.txt # 输出从第 4 行至最后一个包含 the 的行 sed -n \u0026#39;/the/=\u0026#39; test.txt # 输出包含the 的行所在的行号,等号(=)用来输出行号 sed -n \u0026#39;/^PI/p\u0026#39; test.txt # 输出以PI 开头的行 sed -n \u0026#39;/[0-9]$/p\u0026#39; test.txt # 输出以数字结尾的行 sed -n \u0026#39;/\\\u0026lt;wood\\\u0026gt;/p\u0026#39; test.txt # 输出包含单词wood 的行,\\\u0026lt;、\\\u0026gt;代表单词边界 d 删除指定行 # nl 文件名可以输出文件内容加上行号。\nnl test.txt | sed \u0026#39;3d\u0026#39; # 删除第 3 行 nl test.txt | sed \u0026#39;3,5d\u0026#39; # 删除第 3~5 行 # 删除包含 cross 的行,如果要删除不包含 cross 的行,用 ! 符号表示取反操作, 如\u0026#39;/cross/!d\u0026#39; nl test.txt | sed \u0026#39;/cross/d\u0026#39; sed \u0026#39;/^[a-z]/d\u0026#39; test.txt # 删除以小写字母开头的行 sed \u0026#39;/\\.$/d\u0026#39; test.txt # 删除以\u0026#34;.\u0026#34;结尾的行 sed \u0026#39;/^$/d\u0026#39; test.txt # 删除所有空行 s 替换符合条件的文件 # 在使用 sed 命令进行替换操作时需要用到 s（字符串替换）、c（整行/整块替换）、y（字符转换）。\ng 表示全局替换。\nsed \u0026#39;s/the/THE/\u0026#39; test.txt # 将每行中的第一个 the 替换为 THE sed \u0026#39;s/l/L/2\u0026#39; test.txt # 将每行中的第 2 个 l 替换为 L sed \u0026#39;s/the/THE/g\u0026#39; test.txt # 将文件中的所有 the 替换为 THE sed \u0026#39;s/o//g\u0026#39; test.txt # 将文件中的所有 o 删除(替换为空串（就是不存在的，不是空格）) sed \u0026#39;s/^/#/\u0026#39; test.txt # 在每行行首插入 # 号 sed \u0026#39;/the/s/^/#/\u0026#39; test.txt # 在包含 the 的每行行首插入 # 号 sed \u0026#39;s/$/EOF/\u0026#39; test.txt # 在每行行尾插入字符串 EOF sed \u0026#39;3,5s/the/THE/g\u0026#39; test.txt # 将第 3~5 行中的所有 the 替换为 THE sed \u0026#39;/the/s/o/O/g\u0026#39; test.txt # 将包含 the 的所有行中的 o 都替换为 O y 替换字符 # y///和s///有什么区别呢？主要有以下两点：\ny 的语法格式是y/source/dest/，表示将 源 中的字符对位替换为 目的 中的字符。而 s 的语法格式是s/regexp/replacement/，表示通过正则匹配到的内容替换为 replacement 部分。\ny 只是简单的逐字替换，没有很多花样。s 支持 \u0026amp; 符号和预存储等特性，可以实现更多灵活的替换效果。\ny 动作只是简单的替换字符，逐个替换。\n移动 {H;d} 插入 a 指定内容 # 常用参数\n参数 功能 H 复制到剪切板 g、G 将剪切板的数据覆盖/追加到指定行 w 保存为文件 r 读取指定文件 a 追加指定内容（a 是加入在行后，i 是加入在前行，6a 是指定多少行进行加入） I，i 忽略大小写 d 将以前的删除 $ 表示最后 sed \u0026#39;/the/{H;d};$G\u0026#39; test.txt # 将包含 the 的行迁移至文件末尾,{;}用于多个操作 sed \u0026#39;1,5{H;d};17G\u0026#39; test.txt # 将第 1~5 行内容转移至第 17 行后 sed \u0026#39;/the/w out.file\u0026#39; test.txt # 将包含the 的行另存为文件 out.file sed \u0026#39;/the/r /etc/hostname\u0026#39; test.txt # 将文件/etc/hostname 的内容添加到包含 the 的每行以后 sed \u0026#39;3aNew\u0026#39; test.txt # 在第 3 行后插入一个新行,内容为New sed \u0026#39;/the/aNew\u0026#39; test.txt # 在包含the 的每行后插入一个新行,内容为 New sed \u0026#39;3aNew1\\nNew2\u0026#39; test.txt # 在第 3 行后插入多行内容,中间的\\n 表示换行 将包含 the 的行迁移至文件末尾，{ ; }用于多个操作。 将第 1~2 行内容转移至第 5 行后。 将包含 the 的行另存为文件 out.file。 在第 3 行后插入一个新行，内容为 NEW。 2.12.5 总结 # sed 命令，主要用于修改配置文件中的内容，通过 -i 选项，可以使得文件修改内容生效。可以结合正则表达式进行一些复杂的修改，在一键部署各种服务中，可以实现免交互，直接进行修改。\n参考 # shell之三剑客sed命令 sed 高级命令用例 "},{"id":20,"href":"/linux/docs/part2-sys-operate/2.13-cut-sort-uniq-tr/","title":"2.13 cut、sort、uniq、tr 命令","section":"第二部分 系统操作","content":" 2.13 cut、sort、uniq、tr 命令 # 2.13.1 cut # 概述 # cut 是列截取工具。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。\n如果不指定 file 参数，cut 命令将读取标准输入。必须指定 -b(字节) 、-c(字符) 或 -f(第几列) 标志之一。\n字符和字节的区别\n字节（byte）是计量单位，表示数据量多少，是计算机信息技术用于计量存储容量的一种计量单位，通常情况下 1 字节等于 8 位。 字符（character）计算机中使用的字母、数字、字和符号。 一般在英文状态下，一个字母或字符占用一个字节， 一个汉字占用两个字节 。\n常用选线 # 格式：cut [选项] [文件路径] 选项 功能 -b 按字节截取 -c 按字符截取，常用于中文 -d 指定以什么为分割符截取，默认为制表符 -f 通常和 -d 一起使用（表示截取第几列） 案例演示 # 截取 /etc/passwd 文件的中 root 用户的第 7 列（-d -f） 按字节截取（-b） 按字符截取（-c） 截取第一位是 1，不是 0。\n2.13.2 sort # 概述 # sort 是一个以行为单位对文件内容进行排序的工具，也可以根据不同的数据类型来排序。例如：数据和字符的排序就不一样。\n常用选线 # 格式：sort [选项] [文件路径] 选项 功能 -t 指定分隔符，默认使用[Tab]键或空格分隔 -k 指定排序区域，哪个区间排序 -n 按照数字进行排序，默认是以字母形式排序 -u 等同于uniq，表示相同的数据仅显示一行，注意：如果行尾有空格就去重就不成功 -r 反向排序，默认升序 -o 将排序的结果转存至指定文件 案例演示 # 不加任何选项，默认按照第一列升序，字母的话就是从 a 到 z 指定分隔符（-t），指定排序的列（-k），升序排列 指定分隔符，指定排序的列，降序排列（-r） 指定分隔符，指定排序的列，降序排列，并将排序后的内容输入到/home/ydq/ydq.txt中（-o） 去掉文件中重复（可以是不连续的）的行（-u） 2.13.3 uniq # 概述 # uniq 主要用于去除连续的重复行，注意，是连续的行。通常和 sort 结合使用，先排序使之变成连续的行，再执行去重操作，否则不连续的重复行它不能去重。\n常用选线 # 不加选项的话，是直接去掉重复的行。\n格式：uniq [选项] 文件路径 选项 功能 -c 统计重复的行（在它前面标上重复的次数） -d 仅显示重复的行 -u 仅显示出现一次的行（不重复的行） 案例演示 # 统计连续重复的行（-c） 显示连续重复的行（-d），显示不连续重复的行（-u） 查看当前登录用户，去掉重复的行 统计历史登录过系统的用户 2.13.4 tr # tr 是修改工具，可以转换或删除文件中的字符。\n概述 # 可以用一个字符来替换另一个字符 可以完全除去一些字符 可以用来去掉重复的字符 从标准输入中替换，缩减和注释或删除字符，并将结果写到标准输出 常用选线 # 从标准输入中替换、缩减和/或删除字符，并将结果写到标准输出。\n格式： tr [选项] \u0026#39;字符集1\u0026#39; \u0026#39;字符集2\u0026#39; 选项 功能 -d 删除字符 -s 删除所有重复出现的字符，只保留一个（如果是空行，全部去掉） 案例演示 # 将所有小写的改成大写 替换字母，一一对应替换 替换字符，不是一一对应 将字符替换成特殊字符 删除字符（-d） 对字符去重（-s） 去掉所有的空行 2.13.5 面试题 # 1. 统计当前连接主机数 # 2. 统计当前主机的连接状态 # 2.13.6 总结 # cut ：表示截取列 # 可以按照字符（-c）按照字节（-b）或者根据分割符（-d）来选取要截取的列（-f）。\nsort：表示排序 # 默认以字母排序，数字排序需要加选项（-n），反向排序需要加选项（-r）。 还可以选择按照哪一列进行排序，需要先定义分割符（-t），然后根据分割符去选取对应的列（-k），最后进行排序。 可以将排序后的内容输入到其它文件，使用选项（-o）可以指定需要注入的文件名。 还可以将进行去重（-u），可以是不连续的行，进行去重。 uniq：表示去重 # 主要注意的是它必须是连续的行，不然无法去重 可以根据选项，选择显示不重复的行（-u） 还可以选择显示重复的行（-d） 还可以统计连续重复的数量（-c） tr：表示修改字符 # 可以修改对应的字符，按照字符对应一一修改，如果有重复的字符，它会按照最后一个字符对应的修改字符进行替换，如果对应的字符不够时，它会将修改的最后一个字符进替换。 还可以进行删除（-d），删除文本中所对应的字符 还可以进行去重（-s），但是去重的字符必须是连续在一起的两个字符（会保留其中一个），不然无法去重成功。 参考 # shell之常用工具（cut、sort、uniq、tr） "}]