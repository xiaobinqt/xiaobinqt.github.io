<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第五部分 文本操作 on Linux 学习笔记</title>
    <link>https://example.com/linux/docs/part5-text-operate/</link>
    <description>Recent content in 第五部分 文本操作 on Linux 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://example.com/linux/docs/part5-text-operate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5.1 正则表达式</title>
      <link>https://example.com/linux/docs/part5-text-operate/5.1-regular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part5-text-operate/5.1-regular/</guid>
      <description>5.1 正则表达式 # 5.1.1 元字符 # 元字符是正则表达式中具有特殊含义的字符。它们用于表示模式的不同部分或进行模式匹配的控制。常见的元字符包括：
. 匹配除换行符外的任意单个字符 * 匹配前面的元素零次或多次 [] 匹配方括号中的字符类中的任意一个 ^ 匹配开头 $ 匹配结尾 \ 转义后面的特殊字符 + 匹配前面的元素一次或多次 ? 匹配前面的元素零次或一次 | 匹配它前面或后面的正则表达式 5.1.2 通配符 # 通配符是在文件系统中使用的一种模式匹配机制。它用于匹配文件名或路径的模式。常见的通配符包括：
* 匹配任意长度的任意字符。 ? 匹配单个字符。 [&amp;hellip;]（方括号）：定义一个字符集，匹配括号内的任意一个字符。 通配符主要用于文件名的模式匹配，例如在命令行中使用 ls 或 find 命令时，可以使用通配符来筛选文件名。
5.1.3 find 命令 # find 主要是在目录中查找指定文件，可以结合正则表达式实现复杂的查找功能。
find 支持正则可以使用 -regex：
find /etc/ -regex .*wd$ -type d 查找目录，-type f 查找文件：</description>
    </item>
    
    <item>
      <title>5.2 sed 命令</title>
      <link>https://example.com/linux/docs/part5-text-operate/5.2-sed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part5-text-operate/5.2-sed/</guid>
      <description>5.2 sed 命令 # 5.2.1 简介 # sed（stream EDitor）是一个强大而简单的文本解析转换工具，可以读取文本，并根据指定的条件对文本内容进行编辑（删除、替换，添加、移动等），最后输出所有行或仅输出处理的某些行。
sed 也可以在无交互的情况下实现相当复杂的文本处理操作，将不规范的文本，处理为 “比较规范” 的文本，被广泛应用于 shell 脚本中，用以完成各种自动化处理任务。
sed 的工作流程主要包括读取、执行和显示三个过程：
读取： sed 从输入流（文件、管道、标准输入）中读取一行内容并存储到临时的缓冲区（又称模式空间）。 执行： 默认情况下，所有的 sed 命令都在模式空间中顺序地执行，除非指定了行的地址，否则 sed 命令将会在所有行上一次执行。 显示： 发送修改后的内容到输出流，在发送数据后，模式空间将会被清空。 在所有的文件内容都被处理完成之前，上述过程将重复执行，直至所有内容被处理完。
默认情况下所有的 sed 命令，都是在模式空间内执行的，因此输入的文件并不会发生变化。
5.2.2 选项操作 # 通常情况下调用 sed 命令有两种格式。
“参数” 是指操作的目标文件，当存在多个操作对象时，文件之间用逗号分隔。 sed [选项] &amp;#39;操作&amp;#39; 参数 scriptfile 表示脚本文件，需要用-f选项指定，当脚本文件出现在目标文件之前时，表示通过指定的脚本文件来处理输入的目标文件。 sed [选项] -f scriptfile 参数 常见选项 # 选项 功能 -e 表示用指定命令或者脚本来处理输入的文本文件 -f 表示用指定的脚本文件来处理输入的文本文件 -h 显示帮助 -n 表示仅显示处理后的结果 -i 直接编辑文本文件 -r 或 -E 使用扩展正则表达式 -s 将多个文件视为独立文件，而不是单个连续的长文件流 操作指令 # 「操作」用于指定文件对操作的动作行为，也就是 sed 的命令。</description>
    </item>
    
    <item>
      <title>5.3 awk 命令</title>
      <link>https://example.com/linux/docs/part5-text-operate/5.3-awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part5-text-operate/5.3-awk/</guid>
      <description>5.3 awk 命令 # awk 是一种处理文本文件的语言，是一个强大的文件分析工具。常用于处理 “比较规范” 的文本处理，统计数量并输出指定字段。
awk 比较倾向于将一行分成多个 “字段” 进行处理。awk 信息的读入是逐行读取的，执行结果可以通过 print 将字段数据打印显示。在使用 awk 命令的过程中，可以使用逻辑操作符，&amp;amp;&amp;amp;、|| 、!，还可以进行简单的数学运算，如+、-、*、/、%、^分别表示加、减、乘、除、取余和乘方。
5.3.1 使用格式 # awk 「选项」 &amp;#39;模式或条件{操作}&amp;#39; 文件名 # 格式1 awk -f 脚本文件 文件名 # 格式2 5.3.2 内置变量 # 内置变量 功能 NF 当前处理的行的字段个数（就是：有多少列） NR 当前处理的行的行号（就是：有多少行） FNR 读取文件的记录数（行号），从1开始，新的文件重新从1开始计数 $0 当前处理的行的整行内容（就是：表示一行的内容） $n 当前处理行的第n个字段（就是：第n列） FILENAME 被处理的文件名 FS 指定每行的字段分隔符，默认为空格或制表位（相当于选项 -F ） OFS 输出字段的分隔符，默认也是空格 RS 行分割符。awk 从文件上读取资料时，将根据 RS 的定义把资料切割成许多条记录，而 awk 一次仅读取一条记录，预设值是\n ORS 输出分割符，默认也是换行符 $n 用法 # n 为数字，数字为几就表示第几列。</description>
    </item>
    
    <item>
      <title>5.4 cut、sort、uniq、tr 命令</title>
      <link>https://example.com/linux/docs/part5-text-operate/5.4-cut-sort-uniq-tr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part5-text-operate/5.4-cut-sort-uniq-tr/</guid>
      <description>5.4 cut、sort、uniq、tr 命令 # 5.4.1 cut # 概述 # cut 是列截取工具。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。
如果不指定 file 参数，cut 命令将读取标准输入。必须指定 -b(字节) 、-c(字符) 或 -f(第几列) 标志之一。
字符和字节的区别
字节（byte）是计量单位，表示数据量多少，是计算机信息技术用于计量存储容量的一种计量单位，通常情况下 1 字节等于 8 位。 字符（character）计算机中使用的字母、数字、字和符号。 一般在英文状态下，一个字母或字符占用一个字节， 一个汉字占用两个字节 。
常用选线 # 格式：cut [选项] [文件路径] 选项 功能 -b 按字节截取 -c 按字符截取，常用于中文 -d 指定以什么为分割符截取，默认为制表符 -f 通常和 -d 一起使用（表示截取第几列） 案例演示 # 截取 /etc/passwd 文件的中 root 用户的第 7 列（-d -f） 按字节截取（-b） 按字符截取（-c） 截取第一位是 1，不是 0。
5.4.2 sort # 概述 # sort 是一个以行为单位对文件内容进行排序的工具，也可以根据不同的数据类型来排序。例如：数据和字符的排序就不一样。</description>
    </item>
    
  </channel>
</rss>
