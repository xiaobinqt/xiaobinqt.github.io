<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一部分 基础知识 on Linux 学习笔记</title>
    <link>https://example.com/linux/docs/part1-primary/</link>
    <description>Recent content in 第一部分 基础知识 on Linux 学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/linux/docs/part1-primary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 操作系统</title>
      <link>https://example.com/linux/docs/part1-primary/1.1-operating-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.1-operating-system/</guid>
      <description>&lt;h1 id=&#34;11-操作系统&#34;&gt;&#xA;  1.1 操作系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;111-基本特征&#34;&gt;&#xA;  1.1.1 基本特征&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-%e5%9f%ba%e6%9c%ac%e7%89%b9%e5%be%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-并发&#34;&gt;&#xA;  1. 并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。&lt;/p&gt;&#xA;&lt;p&gt;并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。&lt;/p&gt;&#xA;&lt;p&gt;操作系统通过引入进程和线程，使得程序能够并发运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-共享&#34;&gt;&#xA;  2. 共享&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%85%b1%e4%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;共享是指系统中的资源可以被多个并发进程共同使用。&lt;/p&gt;&#xA;&lt;p&gt;有两种共享方式：互斥共享和同时共享。&lt;/p&gt;&#xA;&lt;p&gt;互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-虚拟&#34;&gt;&#xA;  3. 虚拟&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e8%99%9a%e6%8b%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;虚拟技术把一个物理实体转换为多个逻辑实体。&lt;/p&gt;&#xA;&lt;p&gt;主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。&lt;/p&gt;&#xA;&lt;p&gt;多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。&lt;/p&gt;&#xA;&lt;p&gt;虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-异步&#34;&gt;&#xA;  4. 异步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%bc%82%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。&lt;/p&gt;&#xA;&lt;h2 id=&#34;112-基本功能&#34;&gt;&#xA;  1.1.2 基本功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-%e5%9f%ba%e6%9c%ac%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-进程管理&#34;&gt;&#xA;  1. 进程管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;进程控制、进程同步、进程通信、死锁处理、处理机调度等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-内存管理&#34;&gt;&#xA;  2. 内存管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;内存分配、地址映射、内存保护与共享、虚拟内存等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-文件管理&#34;&gt;&#xA;  3. 文件管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%96%87%e4%bb%b6%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;文件存储空间的管理、目录管理、文件读写管理和保护等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-设备管理&#34;&gt;&#xA;  4. 设备管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e8%ae%be%e5%a4%87%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。&lt;/p&gt;&#xA;&lt;p&gt;主要包括缓冲管理、设备分配、设备处理、虛拟设备等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;123-系统调用&#34;&gt;&#xA;  1.2.3 系统调用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#123-%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/a31b70c3a2a04481b3e3849408cc4393.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux 的系统调用主要有以下这些：&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.2 总览</title>
      <link>https://example.com/linux/docs/part1-primary/1.2-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.2-overview/</guid>
      <description>&lt;h1 id=&#34;12-总览&#34;&gt;&#xA;  1.2 总览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;121-常用操作以及概念&#34;&gt;&#xA;  1.2.1 常用操作以及概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#121-%e5%b8%b8%e7%94%a8%e6%93%8d%e4%bd%9c%e4%bb%a5%e5%8f%8a%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;快捷键&#34;&gt;&#xA;  快捷键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e6%8d%b7%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tab：命令和文件名补全；&lt;/li&gt;&#xA;&lt;li&gt;Ctrl+C：中断正在运行的程序；&lt;/li&gt;&#xA;&lt;li&gt;Ctrl+D：结束键盘输入（End Of File，EOF）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;求助&#34;&gt;&#xA;  求助&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b1%82%e5%8a%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1---help&#34;&gt;&#xA;  1. &amp;ndash;help&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1---help&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;指令的基本用法与选项介绍。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2-man&#34;&gt;&#xA;  2. man&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-man&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;man 是 manual 的缩写，将指令的具体信息显示出来。&lt;/p&gt;&#xA;&lt;p&gt;当执行&lt;code&gt;man date&lt;/code&gt;时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;代号&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;类型&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;用户在 shell 环境中可以操作的指令或者可执行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;配置文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;系统管理员可以使用的管理指令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;3-info&#34;&gt;&#xA;  3. info&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-info&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以跳转。&lt;/p&gt;&#xA;&lt;h4 id=&#34;4-doc&#34;&gt;&#xA;  4. doc&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-doc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;/usr/share/doc 存放着软件的一整套说明文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;关机&#34;&gt;&#xA;  关机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-who&#34;&gt;&#xA;  1. who&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-who&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在关机前需要先使用 who 命令查看有没有其它用户在线。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.3 常见目录</title>
      <link>https://example.com/linux/docs/part1-primary/1.3-common-dir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.3-common-dir/</guid>
      <description>&lt;h1 id=&#34;13-常见目录&#34;&gt;&#xA;  1.3 常见目录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#13-%e5%b8%b8%e8%a7%81%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/ # 根目录&#xA;├── /root # root 用户家目录&#xA;├── /home/username # 普通用户家目录&#xA;├── /etc # 配置文件目录&#xA;├── /bin # 命令目录&#xA;├── /sbib # 管理命令目录&#xA;├── /usr/bin # 系统预装的其他命令&#xA;└── /usr/sbin # 系统预装的其他命令&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>1.4 进程管理</title>
      <link>https://example.com/linux/docs/part1-primary/1.4-process-manage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.4-process-manage/</guid>
      <description>&lt;h1 id=&#34;14-进程管理&#34;&gt;&#xA;  1.4 进程管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#14-%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;141-进程与线程&#34;&gt;&#xA;  1.4.1 进程与线程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#141-%e8%bf%9b%e7%a8%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-进程&#34;&gt;&#xA;  1. 进程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%bf%9b%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;进程是资源分配的基本单位。&lt;/p&gt;&#xA;&lt;p&gt;进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。&lt;/p&gt;&#xA;&lt;p&gt;下图显示了 4 个程序创建了 4 个进程，这 4 个进程可以并发地执行。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/b6dc70c4f823407cba40ae6ba489f2fb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-线程&#34;&gt;&#xA;  2. 线程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;线程是独立调度的基本单位。&lt;/p&gt;&#xA;&lt;p&gt;一个进程中可以有多个线程，它们共享进程资源。&lt;/p&gt;&#xA;&lt;p&gt;QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/75fc51ba7687443d9df0cad87ff6e355.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-区别&#34;&gt;&#xA;  3. 区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;-拥有资源&#34;&gt;&#xA;  Ⅰ 拥有资源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%8b%a5%e6%9c%89%e8%b5%84%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。&lt;/p&gt;&#xA;&lt;h4 id=&#34;-调度&#34;&gt;&#xA;  Ⅱ 调度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%b0%83%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。&lt;/p&gt;&#xA;&lt;h4 id=&#34;-系统开销&#34;&gt;&#xA;  Ⅲ 系统开销&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%b3%bb%e7%bb%9f%e5%bc%80%e9%94%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。&lt;/p&gt;&#xA;&lt;h4 id=&#34;-通信方面&#34;&gt;&#xA;  Ⅳ 通信方面&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%80%9a%e4%bf%a1%e6%96%b9%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC（Inter-Process Communication，进程间通信）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.5 死锁</title>
      <link>https://example.com/linux/docs/part1-primary/1.5-deadlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.5-deadlock/</guid>
      <description>&lt;h1 id=&#34;15-死锁&#34;&gt;&#xA;  1.5 死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#15-%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;151-必要条件&#34;&gt;&#xA;  1.5.1 必要条件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#151-%e5%bf%85%e8%a6%81%e6%9d%a1%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/fbddf71f41b9495fb852f1ec50026239.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;互斥：每个资源要么已经分配给了一个进程，要么就是可用的。&lt;/li&gt;&#xA;&lt;li&gt;占有和等待：已经得到了某个资源的进程可以再请求新的资源。&lt;/li&gt;&#xA;&lt;li&gt;不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。&lt;/li&gt;&#xA;&lt;li&gt;环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;152-处理方法&#34;&gt;&#xA;  1.5.2 处理方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#152-%e5%a4%84%e7%90%86%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;主要有以下四种方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鸵鸟策略&lt;/li&gt;&#xA;&lt;li&gt;死锁检测与死锁恢复&lt;/li&gt;&#xA;&lt;li&gt;死锁预防&lt;/li&gt;&#xA;&lt;li&gt;死锁避免&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;153-鸵鸟策略&#34;&gt;&#xA;  1.5.3 鸵鸟策略&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#153-%e9%b8%b5%e9%b8%9f%e7%ad%96%e7%95%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;把头埋在沙子里，假装根本没发生问题。&lt;/p&gt;&#xA;&lt;p&gt;因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。&lt;/p&gt;&#xA;&lt;p&gt;当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。&lt;/p&gt;&#xA;&lt;p&gt;大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。&lt;/p&gt;&#xA;&lt;h2 id=&#34;154-死锁检测与死锁恢复&#34;&gt;&#xA;  1.5.4 死锁检测与死锁恢复&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#154-%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b%e4%b8%8e%e6%ad%bb%e9%94%81%e6%81%a2%e5%a4%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-每种类型一个资源的死锁检测&#34;&gt;&#xA;  1. 每种类型一个资源的死锁检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%af%8f%e7%a7%8d%e7%b1%bb%e5%9e%8b%e4%b8%80%e4%b8%aa%e8%b5%84%e6%ba%90%e7%9a%84%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/763fb2c5f8c44738945930bc4017741a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。&lt;/p&gt;&#xA;&lt;p&gt;图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。&lt;/p&gt;&#xA;&lt;p&gt;每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-每种类型多个资源的死锁检测&#34;&gt;&#xA;  2. 每种类型多个资源的死锁检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%af%8f%e7%a7%8d%e7%b1%bb%e5%9e%8b%e5%a4%9a%e4%b8%aa%e8%b5%84%e6%ba%90%e7%9a%84%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221223/503c4a5ba8104e5fba114f65e33556ca.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图中，有三个进程四个资源，每个数据代表的含义如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;E 向量：资源总量&lt;/li&gt;&#xA;&lt;li&gt;A 向量：资源剩余量&lt;/li&gt;&#xA;&lt;li&gt;C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量&lt;/li&gt;&#xA;&lt;li&gt;R 矩阵：每个进程请求的资源数量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3 执行，之后释放 P3 拥有的资源，此时 A = (2 2 2 0)。P2 可以执行，执行后释放 P2 拥有的资源，A = (4 2 2 1) 。P1 也可以执行。所有进程都可以顺利执行，没有死锁。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.6 内存管理</title>
      <link>https://example.com/linux/docs/part1-primary/1.6-memory-manage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.6-memory-manage/</guid>
      <description>&lt;h1 id=&#34;16-内存管理&#34;&gt;&#xA;  1.6 内存管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;161-虚拟内存&#34;&gt;&#xA;  1.6.1 虚拟内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#161-%e8%99%9a%e6%8b%9f%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。&lt;/p&gt;&#xA;&lt;p&gt;为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。&lt;/p&gt;&#xA;&lt;p&gt;从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/6140255a11b94b96b49e64cafaeb0e59.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;162-分页系统地址映射&#34;&gt;&#xA;  1.6.2 分页系统地址映射&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#162-%e5%88%86%e9%a1%b5%e7%b3%bb%e7%bb%9f%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。&lt;/p&gt;&#xA;&lt;p&gt;一个虚拟地址分成两个部分，一部分存储页面号，一部分存储偏移量。&lt;/p&gt;&#xA;&lt;p&gt;下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位。例如对于虚拟地址（0010 000000000100），前 4 位是存储页面号 2，读取表项内容为（110 1），页表项最后一位表示是否存在于内存中，1 表示存在。后 12 位存储偏移量。这个页对应的页框的地址为 （110 000000000100）。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/07c254cee9bb4cfcaa6af41c8fc7d340.png&#34; width=&#34;500&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;163-页面置换算法&#34;&gt;&#xA;  1.6.3 页面置换算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#163-%e9%a1%b5%e9%9d%a2%e7%bd%ae%e6%8d%a2%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。&lt;/p&gt;&#xA;&lt;p&gt;页面置换算法和缓存淘汰策略类似，可以将内存看成磁盘的缓存。在缓存系统中，缓存的大小有限，当有新的缓存到达时，需要淘汰一部分已经存在的缓存，这样才有空间存放新的缓存数据。&lt;/p&gt;&#xA;&lt;p&gt;页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-最佳&#34;&gt;&#xA;  1. 最佳&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%9c%80%e4%bd%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;OPT, Optimal replacement algorithm&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。&lt;/p&gt;&#xA;&lt;p&gt;是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。&lt;/p&gt;&#xA;&lt;p&gt;举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.7 链接</title>
      <link>https://example.com/linux/docs/part1-primary/1.7-link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.7-link/</guid>
      <description>&lt;h1 id=&#34;17-链接&#34;&gt;&#xA;  1.7 链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#17-%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;171-编译系统&#34;&gt;&#xA;  1.7.1 编译系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#171-%e7%bc%96%e8%af%91%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以下是一个 hello.c 程序：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Unix 系统上，由编译器把源文件转换为目标文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -o hello hello.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程大致如下：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/0c6bc5a167884e4dac7d45103829b825.png&#34; width=&#34;800&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;预处理阶段：处理以 # 开头的预处理命令；&lt;/li&gt;&#xA;&lt;li&gt;编译阶段：翻译成汇编文件；&lt;/li&gt;&#xA;&lt;li&gt;汇编阶段：将汇编文件翻译成可重定位目标文件；&lt;/li&gt;&#xA;&lt;li&gt;链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;172-静态链接&#34;&gt;&#xA;  1.7.2 静态链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#172-%e9%9d%99%e6%80%81%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。&lt;/li&gt;&#xA;&lt;li&gt;重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/7973d607297f438aa42f709167c80f1f.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;172-目标文件&#34;&gt;&#xA;  1.7.2 目标文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#172-%e7%9b%ae%e6%a0%87%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可执行目标文件：可以直接在内存中执行；&lt;/li&gt;&#xA;&lt;li&gt;可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件；&lt;/li&gt;&#xA;&lt;li&gt;共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;173-动态链接&#34;&gt;&#xA;  1.7.3 动态链接&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#173-%e5%8a%a8%e6%80%81%e9%93%be%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;静态库有以下两个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当静态库更新时那么整个程序都要重新进行链接；&lt;/li&gt;&#xA;&lt;li&gt;对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；&lt;/li&gt;&#xA;&lt;li&gt;在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/dbb44187be594a5fb9f7a874a1881545.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;</description>
    </item>
    <item>
      <title>1.7 设备管理</title>
      <link>https://example.com/linux/docs/part1-primary/1.7-device-manage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.7-device-manage/</guid>
      <description>&lt;h1 id=&#34;17-设备管理&#34;&gt;&#xA;  1.7 设备管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#17-%e8%ae%be%e5%a4%87%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;171-磁盘结构&#34;&gt;&#xA;  1.7.1 磁盘结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#171-%e7%a3%81%e7%9b%98%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;盘面（Platter）：一个磁盘有多个盘面；&lt;/li&gt;&#xA;&lt;li&gt;磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道；&lt;/li&gt;&#xA;&lt;li&gt;扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4 K 两种大小；&lt;/li&gt;&#xA;&lt;li&gt;磁头（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）；&lt;/li&gt;&#xA;&lt;li&gt;制动手臂（Actuator arm）：用于在磁道之间移动磁头；&lt;/li&gt;&#xA;&lt;li&gt;主轴（Spindle）：使整个盘面转动。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/e1f881074cd242c49717eada7d91e549.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h2 id=&#34;172-磁盘调度算法&#34;&gt;&#xA;  1.7.2 磁盘调度算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#172-%e7%a3%81%e7%9b%98%e8%b0%83%e5%ba%a6%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;读写一个磁盘块的时间的影响因素有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）&lt;/li&gt;&#xA;&lt;li&gt;寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）&lt;/li&gt;&#xA;&lt;li&gt;实际的数据传输时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-先来先服务&#34;&gt;&#xA;  1. 先来先服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%85%88%e6%9d%a5%e5%85%88%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;FCFS, First Come First Served&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;按照磁盘请求的顺序进行调度。&lt;/p&gt;&#xA;&lt;p&gt;优点是公平和简单。缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-最短寻道时间优先&#34;&gt;&#xA;  2. 最短寻道时间优先&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%9c%80%e7%9f%ad%e5%af%bb%e9%81%93%e6%97%b6%e9%97%b4%e4%bc%98%e5%85%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SSTF, Shortest Seek Time First&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;优先调度与当前磁头所在磁道距离最近的磁道。&lt;/p&gt;&#xA;&lt;p&gt;虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/243843c6184346368aee7a6677908910.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;&#xA;&lt;h3 id=&#34;3-电梯算法&#34;&gt;&#xA;  3. 电梯算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e7%94%b5%e6%a2%af%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SCAN&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。&lt;/p&gt;&#xA;&lt;p&gt;电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。&lt;/p&gt;&#xA;&lt;p&gt;因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20221225/d6844e82beee46a488623f2f69cf1e3a.png&#34;/&gt; &lt;/div&gt;&lt;br&gt;</description>
    </item>
    <item>
      <title>1.8 指令集</title>
      <link>https://example.com/linux/docs/part1-primary/1.8-instruction-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.8-instruction-arch/</guid>
      <description>&lt;h1 id=&#34;18-指令集&#34;&gt;&#xA;  1.8 指令集&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#18-%e6%8c%87%e4%bb%a4%e9%9b%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;181-指令集架构&#34;&gt;&#xA;  1.8.1 指令集架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#181-%e6%8c%87%e4%bb%a4%e9%9b%86%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;指令集架构是指一套软硬件的标准规范，CPU芯片和软件应用会围绕这套规范设计。从CPU发明到现在，有非常多种架构，从常见的x86、ARM，到不太常见的RISC-V，MIPS、IA64，它们之间的差距都非常大。&lt;/p&gt;&#xA;&lt;p&gt;有些时候我们会遇到在本地开发环境编译和运行正常的代码，在生产环境却无法正常工作，当然这个问题背后会有多种原因，而不同机器使用的不同指令集可能是原因之一。&lt;/p&gt;&#xA;&lt;p&gt;指令集架构是计算机的抽象模型，在很多时候也被称作架构或者计算机架构，它是计算机软件和硬件之间的接口和桥梁。一个为特定指令集架构编写的应用程序能够运行在所有支持这种指令集架构的机器上，也就是说如果当前应用程序支持 x86 的指令集，那么就可以运行在所有使用 x86 指令集的机器上，这其实就是抽象层的作用，每一个指令集架构都定义了支持的数据结构、寄存器、管理主内存的硬件支持（例如内存一致、地址模型和虚拟内存）、支持的指令集和 IO 模型，它的引入其实就在软件和硬件之间引入了一个抽象层，让同一个二进制文件能够在不同版本的硬件上运行。如果一个编程语言想要在所有的机器上运行，它就可以将中间代码转换成使用不同指令集架构的机器码，这可比为不同硬件单独移植要简单的太多了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;182-复杂指令集cisc和精简指令集risc&#34;&gt;&#xA;  1.8.2 复杂指令集（CISC）和精简指令集（RISC）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#182-%e5%a4%8d%e6%9d%82%e6%8c%87%e4%bb%a4%e9%9b%86cisc%e5%92%8c%e7%b2%be%e7%ae%80%e6%8c%87%e4%bb%a4%e9%9b%86risc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最常见的指令集架构分类方法是根据指令的复杂度将其分为复杂指令集（CISC）和精简指令集（RISC），复杂指令集架构包含了很多特定的指令，但是其中的一些指令很少会被程序使用，而精简指令集只实现了经常被使用的指令，不常用的操作都会通过组合简单指令来实现。&lt;/p&gt;&#xA;&lt;p&gt;复杂指令集的特点就是指令数目多并且复杂，每条指令的字节长度并不相等，x86 就是常见的复杂指令集处理器，它的指令长度大小范围非常广，从 1 到 15 字节不等，对于长度不固定的指令，计算机必须额外对指令进行判断，这需要付出额外的性能损失。&lt;/p&gt;&#xA;&lt;p&gt;而精简指令集对指令的数目和寻址方式做了精简，大大减少指令数量的同时更容易实现，指令集中的每一个指令都使用标准的字节长度、执行时间相比复杂指令集会少很多，处理器在处理指令时也可以流水执行，提高了对并行的支持。作为一种常见的精简指令集处理器，arm 使用 4 个字节作为指令的固定长度，省略了判断指令的性能损失3，精简指令集其实就是利用了我们耳熟能详的 20/80 原则，用 20% 的基础指令和它们的组合来解决问题。&lt;/p&gt;&#xA;&lt;p&gt;复杂指令集和精简指令集的使用是设计上的权衡，经过这么多年的发展，两种指令集也相互借鉴和学习，与最开始刚被设计出来时已经有了较大的差别。最开始的计算机使用复杂指令集是因为当时计算机的性能和内存比较有限，业界需要尽可能地减少机器需要执行的指令，所以更倾向于高度编码、长度不等以及多操作数的指令。不过随着计算机性能的提升，出现了精简指令集这种牺牲代码密度换取简单实现的设计；除此之外，硬件的飞速提升还带来了更多的寄存器和更高的时钟频率，软件开发人员也不再直接接触汇编代码，而是通过编译器和汇编器生成指令，复杂的机器指令对于编译器来说很难利用，所以精简指令在这种场景下更适合。&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考&#34;&gt;&#xA;  参考&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-machinecode/&#34;&gt;机器码生成&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>1.9 国内镜像源</title>
      <link>https://example.com/linux/docs/part1-primary/1.9-mirrors-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part1-primary/1.9-mirrors-sources/</guid>
      <description>&lt;h1 id=&#34;19-国内镜像源&#34;&gt;&#xA;  1.9 国内镜像源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#19-%e5%9b%bd%e5%86%85%e9%95%9c%e5%83%8f%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;alpine&#34;&gt;&#xA;  Alpine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#alpine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Alpine 的源文件为：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;/etc/apk/repositories&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;默认的源地址为：http://dl-cdn.alpinelinux.org/， 修改地址可以编辑源文件 /etc/apk/repositories。&lt;/p&gt;&#xA;&lt;p&gt;国内镜像及修改方法，采用国内阿里云的源，文件内容为：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.aliyun.com/alpine/v3.6/main/&#34;&gt;https://mirrors.aliyun.com/alpine/v3.6/main/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.aliyun.com/alpine/v3.6/community/&#34;&gt;https://mirrors.aliyun.com/alpine/v3.6/community/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;命令：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;rsquo; /etc/apk/repositories&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果采用中国科技大学的源，文件内容为：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.ustc.edu.cn/alpine/v3.6/main/&#34;&gt;https://mirrors.ustc.edu.cn/alpine/v3.6/main/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.ustc.edu.cn/alpine/v3.6/community/&#34;&gt;https://mirrors.ustc.edu.cn/alpine/v3.6/community/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;命令：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&amp;rsquo; /etc/apk/repositories&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果采用中国科技大学的源，文件内容为：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.6/main/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.6/main/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.6/community/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.6/community/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;命令：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;sed -i &amp;rsquo;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&amp;rsquo; /etc/apk/repositories&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
