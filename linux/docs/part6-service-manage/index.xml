<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第六部分 服务管理 on Linux 学习笔记</title>
    <link>https://example.com/linux/docs/part6-service-manage/</link>
    <description>Recent content in 第六部分 服务管理 on Linux 学习笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="https://example.com/linux/docs/part6-service-manage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6.1 防火墙</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.1-firewall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.1-firewall/</guid>
      <description>&lt;h1 id=&#34;61-防火墙&#34;&gt;&#xA;  6.1 防火墙&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#61-%e9%98%b2%e7%81%ab%e5%a2%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;611-分类&#34;&gt;&#xA;  6.1.1 分类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#611-%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;软件防火墙和硬件防火墙是两种常见的网络安全设备或软件，用于保护计算机系统和网络免受未授权访问、恶意攻击和网络威胁等。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;软件防火墙（Software Firewall）：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;软件防火墙是一种安装在计算机系统上的软件应用程序，用于监控和控制网络流量。它可以通过检查网络数据包的来源、目的地、协议和端口等信息，来判断是否允许或阻止数据包的传输。软件防火墙通常运行在操作系统的网络协议栈之上，能够保护单个计算机系统或网络中的特定主机。常见的软件防火墙包括Windows防火墙、IPTables、NetFilter等。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;硬件防火墙（Hardware Firewall）：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;硬件防火墙是一种独立的物理设备，专门用于网络安全防护。它通常部署在网络的边界位置，作为网络流量的第一道防线。硬件防火墙通过硬件和专用的嵌入式软件来执行数据包过滤和访问控制。它可以监控和检测网络流量，并根据预先定义的规则和策略来允许或阻止数据包的传输。硬件防火墙通常具有更高的性能和吞吐量，并且对于整个网络中的所有主机都提供保护。常见的硬件防火墙包括 Cisco ASA、Palo Alto Networks、Fortinet 等。&lt;/p&gt;&#xA;&lt;p&gt;包过滤防火墙（Packet Filtering Firewall）和应用层防火墙（Application Layer Firewall）是防火墙的两种不同类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;包过滤防火墙：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;包过滤防火墙是一种基于网络数据包的源地址、目的地址、端口号和协议等信息进行过滤和控制的防火墙。它工作在网络协议栈的较低层，可以根据预定义的规则，对数据包进行简单的检查和处理。包过滤防火墙通常比较高效，并且适用于处理大量数据包的情况。但它的检查范围相对较窄，仅能检查和过滤网络层（IP层）和传输层（TCP/UDP层）的信息。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;应用层防火墙：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;应用层防火墙是一种工作在网络协议栈较高层的防火墙，它能够检查和过滤网络流量中的应用层数据，如 HTTP、FTP、SMTP 等协议的内容。应用层防火墙能够深入检查数据包的有效载荷，根据应用层协议的特征和规则来判断和阻止恶意行为。它提供了更高级的安全功能，如访问控制、应用程序识别、反病毒扫描、入侵检测等。然而，相对于包过滤防火墙，应用层防火墙的处理开销较大，对性能有一定的影响。&lt;/p&gt;&#xA;&lt;p&gt;综上，软件防火墙和硬件防火墙是不同类型的防火墙设备或软件，而包过滤防火墙和应用层防火墙是防火墙的两种不同功能和层次的分类。它们的选择和使用取决于网络环境、安全需求和性能要求。&lt;/p&gt;&#xA;&lt;h3 id=&#34;iptables&#34;&gt;&#xA;  iptables&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#iptables&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 是一个软件防火墙，而不是硬件防火墙，提供了对 Linux 内核网络层的访问控制和数据包过滤的功能。&lt;/p&gt;&#xA;&lt;p&gt;iptables 可以通过定义规则集来控制传入、传出和转发的网络流量。这些规则可以基于源 IP 地址、目标 IP 地址、协议、端口号等条件进行过滤和操作。使用 iptables 可以实现诸如网络地址转换（NAT）、端口转发、数据包屏蔽、阻止 DoS（拒绝服务）攻击等功能。&lt;/p&gt;&#xA;&lt;p&gt;iptables 的工作方式是通过配置 iptables 规则表来匹配和处理网络数据包。常见的 iptables 规则表包括 filter 表（用于过滤数据包）、nat 表（用于网络地址转换）和 mangle 表（用于特殊处理数据包）。管理员可以使用命令行界面（CLI）或脚本来配置和管理 iptables。&lt;/p&gt;&#xA;&lt;p&gt;尽管 iptables 是一个软件防火墙，但它在 Linux 系统中可以与硬件防火墙配合使用。在网络架构中，可以将 Linux 服务器作为边界设备放置在硬件防火墙之后，并使用 iptables 来增强安全性和网络流量控制。这种组合的优势是，硬件防火墙负责网络的第一道防线，而 iptables 在服务器本身提供了更细粒度的流量控制和策略定制能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.2 ssh</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.2-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.2-ssh/</guid>
      <description>&lt;h1 id=&#34;62-ssh&#34;&gt;&#xA;  6.2 ssh&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#62-ssh&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;621-ssh-和-telnet&#34;&gt;&#xA;  6.2.1 ssh 和 telnet&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#621-ssh-%e5%92%8c-telnet&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SSH（Secure Shell）和 Telnet 是两种用于远程登录和管理计算机系统的网络协议，它们在功能和安全性方面存在一些重要的区别。&lt;/p&gt;&#xA;&lt;p&gt;Telnet 是一种最早的远程登录协议，它使用明文传输数据，包括用户名和密码等敏感信息。由于数据不加密，Telnet 协议在传输过程中容易受到网络嗅探和中间人攻击的风险。因此，Telnet 在现代网络环境中很少使用，主要用于一些特殊的应用场景或旧版系统的维护。&lt;/p&gt;&#xA;&lt;p&gt;SSH 是一种安全的远程登录协议，它通过加密传输数据，提供了更高的安全性。SSH 使用公钥加密和对称密钥加密的组合，可以保护登录过程中传输的用户名、密码和其他敏感数据。由于 SSH 使用加密技术，网络嗅探和中间人攻击对SSH连接的影响较小。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，Telne t的主要优点是简单易用，而 SSH 则提供了更高的安全性和功能。SSH 不仅可以进行远程登录，还可以在远程计算机上执行命令、传输文件和建立安全的远程连接。SSH 广泛应用于服务器管理、远程维护和安全通信等领域。&lt;/p&gt;&#xA;&lt;p&gt;总结来说，Telnet 是一种不安全的远程登录协议，而 SSH 是一种安全的替代方案。在现代网络环境中，建议使用 SSH 来进行远程登录和管理计算机系统，以保护数据的安全性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;622-telnet-使用&#34;&gt;&#xA;  6.2.2 telnet 使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#622-telnet-%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装客户端&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install telnet -y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装服务端&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install telnet-server xinetd -y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 启动 telnet 服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start xinetd.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start telnet.socket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 登录 telnet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# telnet ip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;telnet 192.168.14.12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在用 telnet 登录尽量使用非 root 用户，因为 telnet 传输是明文的，在有些情况下 root 用户登录是被限制的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.3 ftp</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.3-ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.3-ftp/</guid>
      <description>&lt;h1 id=&#34;63-ftp&#34;&gt;&#xA;  6.3 ftp&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#63-ftp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;631-协议介绍&#34;&gt;&#xA;  6.3.1 协议介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#631-%e5%8d%8f%e8%ae%ae%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;FTP（File Transfer Protocol）是一种用于在计算机网络上进行文件传输的标准协议。它使用客户端-服务器模型，在客户端和服务器之间进行文件传输和交互。&lt;/p&gt;&#xA;&lt;p&gt;FTP 协议定义了一套命令和响应规范，用于控制和管理文件传输过程。它支持用户身份验证、目录浏览、文件上传和下载等操作。&lt;/p&gt;&#xA;&lt;p&gt;在 FTP 中，存在两种模式来建立数据连接：主动（Active）模式和被动（Passive）模式。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;主动模式（Active Mode）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在主动模式下，FTP 客户端使用随机生成的端口（通常大于1024）向服务器的默认 FTP 数据端口（端口20）发起连接。&lt;/li&gt;&#xA;&lt;li&gt;FTP 客户端发送一个 PORT 命令，其中包含客户端的 IP 地址和数据端口号。&lt;/li&gt;&#xA;&lt;li&gt;FTP 服务器使用它的默认控制端口（端口21）向 FTP 客户端的指定数据端口发起连接，以建立数据连接，并进行文件传输。&lt;/li&gt;&#xA;&lt;li&gt;主动模式需要 FTP 服务器能够主动连接 FTP 客户端，因此 FTP 服务器通常需要允许外部访问，并配置防火墙和 NAT 设备以允许数据连接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;被动模式（Passive Mode）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在被动模式下，FTP 客户端发送 PASV 命令给 FTP 服务器，请求进入被动模式。&lt;/li&gt;&#xA;&lt;li&gt;FTP 服务器在一个固定的范围内选择一个可用的端口（通常大于1024），并将其作为数据端口。&lt;/li&gt;&#xA;&lt;li&gt;FTP 服务器将自己的 IP 地址和数据端口作为响应发送给FTP客户端。&lt;/li&gt;&#xA;&lt;li&gt;FTP 客户端使用这个 IP 地址和数据端口发起连接，以建立数据连接，并进行文件传输。&lt;/li&gt;&#xA;&lt;li&gt;被动模式适用于FTP客户端位于防火墙或 NAT 后面的情况，因为它不需要FTP服务器主动连接FTP客户端。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;总结来说，主动模式和被动模式是 FTP 用于建立数据连接的两种不同方式。主动模式要求 FTP 服务器主动连接 FTP 客户端，而被动模式则允许 FTP 客户端主动连接 FTP 服务器。在配置 FTP 服务器和网络环境时，需要根据具体情况选择适合的模式，并确保防火墙和 NAT 设备正确配置以允许数据连接的建立。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.4 samba</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.4-samba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.4-samba/</guid>
      <description>&lt;h1 id=&#34;64-samba&#34;&gt;&#xA;  6.4 samba&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#64-samba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;641-简介&#34;&gt;&#xA;  6.4.1 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#641-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Samba 是一个开源软件套件，用于在 Linux 和 UNIX 系统上实现文件和打印机共享。它允许 Linux/UNIX 系统与 Windows 操作系统之间进行文件和资源共享，使得 Linux/UNIX 系统可以像 Windows 一样访问和使用网络共享资源。&lt;/p&gt;&#xA;&lt;p&gt;Samba 提供了 SMB/CIFS（Server Message Block/Common Internet File System）协议的实现，这是 Windows 操作系统中用于文件和打印机共享的标准协议。通过 Samba，Linux/UNIX 系统可以作为 SMB/CIFS 服务器或客户端，与 Windows 系统进行通信。&lt;/p&gt;&#xA;&lt;p&gt;以下是 Samba 的一些主要特点和用途：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;文件共享：Samba 允许在 Linux/UNIX 系统上共享文件和目录，并通过 SMB/CIFS 协议使其对 Windows 用户可见。这意味着 Windows 用户可以通过网络访问和操作 Linux/UNIX 系统上的共享文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;打印机共享：Samba 还支持共享打印机，使得 Windows 用户可以通过网络连接和使用 Linux/UNIX 系统上的打印机。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户认证和权限控制：Samba 提供了用户认证和权限控制功能，可以限制对共享资源的访问权限，确保只有经过授权的用户可以访问和修改共享文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;集成到 Windows 域：Samba 可以作为 Windows 域控制器的替代品，提供类似于 Windows Active Directory 的用户管理和身份验证功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.5 NFS</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.5-nfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.5-nfs/</guid>
      <description>&lt;h1 id=&#34;65-nfs&#34;&gt;&#xA;  6.5 NFS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#65-nfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;651-简介&#34;&gt;&#xA;  6.5.1 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#651-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;NFS（Network File System）是一种用于在网络上共享文件系统的协议。它允许一个计算机系统（称为NFS服务器）与其他计算机系统（称为NFS客户端）共享其本地文件系统，并允许客户端通过网络透明地访问和操作服务器上的文件。&lt;/p&gt;&#xA;&lt;p&gt;以下是NFS服务的一些主要特点和用途：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;文件共享：NFS允许将NFS服务器上的文件和目录共享给NFS客户端。这意味着客户端可以像访问本地文件一样访问和操作服务器上的共享文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;分布式访问：NFS允许多个NFS客户端同时访问和修改共享文件。这使得多个用户可以在不同的计算机上协同工作，并共享相同的文件和数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;透明访问：NFS为客户端提供了透明的访问体验，使得共享文件的访问方式类似于本地文件。客户端可以像访问本地文件一样使用标准的文件操作（如打开、读取、写入和关闭文件）来访问NFS服务器上的文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安全性：NFS提供了一些安全机制来保护共享文件的访问。例如，可以使用访问控制列表（ACL）来限制对文件的访问权限，并使用身份验证和加密来保护数据的安全性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;性能优化：NFS在设计时考虑了性能优化，并使用一些技术来提高文件访问的效率。例如，NFS使用缓存机制来减少网络传输，提高文件的访问速度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;使用NFS时，通常会有一个或多个NFS服务器，它们共享其本地文件系统，并提供对这些共享文件的访问。然后，NFS客户端可以通过挂载（mount）NFS服务器上的共享目录，使其在本地文件系统中可用。&lt;/p&gt;&#xA;&lt;p&gt;NFS服务器和客户端之间的通信是基于RPC（Remote Procedure Call）机制的，通过NFS协议进行文件访问和操作。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，NFS是一种开放标准的协议，并且有多个实现可用。常用的NFS实现包括NFSv3和NFSv4。不同的实现可能会有一些细微的差异和特性，因此在使用特定的NFS实现时，应该参考相应的文档和资源以获取更详细的信息和指导。&lt;/p&gt;&#xA;&lt;h2 id=&#34;652-配置和启动&#34;&gt;&#xA;  6.5.2 配置和启动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#652-%e9%85%8d%e7%bd%ae%e5%92%8c%e5%90%af%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动 NFS服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install -y nfs-utils&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start stop nfs.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NFS 的配置文件在 /etc/exports，文件不存在可以手动创建。文件格式如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 共享目录 访问控制&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 括号和主机不能有空格&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# /data/share 192.168.11.2(ro) 192.168.11.3(rw)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 所有人访问呢&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# /data/share *(rw,sync,all_squash)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/data/share *&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rw,sync,all_squash&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230710/a7baa8bd45544d77937b829d8d17a432.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;在另一台机器（客户端）上可以使用 showmount 查看 nfs 机器的共享了哪些目录：&lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.xiaobinqt.cn/xiaobinqt.io/20230710/25bc38765e194dcfbf293509c99ef837.png&#34; width=  /&gt;&lt;/div&gt;&#xA;&lt;p&gt;如果没有 showmount 命令，可以使用 &lt;code&gt;yum install showmount -y&lt;/code&gt; 安装。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.6 nginx</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.6-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.6-nginx/</guid>
      <description>&lt;h1 id=&#34;66-nginx&#34;&gt;&#xA;  6.6 nginx&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#66-nginx&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;661-nginx-和-openresty&#34;&gt;&#xA;  6.6.1 nginx 和 OpenResty&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#661-nginx-%e5%92%8c-openresty&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Nginx和OpenResty是两个不同但有关联的项目。&lt;/p&gt;&#xA;&lt;p&gt;Nginx 是一个开源的高性能 Web 服务器和反向代理服务器。它具有轻量级、高并发处理能力和低内存消耗等特点，常被用于搭建静态网站、负载均衡和反向代理等场景。Nginx 通常使用 C 语言编写，并以模块化设计的方式提供丰富的功能扩展。&lt;/p&gt;&#xA;&lt;p&gt;OpenResty 是一个基于 Nginx 的 Web 应用服务器软件集成包，它将 Nginx 与一组扩展模块和第三方库进行了集成，以提供更强大的功能。 OpenResty 允许开发人员使用 Lua 编程语言来编写 Nginx 的配置文件和扩展模块，从而实现高度可定制的 Web 应用程序。通过 OpenResty，开发人员可以在 Nginx 中使用 Lua 编写的脚本，以实现动态内容生成、API 网关、缓存加速和高级负载均衡等功能。&lt;/p&gt;&#xA;&lt;p&gt;可以说 OpenResty 是一个基于 Nginx 的增强版本，它通过添加 Lua 编程语言的支持和一系列扩展模块，使得 Nginx 可以处理更复杂的任务和场景。OpenResty 在一些需要高度定制化和可扩展性的 Web 应用程序中非常有用，特别是对于需要动态脚本处理和扩展功能的情况。&lt;/p&gt;&#xA;&lt;p&gt;Nginx 是一个独立的高性能 Web 服务器和反向代理服务器，而 OpenResty 是基于 Nginx 的 Web 应用服务器软件集成包，通过添加 Lua 编程语言的支持和扩展模块，扩展了 Nginx 的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;662-openresty-安装&#34;&gt;&#xA;  6.6.2 OpenResty 安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#662-openresty-%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;安装可以使用如下 2 条命令：&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.7 DNS</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.7-dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.7-dns/</guid>
      <description>&lt;h1 id=&#34;67-dns&#34;&gt;&#xA;  6.7 DNS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#67-dns&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;671-简介&#34;&gt;&#xA;  6.7.1 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#671-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DNS（Domain Name System）是一个用于将域名转换为与之关联的IP地址的分布式命名系统。它充当了互联网上域名与IP地址之间的映射服务。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;正向查询（Forward Lookup）：正向查询是根据给定的域名获取相应的IP地址。当你在浏览器中输入一个网址（例如 &lt;code&gt;www.example.com&lt;/code&gt;），DNS 系统会执行正向查询以查找与该域名关联的 IP 地址，从而将你的请求转发到正确的服务器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;反向查询（Reverse Lookup）：反向查询是根据给定的 IP 地址获取相应的域名。它是正向查询的逆过程。通过反向查询，你可以查找给定 IP 地址所对应的域名。这对于网络管理员来说是有用的，可以通过 IP 地址确定主机的域名。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;根域名（Root Domain）：根域名是 DNS 层次结构中的顶级域名，表示为一个点（.）。它是 DNS 命名空间的最高级别，所有其他域名都是从根域名派生出来的。根域名由一组 13 个根服务器（Root Servers）来管理，这些服务器分布在全球各个地点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;www：www 是一个常见的域名前缀，表示 “World Wide Web”。通常，网站会使用类似 &lt;code&gt;www.example.com&lt;/code&gt; 的域名来表示其 Web 服务。这是出于历史原因，当互联网刚刚兴起时，许多网站选择以 www 作为其主要 Web 服务器的标识。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;FQDN（Fully Qualified Domain Name）：FQDN 是一个完全限定域名，包括所有级别的域名，从根域名一直到最低级别的域名。例如，&lt;code&gt;www.example.com&lt;/code&gt; 是一个 FQDN，它包含三个级别的域名：com（顶级域名）、example（二级域名）和www（三级域名）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;672-bind&#34;&gt;&#xA;  6.7.2 BIND&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#672-bind&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;BIND（Berkeley Internet Name Domain）是一个开源的 DNS 软件实现，它是最常用和广泛部署的 DNS 服务器软件之一。BIND 软件提供了 DNS 协议的实现，允许将域名解析请求映射到相应的 IP 地址。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.8 NAS</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.8-nas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/linux/docs/part6-service-manage/6.8-nas/</guid>
      <description>&lt;h1 id=&#34;68-nas&#34;&gt;&#xA;  6.8 NAS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#68-nas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;681-简介&#34;&gt;&#xA;  6.8.1 简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#681-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;NAS（Network Attached Storage）是一种网络附加存储设备，它提供了一种简单和方便的方法来集中存储和共享文件、数据和媒体内容。NAS 设备通常连接到局域网（LAN）上，可以通过网络协议（如 NFS、SMB/CIFS、AFP 等）提供文件共享服务，使多台计算机或其他设备可以同时访问和使用存储在 NAS 上的文件。&lt;/p&gt;&#xA;&lt;p&gt;NAS 设备通常是一个独立的硬件设备，它包含一个或多个硬盘驱动器组成的存储系统，并配备了一个嵌入式操作系统和网络接口。它可以通过以太网连接到局域网，并通过网络协议提供文件服务。一些高级的NAS设备还提供其他功能，如备份、远程访问、多用户访问控制、多媒体流媒体等。&lt;/p&gt;&#xA;&lt;p&gt;NAS 的优点包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简单易用：NAS 设备通常具有友好的用户界面和配置工具，使其易于安装、设置和管理。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;文件共享和协作：通过 NAS 设备，多个用户可以方便地共享和访问存储在同一个位置的文件，促进文件的协作和共享。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据备份：NAS 设备通常提供内置的备份功能，可以自动备份计算机或其他设备上的数据，保护数据免受意外丢失或损坏。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;远程访问：一些 NAS 设备支持远程访问，使用户可以通过互联网从任何地方安全地访问和管理存储的文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;扩展性：NAS 设备通常具有可扩展的存储容量，可以根据需求添加更多的硬盘驱动器来扩展存储空间。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;NAS 设备适用于个人用户、家庭用户和小型办公环境，以满足数据存储、共享和备份的需求。它提供了一个中心化的存储解决方案，使用户能够轻松管理和访问存储的文件和数据。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
