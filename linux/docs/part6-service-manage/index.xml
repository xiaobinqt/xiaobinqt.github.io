<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第六部分 服务管理 on Linux 学习笔记</title>
    <link>https://example.com/linux/docs/part6-service-manage/</link>
    <description>Recent content in 第六部分 服务管理 on Linux 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://example.com/linux/docs/part6-service-manage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6.1 防火墙</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.1-firewall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part6-service-manage/6.1-firewall/</guid>
      <description>6.1 防火墙 # 6.1.1 分类 # 软件防火墙和硬件防火墙是两种常见的网络安全设备或软件，用于保护计算机系统和网络免受未授权访问、恶意攻击和网络威胁等。
软件防火墙（Software Firewall）： 软件防火墙是一种安装在计算机系统上的软件应用程序，用于监控和控制网络流量。它可以通过检查网络数据包的来源、目的地、协议和端口等信息，来判断是否允许或阻止数据包的传输。软件防火墙通常运行在操作系统的网络协议栈之上，能够保护单个计算机系统或网络中的特定主机。常见的软件防火墙包括Windows防火墙、IPTables、NetFilter等。
硬件防火墙（Hardware Firewall）： 硬件防火墙是一种独立的物理设备，专门用于网络安全防护。它通常部署在网络的边界位置，作为网络流量的第一道防线。硬件防火墙通过硬件和专用的嵌入式软件来执行数据包过滤和访问控制。它可以监控和检测网络流量，并根据预先定义的规则和策略来允许或阻止数据包的传输。硬件防火墙通常具有更高的性能和吞吐量，并且对于整个网络中的所有主机都提供保护。常见的硬件防火墙包括 Cisco ASA、Palo Alto Networks、Fortinet 等。
包过滤防火墙（Packet Filtering Firewall）和应用层防火墙（Application Layer Firewall）是防火墙的两种不同类型：
包过滤防火墙： 包过滤防火墙是一种基于网络数据包的源地址、目的地址、端口号和协议等信息进行过滤和控制的防火墙。它工作在网络协议栈的较低层，可以根据预定义的规则，对数据包进行简单的检查和处理。包过滤防火墙通常比较高效，并且适用于处理大量数据包的情况。但它的检查范围相对较窄，仅能检查和过滤网络层（IP层）和传输层（TCP/UDP层）的信息。
应用层防火墙： 应用层防火墙是一种工作在网络协议栈较高层的防火墙，它能够检查和过滤网络流量中的应用层数据，如 HTTP、FTP、SMTP 等协议的内容。应用层防火墙能够深入检查数据包的有效载荷，根据应用层协议的特征和规则来判断和阻止恶意行为。它提供了更高级的安全功能，如访问控制、应用程序识别、反病毒扫描、入侵检测等。然而，相对于包过滤防火墙，应用层防火墙的处理开销较大，对性能有一定的影响。
综上，软件防火墙和硬件防火墙是不同类型的防火墙设备或软件，而包过滤防火墙和应用层防火墙是防火墙的两种不同功能和层次的分类。它们的选择和使用取决于网络环境、安全需求和性能要求。
iptables # iptables 是一个软件防火墙，而不是硬件防火墙，提供了对 Linux 内核网络层的访问控制和数据包过滤的功能。
iptables 可以通过定义规则集来控制传入、传出和转发的网络流量。这些规则可以基于源 IP 地址、目标 IP 地址、协议、端口号等条件进行过滤和操作。使用 iptables 可以实现诸如网络地址转换（NAT）、端口转发、数据包屏蔽、阻止 DoS（拒绝服务）攻击等功能。
iptables 的工作方式是通过配置 iptables 规则表来匹配和处理网络数据包。常见的 iptables 规则表包括 filter 表（用于过滤数据包）、nat 表（用于网络地址转换）和 mangle 表（用于特殊处理数据包）。管理员可以使用命令行界面（CLI）或脚本来配置和管理 iptables。
尽管 iptables 是一个软件防火墙，但它在 Linux 系统中可以与硬件防火墙配合使用。在网络架构中，可以将 Linux 服务器作为边界设备放置在硬件防火墙之后，并使用 iptables 来增强安全性和网络流量控制。这种组合的优势是，硬件防火墙负责网络的第一道防线，而 iptables 在服务器本身提供了更细粒度的流量控制和策略定制能力。
CentOS 6 默认的防火墙是 iptables。CentOS 7 默认的防火墙是 firewallD（底层使用 netfilter）。</description>
    </item>
    
    <item>
      <title>6.2 ssh</title>
      <link>https://example.com/linux/docs/part6-service-manage/6.2-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part6-service-manage/6.2-ssh/</guid>
      <description>6.2 ssh # 6.2.1 ssh 和 telnet # SSH（Secure Shell）和 Telnet 是两种用于远程登录和管理计算机系统的网络协议，它们在功能和安全性方面存在一些重要的区别。
Telnet 是一种最早的远程登录协议，它使用明文传输数据，包括用户名和密码等敏感信息。由于数据不加密，Telnet 协议在传输过程中容易受到网络嗅探和中间人攻击的风险。因此，Telnet 在现代网络环境中很少使用，主要用于一些特殊的应用场景或旧版系统的维护。
SSH 是一种安全的远程登录协议，它通过加密传输数据，提供了更高的安全性。SSH 使用公钥加密和对称密钥加密的组合，可以保护登录过程中传输的用户名、密码和其他敏感数据。由于 SSH 使用加密技术，网络嗅探和中间人攻击对SSH连接的影响较小。
相比之下，Telne t的主要优点是简单易用，而 SSH 则提供了更高的安全性和功能。SSH 不仅可以进行远程登录，还可以在远程计算机上执行命令、传输文件和建立安全的远程连接。SSH 广泛应用于服务器管理、远程维护和安全通信等领域。
总结来说，Telnet 是一种不安全的远程登录协议，而 SSH 是一种安全的替代方案。在现代网络环境中，建议使用 SSH 来进行远程登录和管理计算机系统，以保护数据的安全性。
6.2.2 telnet 使用 # # 安装客户端 yum install telnet -y # 安装服务端 yum install telnet-server xinetd -y # 启动 telnet 服务 systemctl start xinetd.service systemctl start telnet.socket # 登录 telnet # telnet ip telnet 192.168.14.12 在用 telnet 登录尽量使用非 root 用户，因为 telnet 传输是明文的，在有些情况下 root 用户登录是被限制的。</description>
    </item>
    
  </channel>
</rss>
