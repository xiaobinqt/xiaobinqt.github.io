<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第四部分 Shell on Linux 学习笔记</title>
    <link>https://example.com/linux/docs/part4-shell/</link>
    <description>Recent content in 第四部分 Shell on Linux 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://example.com/linux/docs/part4-shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.1 Shell 简介</title>
      <link>https://example.com/linux/docs/part4-shell/4.1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part4-shell/4.1-introduction/</guid>
      <description>4.1 Shell 简介 # Shell 是命令解释器，用于解释用户对操作系统的操作。CentOS7 默认使用的 Shell 是 bash。
Shell 有很多可以再 /etc/shells 文件中查看：
4.1.1 脚本格式 # UNIX 的哲学：一条命令只做一件事。为了组合命令和多次执行，使用脚本文件来保存需要执行的命令，并赋予该文件执行权限（chmod u+rx filename）。如果是二进制文件只需要一个可执性权限，如果是脚本文件需要可读和可执行权限。
Sha-Bang # 在 shell 脚本中，Sha-Bang（也称为 Shebang 或 Hashbang）是指位于脚本文件的第一行的特殊注释。它的形式是以井号 # 开头，紧随其后是一个叹号 !，再加上一个可执行程序的路径。
下面是一个典型的 Sha-Bang 行示例：
#!/bin/bash 在上述示例中，#!/bin/bash 是一个 Sha-Bang 行。其中 #!/bin/ 是固定的前缀，用于告诉系统该文件是一个可执行文件，接下来的 bash 是解释器的路径，表示使用 Bash 解释器来执行该脚本。
Sha-Bang 行的作用是指定脚本所需的解释器。当在命令行中运行脚本文件时，操作系统会读取脚本文件的第一行，根据其中的 Sha-Bang 行来确定要使用的解释器，并将该解释器用于执行该脚本。
除了 #!/bin/bash，还可以使用其他解释器路径，如 /bin/sh、/usr/bin/env python 等，根据脚本的需求选择适当的解释器。
需要注意的是，Sha-Bang 行必须位于脚本文件的第一行，否则它将不会被正确解析。同时，脚本文件需要具有执行权限才能被执行。
4.1.2 不同执行方式 # 脚本的执行方式大致有以下几种：
# bash 执行不需要赋予执行权限 bash ./filename.sh # 需要有执行权限 ./filename.sh source .</description>
    </item>
    
    <item>
      <title>4.2 环境变量</title>
      <link>https://example.com/linux/docs/part4-shell/4.2-env-config-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part4-shell/4.2-env-config-file/</guid>
      <description>4.2 环境变量 # 4.2.1 系统环境变量 # 环境变量是每个 Shel 打开都可以直接获得到的变量。
env 命令可以查看所有已经存在的环境变量。
set 可以查看到比 env 更多的环境变量，包括预定义变量。
$PATH 是命令搜索路径，如果使用的命令不在 $PATH 下就需要使用完整路径。
$? 可以查看上一条命令是否执行成功，成为返回 0
$$ 查看当前进程的 PID
$0 查看当前执行的脚本或程序的名称。
位置参数 # $1,$2 ,...., $9,${10} ... ${2-_} 表示变量替换，意思是，如果 $2 不为空就取 $2，如果为空就是 _。
$PS1 # $PS1 用于定义 Unix 或类 Unix 操作系统中的命令行提示符。它控制着命令行界面（shell）中显示的每个命令行的外观和格式。用于设置主提示符（primary prompt）。主提示符通常在每个命令行的开始处显示，并用于指示用户输入命令。
$PS1 的值可以包含一些特殊的转义字符和变量，以便在提示符中插入特定的信息，例如当前用户名、主机名、当前工作目录等。
下面是一个示例，展示如何设置 $PS1 变量来定义自定义的命令行提示符：
# 设置自定义的命令行提示符 export PS1=&amp;#34;\u@\h:\w\$ &amp;#34; # 示例输出：user@hostname:/current/path$ 在上述示例中，$PS1 的值为 &amp;quot;\u@\h:\w\$ &amp;quot;，其中：
\u 表示当前用户名 \h 表示当前主机名 \w 表示当前工作目录 \$ 表示一个符号（$ 表示普通用户，# 表示超级用户） 命令行提示符的格式将会显示为 user@hostname:/current/path$，其中 user 是当前用户名，hostname 是当前主机名，/current/path 是当前工作目录。</description>
    </item>
    
    <item>
      <title>4.3 数组</title>
      <link>https://example.com/linux/docs/part4-shell/4.3-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part4-shell/4.3-array/</guid>
      <description> 4.3 数组 # 定义数组 IPTS=(10.0.0.1 10.0.0.2 10.0.0.3) 显示数组的所有元素 echo ${IPTS[@]} 显示数组元素个数 echo ${#PTS[@]} 显示数组的第一个元素 echo $IPTS[0]) </description>
    </item>
    
    <item>
      <title>4.4 转义和引用</title>
      <link>https://example.com/linux/docs/part4-shell/4.4-escape-quot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part4-shell/4.4-escape-quot/</guid>
      <description>4.4 转义和引用 # 4.4.1 特殊字符 # 一个字符不仅有字面意义，还有元意（meta-meaning）
# 注释 ; 分号 \ 转义符号 “ 和 &amp;rsquo; 引号 4.4.2 转义符号 # \n，\r，\t 单个字母的转义
\$，\&amp;quot;，\\ 单个非字母的转义</description>
    </item>
    
    <item>
      <title>4.5 运算符</title>
      <link>https://example.com/linux/docs/part4-shell/4.5-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/linux/docs/part4-shell/4.5-operator/</guid>
      <description> 4.5 运算符 # 4.5.1 赋值运算符 # = 赋值运算符，用于算数赋值和字符串赋值。使用 unset 取消为变量的赋值。= 除了作为赋值运算符还可以作为测试操作符。
4.5.2 基本运算符 # + - * / ** % 使用 expr 进行运算。只能支持整数。
expr 4 + 5 数字常量 # let 变量名=变量值
变量值使用 0 开头为八进制
变量值使用 0x 开头为十六进制
双圆括号是 let 命令的简化
((a=10)) ((a++)) echo $((10+20)) </description>
    </item>
    
  </channel>
</rss>
